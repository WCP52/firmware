
wcp52fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000319c  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000854  20000000  0040319c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000e0  20000854  004039f0  00010854  2**2
                  ALLOC
  3 .stack        00003004  20000934  00403ad0  00010854  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00010854  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001087e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000a994  00000000  00000000  000108d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d3d  00000000  00000000  0001b26d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000970  00000000  00000000  0001cfaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000008b0  00000000  00000000  0001d91a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00012203  00000000  00000000  0001e1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000aba1  00000000  00000000  000303cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0004ebb3  00000000  00000000  0003af6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001c2c  00000000  00000000  00089b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000434a  00000000  00000000  0008b750  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003938 	.word	0x20003938
  400004:	00400f4d 	.word	0x00400f4d
  400008:	00400f49 	.word	0x00400f49
  40000c:	00400f49 	.word	0x00400f49
  400010:	00400f49 	.word	0x00400f49
  400014:	00400f49 	.word	0x00400f49
  400018:	00400f49 	.word	0x00400f49
	...
  40002c:	00400f49 	.word	0x00400f49
  400030:	00400f49 	.word	0x00400f49
  400034:	00000000 	.word	0x00000000
  400038:	00400f49 	.word	0x00400f49
  40003c:	00400315 	.word	0x00400315
  400040:	00400f49 	.word	0x00400f49
  400044:	00400f49 	.word	0x00400f49
  400048:	00400f49 	.word	0x00400f49
  40004c:	00400f49 	.word	0x00400f49
  400050:	00400f49 	.word	0x00400f49
  400054:	00400f49 	.word	0x00400f49
  400058:	00400f49 	.word	0x00400f49
  40005c:	00000000 	.word	0x00000000
  400060:	00400f49 	.word	0x00400f49
  400064:	00400f49 	.word	0x00400f49
  400068:	00000000 	.word	0x00000000
  40006c:	00400d45 	.word	0x00400d45
  400070:	00400d59 	.word	0x00400d59
  400074:	00400d6d 	.word	0x00400d6d
  400078:	00400f49 	.word	0x00400f49
  40007c:	00400f49 	.word	0x00400f49
	...
  400088:	00400f49 	.word	0x00400f49
  40008c:	00400f49 	.word	0x00400f49
  400090:	00400f49 	.word	0x00400f49
  400094:	00400f49 	.word	0x00400f49
  400098:	00400f49 	.word	0x00400f49
  40009c:	00400f49 	.word	0x00400f49
  4000a0:	00400f49 	.word	0x00400f49
  4000a4:	00400f49 	.word	0x00400f49
  4000a8:	00400f49 	.word	0x00400f49
  4000ac:	00400f49 	.word	0x00400f49
  4000b0:	00400f49 	.word	0x00400f49
  4000b4:	00400f49 	.word	0x00400f49
  4000b8:	00400f49 	.word	0x00400f49
  4000bc:	00400f49 	.word	0x00400f49
  4000c0:	00400f49 	.word	0x00400f49
  4000c4:	00400f49 	.word	0x00400f49
  4000c8:	00400f49 	.word	0x00400f49

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000854 	.word	0x20000854
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040319c 	.word	0x0040319c

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	0040319c 	.word	0x0040319c
  400114:	20000858 	.word	0x20000858
  400118:	0040319c 	.word	0x0040319c
  40011c:	00000000 	.word	0x00000000

00400120 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400120:	b508      	push	{r3, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400122:	2015      	movs	r0, #21
  400124:	4b01      	ldr	r3, [pc, #4]	; (40012c <spi_enable_clock+0xc>)
  400126:	4798      	blx	r3
  400128:	bd08      	pop	{r3, pc}
  40012a:	bf00      	nop
  40012c:	00400e69 	.word	0x00400e69

00400130 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400130:	6843      	ldr	r3, [r0, #4]
  400132:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400136:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400138:	6843      	ldr	r3, [r0, #4]
  40013a:	0409      	lsls	r1, r1, #16
  40013c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400140:	430b      	orrs	r3, r1
  400142:	6043      	str	r3, [r0, #4]
  400144:	4770      	bx	lr
  400146:	bf00      	nop

00400148 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400148:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40014a:	f643 2499 	movw	r4, #15001	; 0x3a99
  40014e:	e001      	b.n	400154 <spi_write+0xc>
		if (!timeout--) {
  400150:	3c01      	subs	r4, #1
  400152:	d011      	beq.n	400178 <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400154:	6905      	ldr	r5, [r0, #16]
  400156:	f015 0f02 	tst.w	r5, #2
  40015a:	d0f9      	beq.n	400150 <spi_write+0x8>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40015c:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40015e:	f014 0f02 	tst.w	r4, #2
  400162:	d006      	beq.n	400172 <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400164:	0412      	lsls	r2, r2, #16
  400166:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40016a:	4311      	orrs	r1, r2
		if (uc_last) {
  40016c:	b10b      	cbz	r3, 400172 <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
  40016e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400172:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400174:	2000      	movs	r0, #0
  400176:	e000      	b.n	40017a <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
  400178:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
  40017a:	bc30      	pop	{r4, r5}
  40017c:	4770      	bx	lr
  40017e:	bf00      	nop

00400180 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400180:	b132      	cbz	r2, 400190 <spi_set_clock_polarity+0x10>
  400182:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400186:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400188:	f043 0301 	orr.w	r3, r3, #1
  40018c:	6303      	str	r3, [r0, #48]	; 0x30
  40018e:	4770      	bx	lr
  400190:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400194:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400196:	f023 0301 	bic.w	r3, r3, #1
  40019a:	6303      	str	r3, [r0, #48]	; 0x30
  40019c:	4770      	bx	lr
  40019e:	bf00      	nop

004001a0 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4001a0:	b132      	cbz	r2, 4001b0 <spi_set_clock_phase+0x10>
  4001a2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4001a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4001a8:	f043 0302 	orr.w	r3, r3, #2
  4001ac:	6303      	str	r3, [r0, #48]	; 0x30
  4001ae:	4770      	bx	lr
  4001b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4001b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4001b6:	f023 0302 	bic.w	r3, r3, #2
  4001ba:	6303      	str	r3, [r0, #48]	; 0x30
  4001bc:	4770      	bx	lr
  4001be:	bf00      	nop

004001c0 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4001c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4001c4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4001c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4001ca:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4001cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4001ce:	431a      	orrs	r2, r3
  4001d0:	630a      	str	r2, [r1, #48]	; 0x30
  4001d2:	4770      	bx	lr

004001d4 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  4001d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4001d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4001da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4001de:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4001e0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4001e2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
  4001e6:	630a      	str	r2, [r1, #48]	; 0x30
  4001e8:	4770      	bx	lr
  4001ea:	bf00      	nop

004001ec <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4001ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4001f0:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4001f2:	b280      	uxth	r0, r0
  4001f4:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4001f6:	6b08      	ldr	r0, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
  4001f8:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4001fc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  400200:	630a      	str	r2, [r1, #48]	; 0x30
  400202:	4770      	bx	lr

00400204 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400204:	b5f0      	push	{r4, r5, r6, r7, lr}
  400206:	b083      	sub	sp, #12
  400208:	4605      	mov	r5, r0
  40020a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40020c:	2300      	movs	r3, #0
  40020e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400210:	4b18      	ldr	r3, [pc, #96]	; (400274 <usart_serial_getchar+0x70>)
  400212:	4298      	cmp	r0, r3
  400214:	d107      	bne.n	400226 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400216:	461f      	mov	r7, r3
  400218:	4e17      	ldr	r6, [pc, #92]	; (400278 <usart_serial_getchar+0x74>)
  40021a:	4638      	mov	r0, r7
  40021c:	4621      	mov	r1, r4
  40021e:	47b0      	blx	r6
  400220:	2800      	cmp	r0, #0
  400222:	d1fa      	bne.n	40021a <usart_serial_getchar+0x16>
  400224:	e017      	b.n	400256 <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400226:	4b15      	ldr	r3, [pc, #84]	; (40027c <usart_serial_getchar+0x78>)
  400228:	4298      	cmp	r0, r3
  40022a:	d107      	bne.n	40023c <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  40022c:	461e      	mov	r6, r3
  40022e:	4d12      	ldr	r5, [pc, #72]	; (400278 <usart_serial_getchar+0x74>)
  400230:	4630      	mov	r0, r6
  400232:	4621      	mov	r1, r4
  400234:	47a8      	blx	r5
  400236:	2800      	cmp	r0, #0
  400238:	d1fa      	bne.n	400230 <usart_serial_getchar+0x2c>
  40023a:	e018      	b.n	40026e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40023c:	4b10      	ldr	r3, [pc, #64]	; (400280 <usart_serial_getchar+0x7c>)
  40023e:	4298      	cmp	r0, r3
  400240:	d109      	bne.n	400256 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400242:	461e      	mov	r6, r3
  400244:	4d0f      	ldr	r5, [pc, #60]	; (400284 <usart_serial_getchar+0x80>)
  400246:	4630      	mov	r0, r6
  400248:	a901      	add	r1, sp, #4
  40024a:	47a8      	blx	r5
  40024c:	2800      	cmp	r0, #0
  40024e:	d1fa      	bne.n	400246 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400250:	9b01      	ldr	r3, [sp, #4]
  400252:	7023      	strb	r3, [r4, #0]
  400254:	e00b      	b.n	40026e <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400256:	4b0c      	ldr	r3, [pc, #48]	; (400288 <usart_serial_getchar+0x84>)
  400258:	429d      	cmp	r5, r3
  40025a:	d108      	bne.n	40026e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  40025c:	461e      	mov	r6, r3
  40025e:	4d09      	ldr	r5, [pc, #36]	; (400284 <usart_serial_getchar+0x80>)
  400260:	4630      	mov	r0, r6
  400262:	a901      	add	r1, sp, #4
  400264:	47a8      	blx	r5
  400266:	2800      	cmp	r0, #0
  400268:	d1fa      	bne.n	400260 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  40026a:	9b01      	ldr	r3, [sp, #4]
  40026c:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40026e:	b003      	add	sp, #12
  400270:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400272:	bf00      	nop
  400274:	400e0600 	.word	0x400e0600
  400278:	00400f09 	.word	0x00400f09
  40027c:	400e0800 	.word	0x400e0800
  400280:	40024000 	.word	0x40024000
  400284:	00400f31 	.word	0x00400f31
  400288:	40028000 	.word	0x40028000

0040028c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  40028c:	b570      	push	{r4, r5, r6, lr}
  40028e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400290:	4b1a      	ldr	r3, [pc, #104]	; (4002fc <usart_serial_putchar+0x70>)
  400292:	4298      	cmp	r0, r3
  400294:	d107      	bne.n	4002a6 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400296:	461e      	mov	r6, r3
  400298:	4d19      	ldr	r5, [pc, #100]	; (400300 <usart_serial_putchar+0x74>)
  40029a:	4630      	mov	r0, r6
  40029c:	4621      	mov	r1, r4
  40029e:	47a8      	blx	r5
  4002a0:	2800      	cmp	r0, #0
  4002a2:	d1fa      	bne.n	40029a <usart_serial_putchar+0xe>
  4002a4:	e020      	b.n	4002e8 <usart_serial_putchar+0x5c>
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4002a6:	4b17      	ldr	r3, [pc, #92]	; (400304 <usart_serial_putchar+0x78>)
  4002a8:	4298      	cmp	r0, r3
  4002aa:	d107      	bne.n	4002bc <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
  4002ac:	461e      	mov	r6, r3
  4002ae:	4d14      	ldr	r5, [pc, #80]	; (400300 <usart_serial_putchar+0x74>)
  4002b0:	4630      	mov	r0, r6
  4002b2:	4621      	mov	r1, r4
  4002b4:	47a8      	blx	r5
  4002b6:	2800      	cmp	r0, #0
  4002b8:	d1fa      	bne.n	4002b0 <usart_serial_putchar+0x24>
  4002ba:	e017      	b.n	4002ec <usart_serial_putchar+0x60>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4002bc:	4b12      	ldr	r3, [pc, #72]	; (400308 <usart_serial_putchar+0x7c>)
  4002be:	4298      	cmp	r0, r3
  4002c0:	d107      	bne.n	4002d2 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
  4002c2:	461e      	mov	r6, r3
  4002c4:	4d11      	ldr	r5, [pc, #68]	; (40030c <usart_serial_putchar+0x80>)
  4002c6:	4630      	mov	r0, r6
  4002c8:	4621      	mov	r1, r4
  4002ca:	47a8      	blx	r5
  4002cc:	2800      	cmp	r0, #0
  4002ce:	d1fa      	bne.n	4002c6 <usart_serial_putchar+0x3a>
  4002d0:	e00e      	b.n	4002f0 <usart_serial_putchar+0x64>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4002d2:	4b0f      	ldr	r3, [pc, #60]	; (400310 <usart_serial_putchar+0x84>)
  4002d4:	4298      	cmp	r0, r3
  4002d6:	d10d      	bne.n	4002f4 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
  4002d8:	461e      	mov	r6, r3
  4002da:	4d0c      	ldr	r5, [pc, #48]	; (40030c <usart_serial_putchar+0x80>)
  4002dc:	4630      	mov	r0, r6
  4002de:	4621      	mov	r1, r4
  4002e0:	47a8      	blx	r5
  4002e2:	2800      	cmp	r0, #0
  4002e4:	d1fa      	bne.n	4002dc <usart_serial_putchar+0x50>
  4002e6:	e007      	b.n	4002f8 <usart_serial_putchar+0x6c>
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
  4002e8:	2001      	movs	r0, #1
  4002ea:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
  4002ec:	2001      	movs	r0, #1
  4002ee:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
  4002f0:	2001      	movs	r0, #1
  4002f2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4002f4:	2000      	movs	r0, #0
  4002f6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
  4002f8:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
  4002fa:	bd70      	pop	{r4, r5, r6, pc}
  4002fc:	400e0600 	.word	0x400e0600
  400300:	00400ef9 	.word	0x00400ef9
  400304:	400e0800 	.word	0x400e0800
  400308:	40024000 	.word	0x40024000
  40030c:	00400f1d 	.word	0x00400f1d
  400310:	40028000 	.word	0x40028000

00400314 <SysTick_Handler>:

/**
 * \brief Systick handler, start new conversion.
 */
void SysTick_Handler(void)
{
  400314:	4770      	bx	lr
  400316:	bf00      	nop

00400318 <do_cmd_led>:
/**
 * \brief Set LED on or off
 */
void do_cmd_led (char *arg, int on);
void do_cmd_led (char *arg, int on)
{
  400318:	b510      	push	{r4, lr}
  40031a:	460c      	mov	r4, r1
	int led = atoi (arg);
  40031c:	4b0b      	ldr	r3, [pc, #44]	; (40034c <do_cmd_led+0x34>)
  40031e:	4798      	blx	r3
	if (led == 0) {
  400320:	b940      	cbnz	r0, 400334 <do_cmd_led+0x1c>
		if (on) {
  400322:	b11c      	cbz	r4, 40032c <do_cmd_led+0x14>
			gpio_set_pin_high (LED0_GPIO);
  400324:	204a      	movs	r0, #74	; 0x4a
  400326:	4b0a      	ldr	r3, [pc, #40]	; (400350 <do_cmd_led+0x38>)
  400328:	4798      	blx	r3
  40032a:	bd10      	pop	{r4, pc}
		} else {
			gpio_set_pin_low (LED0_GPIO);
  40032c:	204a      	movs	r0, #74	; 0x4a
  40032e:	4b09      	ldr	r3, [pc, #36]	; (400354 <do_cmd_led+0x3c>)
  400330:	4798      	blx	r3
  400332:	bd10      	pop	{r4, pc}
		}
	} else if (led == 1) {
  400334:	2801      	cmp	r0, #1
  400336:	d107      	bne.n	400348 <do_cmd_led+0x30>
		if (on) {
  400338:	b11c      	cbz	r4, 400342 <do_cmd_led+0x2a>
			gpio_set_pin_high (LED1_GPIO);
  40033a:	2051      	movs	r0, #81	; 0x51
  40033c:	4b04      	ldr	r3, [pc, #16]	; (400350 <do_cmd_led+0x38>)
  40033e:	4798      	blx	r3
  400340:	bd10      	pop	{r4, pc}
			} else {
			gpio_set_pin_low (LED1_GPIO);
  400342:	2051      	movs	r0, #81	; 0x51
  400344:	4b03      	ldr	r3, [pc, #12]	; (400354 <do_cmd_led+0x3c>)
  400346:	4798      	blx	r3
  400348:	bd10      	pop	{r4, pc}
  40034a:	bf00      	nop
  40034c:	004011d9 	.word	0x004011d9
  400350:	00400a9d 	.word	0x00400a9d
  400354:	00400ab9 	.word	0x00400ab9

00400358 <do_cmd_spi>:

/**
 * \brief Send data
 */
void do_cmd_spi (char *arg)
{
  400358:	b510      	push	{r4, lr}
	long int arg_as_num = strtol (arg, NULL, 16);
  40035a:	2100      	movs	r1, #0
  40035c:	2210      	movs	r2, #16
  40035e:	4b06      	ldr	r3, [pc, #24]	; (400378 <do_cmd_spi+0x20>)
  400360:	4798      	blx	r3
  400362:	4601      	mov	r1, r0
	if (arg_as_num >= 0 && arg_as_num <= 255) {
  400364:	28ff      	cmp	r0, #255	; 0xff
  400366:	d805      	bhi.n	400374 <do_cmd_spi+0x1c>
		spi_write (SPI_MASTER_BASE, (uint8_t) arg_as_num, 0, 0);
  400368:	4804      	ldr	r0, [pc, #16]	; (40037c <do_cmd_spi+0x24>)
  40036a:	b2c9      	uxtb	r1, r1
  40036c:	2200      	movs	r2, #0
  40036e:	4613      	mov	r3, r2
  400370:	4c03      	ldr	r4, [pc, #12]	; (400380 <do_cmd_spi+0x28>)
  400372:	47a0      	blx	r4
  400374:	bd10      	pop	{r4, pc}
  400376:	bf00      	nop
  400378:	004015e9 	.word	0x004015e9
  40037c:	40008000 	.word	0x40008000
  400380:	00400149 	.word	0x00400149

00400384 <do_cmd_synthinit>:
	}
}

void do_cmd_synthinit (char *arg)
{
  400384:	b538      	push	{r3, r4, r5, lr}
	gpio_set_pin_low (GPIO_SYNTH_PWRDN);
  400386:	2022      	movs	r0, #34	; 0x22
  400388:	4c16      	ldr	r4, [pc, #88]	; (4003e4 <do_cmd_synthinit+0x60>)
  40038a:	47a0      	blx	r4
	gpio_set_pin_low (GPIO_SYNTH_nCS);
  40038c:	2004      	movs	r0, #4
  40038e:	47a0      	blx	r4
	gpio_set_pin_low (GPIO_SYNTH_IOUPDATE);
  400390:	2023      	movs	r0, #35	; 0x23
  400392:	47a0      	blx	r4
	gpio_set_pin_high (GPIO_SYNTH_MRST);
  400394:	201f      	movs	r0, #31
  400396:	4b14      	ldr	r3, [pc, #80]	; (4003e8 <do_cmd_synthinit+0x64>)
  400398:	4798      	blx	r3
	delay_us (5);
  40039a:	202b      	movs	r0, #43	; 0x2b
  40039c:	4d13      	ldr	r5, [pc, #76]	; (4003ec <do_cmd_synthinit+0x68>)
  40039e:	47a8      	blx	r5
	gpio_set_pin_low (GPIO_SYNTH_MRST);
  4003a0:	201f      	movs	r0, #31
  4003a2:	47a0      	blx	r4
	delay_us (1);
  4003a4:	2009      	movs	r0, #9
  4003a6:	47a8      	blx	r5
	spi_write (SPI_MASTER_BASE, 0x00, 0, 0);
  4003a8:	4d11      	ldr	r5, [pc, #68]	; (4003f0 <do_cmd_synthinit+0x6c>)
  4003aa:	4628      	mov	r0, r5
  4003ac:	2100      	movs	r1, #0
  4003ae:	460a      	mov	r2, r1
  4003b0:	460b      	mov	r3, r1
  4003b2:	4c10      	ldr	r4, [pc, #64]	; (4003f4 <do_cmd_synthinit+0x70>)
  4003b4:	47a0      	blx	r4
	spi_write (SPI_MASTER_BASE, 0x02, 0, 0);
  4003b6:	4628      	mov	r0, r5
  4003b8:	2102      	movs	r1, #2
  4003ba:	2200      	movs	r2, #0
  4003bc:	4613      	mov	r3, r2
  4003be:	47a0      	blx	r4
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4003c0:	462a      	mov	r2, r5
  4003c2:	6913      	ldr	r3, [r2, #16]
	while (!spi_is_tx_empty (SPI_MASTER_BASE));
  4003c4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4003c8:	d0fb      	beq.n	4003c2 <do_cmd_synthinit+0x3e>
	delay_us (1);
  4003ca:	2009      	movs	r0, #9
  4003cc:	4c07      	ldr	r4, [pc, #28]	; (4003ec <do_cmd_synthinit+0x68>)
  4003ce:	47a0      	blx	r4
	gpio_set_pin_high (GPIO_SYNTH_IOUPDATE);
  4003d0:	2023      	movs	r0, #35	; 0x23
  4003d2:	4b05      	ldr	r3, [pc, #20]	; (4003e8 <do_cmd_synthinit+0x64>)
  4003d4:	4798      	blx	r3
	delay_us (1);
  4003d6:	2009      	movs	r0, #9
  4003d8:	47a0      	blx	r4
	gpio_set_pin_low (GPIO_SYNTH_IOUPDATE);
  4003da:	2023      	movs	r0, #35	; 0x23
  4003dc:	4b01      	ldr	r3, [pc, #4]	; (4003e4 <do_cmd_synthinit+0x60>)
  4003de:	4798      	blx	r3
  4003e0:	bd38      	pop	{r3, r4, r5, pc}
  4003e2:	bf00      	nop
  4003e4:	00400ab9 	.word	0x00400ab9
  4003e8:	00400a9d 	.word	0x00400a9d
  4003ec:	20000001 	.word	0x20000001
  4003f0:	40008000 	.word	0x40008000
  4003f4:	00400149 	.word	0x00400149

004003f8 <sendControlRegister>:
}

void sendControlRegister(uint8_t addr, uint8_t *data, size_t data_length)
{
  4003f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4003fc:	4604      	mov	r4, r0
  4003fe:	4688      	mov	r8, r1
  400400:	4615      	mov	r5, r2
	//TODO: syncio 
	gpio_set_pin_low(GPIO_SYNTH_nCS);
  400402:	2004      	movs	r0, #4
  400404:	4b13      	ldr	r3, [pc, #76]	; (400454 <sendControlRegister+0x5c>)
  400406:	4798      	blx	r3
	spi_write(SPI_MASTER_BASE, addr, 0, 0);
  400408:	4813      	ldr	r0, [pc, #76]	; (400458 <sendControlRegister+0x60>)
  40040a:	4621      	mov	r1, r4
  40040c:	2200      	movs	r2, #0
  40040e:	4613      	mov	r3, r2
  400410:	4c12      	ldr	r4, [pc, #72]	; (40045c <sendControlRegister+0x64>)
  400412:	47a0      	blx	r4
	for (size_t i = 0; i < data_length; i++)
  400414:	b165      	cbz	r5, 400430 <sendControlRegister+0x38>
  400416:	4644      	mov	r4, r8
  400418:	44a8      	add	r8, r5
	{
		spi_write(SPI_MASTER_BASE, data[i], 0, 0);
  40041a:	4f0f      	ldr	r7, [pc, #60]	; (400458 <sendControlRegister+0x60>)
  40041c:	2600      	movs	r6, #0
  40041e:	4d0f      	ldr	r5, [pc, #60]	; (40045c <sendControlRegister+0x64>)
  400420:	4638      	mov	r0, r7
  400422:	f814 1b01 	ldrb.w	r1, [r4], #1
  400426:	4632      	mov	r2, r6
  400428:	4633      	mov	r3, r6
  40042a:	47a8      	blx	r5
void sendControlRegister(uint8_t addr, uint8_t *data, size_t data_length)
{
	//TODO: syncio 
	gpio_set_pin_low(GPIO_SYNTH_nCS);
	spi_write(SPI_MASTER_BASE, addr, 0, 0);
	for (size_t i = 0; i < data_length; i++)
  40042c:	4544      	cmp	r4, r8
  40042e:	d1f7      	bne.n	400420 <sendControlRegister+0x28>
  400430:	4a09      	ldr	r2, [pc, #36]	; (400458 <sendControlRegister+0x60>)
  400432:	6913      	ldr	r3, [r2, #16]
	{
		spi_write(SPI_MASTER_BASE, data[i], 0, 0);
	}
	while (!spi_is_tx_empty (SPI_MASTER_BASE));
  400434:	f413 7f00 	tst.w	r3, #512	; 0x200
  400438:	d0fb      	beq.n	400432 <sendControlRegister+0x3a>
	delay_us (1);
  40043a:	2009      	movs	r0, #9
  40043c:	4c08      	ldr	r4, [pc, #32]	; (400460 <sendControlRegister+0x68>)
  40043e:	47a0      	blx	r4
	gpio_set_pin_high (GPIO_SYNTH_IOUPDATE);
  400440:	2023      	movs	r0, #35	; 0x23
  400442:	4b08      	ldr	r3, [pc, #32]	; (400464 <sendControlRegister+0x6c>)
  400444:	4798      	blx	r3
	delay_us (1);
  400446:	2009      	movs	r0, #9
  400448:	47a0      	blx	r4
	gpio_set_pin_low (GPIO_SYNTH_IOUPDATE);
  40044a:	2023      	movs	r0, #35	; 0x23
  40044c:	4b01      	ldr	r3, [pc, #4]	; (400454 <sendControlRegister+0x5c>)
  40044e:	4798      	blx	r3
  400450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400454:	00400ab9 	.word	0x00400ab9
  400458:	40008000 	.word	0x40008000
  40045c:	00400149 	.word	0x00400149
  400460:	20000001 	.word	0x20000001
  400464:	00400a9d 	.word	0x00400a9d

00400468 <sendChannelRegister>:
}

void sendChannelRegister(uint8_t addr, uint8_t *data, size_t data_length, uint8_t channelNumber)
{
  400468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40046c:	4606      	mov	r6, r0
  40046e:	4688      	mov	r8, r1
  400470:	4615      	mov	r5, r2
  400472:	461c      	mov	r4, r3
	if (channelNumber > 1)
  400474:	2b01      	cmp	r3, #1
  400476:	d839      	bhi.n	4004ec <sendChannelRegister+0x84>
		return;
	gpio_set_pin_low(GPIO_SYNTH_nCS);
  400478:	2004      	movs	r0, #4
  40047a:	4b1d      	ldr	r3, [pc, #116]	; (4004f0 <sendChannelRegister+0x88>)
  40047c:	4798      	blx	r3
	spi_write(SPI_MASTER_BASE, 0, 0, 0);
  40047e:	481d      	ldr	r0, [pc, #116]	; (4004f4 <sendChannelRegister+0x8c>)
  400480:	2100      	movs	r1, #0
  400482:	460a      	mov	r2, r1
  400484:	460b      	mov	r3, r1
  400486:	4f1c      	ldr	r7, [pc, #112]	; (4004f8 <sendChannelRegister+0x90>)
  400488:	47b8      	blx	r7
	if (channelNumber == 0)
  40048a:	b92c      	cbnz	r4, 400498 <sendChannelRegister+0x30>
		spi_write(SPI_MASTER_BASE, 0x82, 0, 0);
  40048c:	4819      	ldr	r0, [pc, #100]	; (4004f4 <sendChannelRegister+0x8c>)
  40048e:	2182      	movs	r1, #130	; 0x82
  400490:	2200      	movs	r2, #0
  400492:	4613      	mov	r3, r2
  400494:	47b8      	blx	r7
  400496:	e005      	b.n	4004a4 <sendChannelRegister+0x3c>
	else 
		spi_write(SPI_MASTER_BASE, 0X42, 0, 0); 
  400498:	4816      	ldr	r0, [pc, #88]	; (4004f4 <sendChannelRegister+0x8c>)
  40049a:	2142      	movs	r1, #66	; 0x42
  40049c:	2200      	movs	r2, #0
  40049e:	4613      	mov	r3, r2
  4004a0:	4c15      	ldr	r4, [pc, #84]	; (4004f8 <sendChannelRegister+0x90>)
  4004a2:	47a0      	blx	r4
	spi_write(SPI_MASTER_BASE, addr, 0, 0);
  4004a4:	4813      	ldr	r0, [pc, #76]	; (4004f4 <sendChannelRegister+0x8c>)
  4004a6:	4631      	mov	r1, r6
  4004a8:	2200      	movs	r2, #0
  4004aa:	4613      	mov	r3, r2
  4004ac:	4c12      	ldr	r4, [pc, #72]	; (4004f8 <sendChannelRegister+0x90>)
  4004ae:	47a0      	blx	r4
	for (size_t i = 0; i < data_length; i++)
  4004b0:	b165      	cbz	r5, 4004cc <sendChannelRegister+0x64>
  4004b2:	4644      	mov	r4, r8
  4004b4:	44a8      	add	r8, r5
	{
		spi_write(SPI_MASTER_BASE, data[i], 0, 0);
  4004b6:	4f0f      	ldr	r7, [pc, #60]	; (4004f4 <sendChannelRegister+0x8c>)
  4004b8:	2600      	movs	r6, #0
  4004ba:	4d0f      	ldr	r5, [pc, #60]	; (4004f8 <sendChannelRegister+0x90>)
  4004bc:	4638      	mov	r0, r7
  4004be:	f814 1b01 	ldrb.w	r1, [r4], #1
  4004c2:	4632      	mov	r2, r6
  4004c4:	4633      	mov	r3, r6
  4004c6:	47a8      	blx	r5
	if (channelNumber == 0)
		spi_write(SPI_MASTER_BASE, 0x82, 0, 0);
	else 
		spi_write(SPI_MASTER_BASE, 0X42, 0, 0); 
	spi_write(SPI_MASTER_BASE, addr, 0, 0);
	for (size_t i = 0; i < data_length; i++)
  4004c8:	4544      	cmp	r4, r8
  4004ca:	d1f7      	bne.n	4004bc <sendChannelRegister+0x54>
  4004cc:	4a09      	ldr	r2, [pc, #36]	; (4004f4 <sendChannelRegister+0x8c>)
  4004ce:	6913      	ldr	r3, [r2, #16]
	{
		spi_write(SPI_MASTER_BASE, data[i], 0, 0);
	}
	
	while (!spi_is_tx_empty (SPI_MASTER_BASE));
  4004d0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4004d4:	d0fb      	beq.n	4004ce <sendChannelRegister+0x66>
	delay_us (1);
  4004d6:	2009      	movs	r0, #9
  4004d8:	4c08      	ldr	r4, [pc, #32]	; (4004fc <sendChannelRegister+0x94>)
  4004da:	47a0      	blx	r4
	gpio_set_pin_high (GPIO_SYNTH_IOUPDATE);
  4004dc:	2023      	movs	r0, #35	; 0x23
  4004de:	4b08      	ldr	r3, [pc, #32]	; (400500 <sendChannelRegister+0x98>)
  4004e0:	4798      	blx	r3
	delay_us (1);
  4004e2:	2009      	movs	r0, #9
  4004e4:	47a0      	blx	r4
	gpio_set_pin_low (GPIO_SYNTH_IOUPDATE);
  4004e6:	2023      	movs	r0, #35	; 0x23
  4004e8:	4b01      	ldr	r3, [pc, #4]	; (4004f0 <sendChannelRegister+0x88>)
  4004ea:	4798      	blx	r3
  4004ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004f0:	00400ab9 	.word	0x00400ab9
  4004f4:	40008000 	.word	0x40008000
  4004f8:	00400149 	.word	0x00400149
  4004fc:	20000001 	.word	0x20000001
  400500:	00400a9d 	.word	0x00400a9d

00400504 <setCh1Freq>:
		
}

void setCh1Freq()
{
  400504:	b510      	push	{r4, lr}
	sendChannelRegister(CFTW0_ADDR, "\0\0\0\x01", 4, 1);
  400506:	2004      	movs	r0, #4
  400508:	4902      	ldr	r1, [pc, #8]	; (400514 <setCh1Freq+0x10>)
  40050a:	4602      	mov	r2, r0
  40050c:	2301      	movs	r3, #1
  40050e:	4c02      	ldr	r4, [pc, #8]	; (400518 <setCh1Freq+0x14>)
  400510:	47a0      	blx	r4
  400512:	bd10      	pop	{r4, pc}
  400514:	0040301c 	.word	0x0040301c
  400518:	00400469 	.word	0x00400469

0040051c <synthClockInit>:
}

void synthClockInit()
{
  40051c:	b508      	push	{r3, lr}
	memset (FR1, 0, sizeof FR1);
  40051e:	4905      	ldr	r1, [pc, #20]	; (400534 <synthClockInit+0x18>)
  400520:	2300      	movs	r3, #0
  400522:	800b      	strh	r3, [r1, #0]
  400524:	708b      	strb	r3, [r1, #2]
	FR1[FR1_VCOGAIN_I] |= (1 << FR1_VCOGAIN_B);
	FR1[FR1_PLLRATIO_I] |= (20 << FR1_PLLRATIO_B);
  400526:	23d0      	movs	r3, #208	; 0xd0
  400528:	700b      	strb	r3, [r1, #0]
	sendControlRegister(FR1_ADDR, FR1, sizeof(FR1));
  40052a:	2001      	movs	r0, #1
  40052c:	2203      	movs	r2, #3
  40052e:	4b02      	ldr	r3, [pc, #8]	; (400538 <synthClockInit+0x1c>)
  400530:	4798      	blx	r3
  400532:	bd08      	pop	{r3, pc}
  400534:	20000870 	.word	0x20000870
  400538:	004003f9 	.word	0x004003f9

0040053c <get_line_from_serial>:
 * \param buflen	Length of buffer
 * \return 0 on success, 1 on error
 */
int get_line_from_serial (char *buffer, size_t buflen);
int get_line_from_serial (char *buffer, size_t buflen)
{
  40053c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400540:	4607      	mov	r7, r0
	/* Implement our own getline so we can easily complain if the length goes
	 * over. */
	size_t i;
	for (i = 0; i < buflen - 1; ++i) {
  400542:	1e4e      	subs	r6, r1, #1
  400544:	d02d      	beq.n	4005a2 <get_line_from_serial+0x66>
  400546:	2400      	movs	r4, #0
		int char_from_serial = getchar ();
  400548:	4d19      	ldr	r5, [pc, #100]	; (4005b0 <get_line_from_serial+0x74>)
  40054a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4005c0 <get_line_from_serial+0x84>
  40054e:	682b      	ldr	r3, [r5, #0]
  400550:	6859      	ldr	r1, [r3, #4]
  400552:	684a      	ldr	r2, [r1, #4]
  400554:	3a01      	subs	r2, #1
  400556:	604a      	str	r2, [r1, #4]
  400558:	2a00      	cmp	r2, #0
  40055a:	da03      	bge.n	400564 <get_line_from_serial+0x28>
  40055c:	4618      	mov	r0, r3
  40055e:	6859      	ldr	r1, [r3, #4]
  400560:	47c0      	blx	r8
  400562:	e004      	b.n	40056e <get_line_from_serial+0x32>
  400564:	685a      	ldr	r2, [r3, #4]
  400566:	6813      	ldr	r3, [r2, #0]
  400568:	1c59      	adds	r1, r3, #1
  40056a:	6011      	str	r1, [r2, #0]
  40056c:	7818      	ldrb	r0, [r3, #0]
		if (char_from_serial < 0 || char_from_serial == EOF) {
  40056e:	2800      	cmp	r0, #0
  400570:	da05      	bge.n	40057e <get_line_from_serial+0x42>
			puts ("Serial error!\r");
  400572:	4810      	ldr	r0, [pc, #64]	; (4005b4 <get_line_from_serial+0x78>)
  400574:	4b10      	ldr	r3, [pc, #64]	; (4005b8 <get_line_from_serial+0x7c>)
  400576:	4798      	blx	r3
			return 1;
  400578:	2001      	movs	r0, #1
  40057a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (char_from_serial == '\r' || char_from_serial == '\n') {
  40057e:	280d      	cmp	r0, #13
  400580:	d003      	beq.n	40058a <get_line_from_serial+0x4e>
  400582:	280a      	cmp	r0, #10
  400584:	d109      	bne.n	40059a <get_line_from_serial+0x5e>
  400586:	4623      	mov	r3, r4
  400588:	e000      	b.n	40058c <get_line_from_serial+0x50>
  40058a:	4623      	mov	r3, r4
			/* End of line */
			buffer[i] = 0;
  40058c:	2200      	movs	r2, #0
  40058e:	54fa      	strb	r2, [r7, r3]
			break;
		}
		buffer[i] = (char) char_from_serial;
	}
	
	if (i == buflen - 1) {
  400590:	42a6      	cmp	r6, r4
  400592:	d006      	beq.n	4005a2 <get_line_from_serial+0x66>
		/* Reached the end without getting a newline. */
		puts ("Buffer overflow!\r");
		return 1;
	} else {
		return 0;
  400594:	4610      	mov	r0, r2
  400596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (char_from_serial == '\r' || char_from_serial == '\n') {
			/* End of line */
			buffer[i] = 0;
			break;
		}
		buffer[i] = (char) char_from_serial;
  40059a:	5538      	strb	r0, [r7, r4]
int get_line_from_serial (char *buffer, size_t buflen)
{
	/* Implement our own getline so we can easily complain if the length goes
	 * over. */
	size_t i;
	for (i = 0; i < buflen - 1; ++i) {
  40059c:	3401      	adds	r4, #1
  40059e:	42b4      	cmp	r4, r6
  4005a0:	d1d5      	bne.n	40054e <get_line_from_serial+0x12>
		buffer[i] = (char) char_from_serial;
	}
	
	if (i == buflen - 1) {
		/* Reached the end without getting a newline. */
		puts ("Buffer overflow!\r");
  4005a2:	4806      	ldr	r0, [pc, #24]	; (4005bc <get_line_from_serial+0x80>)
  4005a4:	4b04      	ldr	r3, [pc, #16]	; (4005b8 <get_line_from_serial+0x7c>)
  4005a6:	4798      	blx	r3
		return 1;
  4005a8:	2001      	movs	r0, #1
	} else {
		return 0;
	}
}
  4005aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005ae:	bf00      	nop
  4005b0:	20000440 	.word	0x20000440
  4005b4:	00403024 	.word	0x00403024
  4005b8:	00401321 	.word	0x00401321
  4005bc:	00403034 	.word	0x00403034
  4005c0:	00401331 	.word	0x00401331

004005c4 <cmd_process>:
/**
 * \brief Read a line from stdin and interpret it.
 */
void cmd_process (void);
void cmd_process (void)
{
  4005c4:	b510      	push	{r4, lr}
  4005c6:	b0c0      	sub	sp, #256	; 0x100
	char serial_buffer[256];
	
	if (get_line_from_serial (serial_buffer, sizeof serial_buffer)) {
  4005c8:	4668      	mov	r0, sp
  4005ca:	f44f 7180 	mov.w	r1, #256	; 0x100
  4005ce:	4b32      	ldr	r3, [pc, #200]	; (400698 <cmd_process+0xd4>)
  4005d0:	4798      	blx	r3
  4005d2:	2800      	cmp	r0, #0
  4005d4:	d15e      	bne.n	400694 <cmd_process+0xd0>
		return;
	}
	
	/* First character is the command */
	char cmd = serial_buffer [0];
  4005d6:	f89d 4000 	ldrb.w	r4, [sp]
	
	/* Rest is the argument */
	char *arg = serial_buffer + 1;
	
	/* Advance the argument until no more spaces exist */
	while (*arg) {
  4005da:	f89d 2001 	ldrb.w	r2, [sp, #1]
  4005de:	b1a2      	cbz	r2, 40060a <cmd_process+0x46>
		if (!isspace ((int) arg[0])) break;
  4005e0:	4b2e      	ldr	r3, [pc, #184]	; (40069c <cmd_process+0xd8>)
  4005e2:	6819      	ldr	r1, [r3, #0]
  4005e4:	440a      	add	r2, r1
  4005e6:	7853      	ldrb	r3, [r2, #1]
  4005e8:	f013 0f08 	tst.w	r3, #8
  4005ec:	d010      	beq.n	400610 <cmd_process+0x4c>
  4005ee:	f10d 0302 	add.w	r3, sp, #2
  4005f2:	e004      	b.n	4005fe <cmd_process+0x3a>
  4005f4:	440a      	add	r2, r1
  4005f6:	7852      	ldrb	r2, [r2, #1]
  4005f8:	f012 0f08 	tst.w	r2, #8
  4005fc:	d00a      	beq.n	400614 <cmd_process+0x50>
		++arg;
  4005fe:	4618      	mov	r0, r3
	
	/* Rest is the argument */
	char *arg = serial_buffer + 1;
	
	/* Advance the argument until no more spaces exist */
	while (*arg) {
  400600:	f813 2b01 	ldrb.w	r2, [r3], #1
  400604:	2a00      	cmp	r2, #0
  400606:	d1f5      	bne.n	4005f4 <cmd_process+0x30>
  400608:	e004      	b.n	400614 <cmd_process+0x50>
	
	/* First character is the command */
	char cmd = serial_buffer [0];
	
	/* Rest is the argument */
	char *arg = serial_buffer + 1;
  40060a:	f10d 0001 	add.w	r0, sp, #1
  40060e:	e001      	b.n	400614 <cmd_process+0x50>
  400610:	f10d 0001 	add.w	r0, sp, #1
		if (!isspace ((int) arg[0])) break;
		++arg;
	}
	
	/* Branch! */
	switch (cmd) {
  400614:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
  400618:	2b42      	cmp	r3, #66	; 0x42
  40061a:	d83b      	bhi.n	400694 <cmd_process+0xd0>
  40061c:	e8df f003 	tbb	[pc, r3]
  400620:	3a383532 	.word	0x3a383532
  400624:	3a3a3a3a 	.word	0x3a3a3a3a
  400628:	3a3a3a3a 	.word	0x3a3a3a3a
  40062c:	3a3a3a3a 	.word	0x3a3a3a3a
  400630:	3a3a3a3a 	.word	0x3a3a3a3a
  400634:	3a3a3a22 	.word	0x3a3a3a22
  400638:	273a3a3a 	.word	0x273a3a3a
  40063c:	3a3a3a3a 	.word	0x3a3a3a3a
  400640:	3a3a3a3a 	.word	0x3a3a3a3a
  400644:	3a3a3a3a 	.word	0x3a3a3a3a
  400648:	3a3a3a3a 	.word	0x3a3a3a3a
  40064c:	3a3a3a3a 	.word	0x3a3a3a3a
  400650:	3a3a3a3a 	.word	0x3a3a3a3a
  400654:	3a3a3a22 	.word	0x3a3a3a22
  400658:	2b3a3a3a 	.word	0x2b3a3a3a
  40065c:	3a3a3a3a 	.word	0x3a3a3a3a
  400660:	3a3a      	.short	0x3a3a
  400662:	2f          	.byte	0x2f
  400663:	00          	.byte	0x00
		case 'e':
		case 'E':
			/* Echo */
			puts (arg);
  400664:	4c0e      	ldr	r4, [pc, #56]	; (4006a0 <cmd_process+0xdc>)
  400666:	47a0      	blx	r4
			puts ("\r");
  400668:	480e      	ldr	r0, [pc, #56]	; (4006a4 <cmd_process+0xe0>)
  40066a:	47a0      	blx	r4
			break;
  40066c:	e012      	b.n	400694 <cmd_process+0xd0>
		
		case 'L':
			/* Led on */
			do_cmd_led (arg, 1);
  40066e:	2101      	movs	r1, #1
  400670:	4b0d      	ldr	r3, [pc, #52]	; (4006a8 <cmd_process+0xe4>)
  400672:	4798      	blx	r3
			break;
  400674:	e00e      	b.n	400694 <cmd_process+0xd0>
		case 'l':
			/* Led off */
			do_cmd_led (arg, 0);
  400676:	2100      	movs	r1, #0
  400678:	4b0b      	ldr	r3, [pc, #44]	; (4006a8 <cmd_process+0xe4>)
  40067a:	4798      	blx	r3
			break;
  40067c:	e00a      	b.n	400694 <cmd_process+0xd0>
			
		case 's':
			/* SPI transmit */
			do_cmd_spi (arg);
  40067e:	4b0b      	ldr	r3, [pc, #44]	; (4006ac <cmd_process+0xe8>)
  400680:	4798      	blx	r3
			break;
  400682:	e007      	b.n	400694 <cmd_process+0xd0>
		
		case '1':
			/* Synthesizer init */
			do_cmd_synthinit (arg);
  400684:	4b0a      	ldr	r3, [pc, #40]	; (4006b0 <cmd_process+0xec>)
  400686:	4798      	blx	r3
			break;
  400688:	e004      	b.n	400694 <cmd_process+0xd0>
		case '2':
			synthClockInit();
  40068a:	4b0a      	ldr	r3, [pc, #40]	; (4006b4 <cmd_process+0xf0>)
  40068c:	4798      	blx	r3
			break;
  40068e:	e001      	b.n	400694 <cmd_process+0xd0>
		case '3':
			setCh1Freq();
  400690:	4b09      	ldr	r3, [pc, #36]	; (4006b8 <cmd_process+0xf4>)
  400692:	4798      	blx	r3
			break;
	}
}
  400694:	b040      	add	sp, #256	; 0x100
  400696:	bd10      	pop	{r4, pc}
  400698:	0040053d 	.word	0x0040053d
  40069c:	20000010 	.word	0x20000010
  4006a0:	00401321 	.word	0x00401321
  4006a4:	00403044 	.word	0x00403044
  4006a8:	00400319 	.word	0x00400319
  4006ac:	00400359 	.word	0x00400359
  4006b0:	00400385 	.word	0x00400385
  4006b4:	0040051d 	.word	0x0040051d
  4006b8:	00400505 	.word	0x00400505

004006bc <pins_init>:


/* GPIO pins for synth control */
void pins_init (void);
void pins_init (void)
{
  4006bc:	b510      	push	{r4, lr}
	gpio_configure_pin (GPIO_SYNTH_nCS, GPIO_SYNTH_nCS_F);
  4006be:	2004      	movs	r0, #4
  4006c0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4006c4:	4c07      	ldr	r4, [pc, #28]	; (4006e4 <pins_init+0x28>)
  4006c6:	47a0      	blx	r4
	gpio_configure_pin (GPIO_SYNTH_IOUPDATE, GPIO_SYNTH_IOUPDATE_F);
  4006c8:	2023      	movs	r0, #35	; 0x23
  4006ca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4006ce:	47a0      	blx	r4
	gpio_configure_pin (GPIO_SYNTH_PWRDN, GPIO_SYNTH_PWRDN_F);
  4006d0:	2022      	movs	r0, #34	; 0x22
  4006d2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4006d6:	47a0      	blx	r4
	gpio_configure_pin (GPIO_SYNTH_MRST, GPIO_SYNTH_MRST_F);
  4006d8:	201f      	movs	r0, #31
  4006da:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4006de:	47a0      	blx	r4
  4006e0:	bd10      	pop	{r4, pc}
  4006e2:	bf00      	nop
  4006e4:	00400ad5 	.word	0x00400ad5

004006e8 <main>:
 * \brief main Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  4006e8:	b500      	push	{lr}
  4006ea:	b085      	sub	sp, #20
	/* Initialize the SAM system. */
	sysclk_init();
  4006ec:	4b36      	ldr	r3, [pc, #216]	; (4007c8 <main+0xe0>)
  4006ee:	4798      	blx	r3
	board_init();
  4006f0:	4b36      	ldr	r3, [pc, #216]	; (4007cc <main+0xe4>)
  4006f2:	4798      	blx	r3
	pins_init ();
  4006f4:	4b36      	ldr	r3, [pc, #216]	; (4007d0 <main+0xe8>)
  4006f6:	4798      	blx	r3
  4006f8:	2008      	movs	r0, #8
  4006fa:	4d36      	ldr	r5, [pc, #216]	; (4007d4 <main+0xec>)
  4006fc:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4006fe:	4c36      	ldr	r4, [pc, #216]	; (4007d8 <main+0xf0>)
  400700:	4b36      	ldr	r3, [pc, #216]	; (4007dc <main+0xf4>)
  400702:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400704:	4a36      	ldr	r2, [pc, #216]	; (4007e0 <main+0xf8>)
  400706:	4b37      	ldr	r3, [pc, #220]	; (4007e4 <main+0xfc>)
  400708:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40070a:	4a37      	ldr	r2, [pc, #220]	; (4007e8 <main+0x100>)
  40070c:	4b37      	ldr	r3, [pc, #220]	; (4007ec <main+0x104>)
  40070e:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400710:	4b37      	ldr	r3, [pc, #220]	; (4007f0 <main+0x108>)
  400712:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400714:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400718:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  40071a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40071e:	9303      	str	r3, [sp, #12]
  400720:	2008      	movs	r0, #8
  400722:	47a8      	blx	r5
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400724:	4620      	mov	r0, r4
  400726:	a901      	add	r1, sp, #4
  400728:	4b32      	ldr	r3, [pc, #200]	; (4007f4 <main+0x10c>)
  40072a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40072c:	4d32      	ldr	r5, [pc, #200]	; (4007f8 <main+0x110>)
  40072e:	682b      	ldr	r3, [r5, #0]
  400730:	6898      	ldr	r0, [r3, #8]
  400732:	2100      	movs	r1, #0
  400734:	4c31      	ldr	r4, [pc, #196]	; (4007fc <main+0x114>)
  400736:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400738:	682b      	ldr	r3, [r5, #0]
  40073a:	6858      	ldr	r0, [r3, #4]
  40073c:	2100      	movs	r1, #0
  40073e:	47a0      	blx	r4
/**
 * \brief Initialize SPI as master.
 */
static void spi_master_initialize(void)
{
	puts("-I- Initialize SPI as master\r");
  400740:	482f      	ldr	r0, [pc, #188]	; (400800 <main+0x118>)
  400742:	4b30      	ldr	r3, [pc, #192]	; (400804 <main+0x11c>)
  400744:	4798      	blx	r3

	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI_MASTER_BASE);
  400746:	4c30      	ldr	r4, [pc, #192]	; (400808 <main+0x120>)
  400748:	4620      	mov	r0, r4
  40074a:	4b30      	ldr	r3, [pc, #192]	; (40080c <main+0x124>)
  40074c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  40074e:	2302      	movs	r3, #2
  400750:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400752:	2380      	movs	r3, #128	; 0x80
  400754:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  400756:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40075a:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  40075c:	6863      	ldr	r3, [r4, #4]
  40075e:	f043 0301 	orr.w	r3, r3, #1
  400762:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400764:	6863      	ldr	r3, [r4, #4]
  400766:	f043 0310 	orr.w	r3, r3, #16
  40076a:	6063      	str	r3, [r4, #4]
	spi_disable(SPI_MASTER_BASE);
	spi_reset(SPI_MASTER_BASE);
	spi_set_lastxfer(SPI_MASTER_BASE);
	spi_set_master_mode(SPI_MASTER_BASE);
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
  40076c:	4620      	mov	r0, r4
  40076e:	210e      	movs	r1, #14
  400770:	4b27      	ldr	r3, [pc, #156]	; (400810 <main+0x128>)
  400772:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  400774:	4620      	mov	r0, r4
  400776:	2100      	movs	r1, #0
  400778:	460a      	mov	r2, r1
  40077a:	4b26      	ldr	r3, [pc, #152]	; (400814 <main+0x12c>)
  40077c:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
  40077e:	4620      	mov	r0, r4
  400780:	2100      	movs	r1, #0
  400782:	460a      	mov	r2, r1
  400784:	4b24      	ldr	r3, [pc, #144]	; (400818 <main+0x130>)
  400786:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_MASTER_BASE, SPI_CHIP_SEL,
  400788:	4620      	mov	r0, r4
  40078a:	2100      	movs	r1, #0
  40078c:	460a      	mov	r2, r1
  40078e:	4b23      	ldr	r3, [pc, #140]	; (40081c <main+0x134>)
  400790:	4798      	blx	r3
			SPI_CSR_BITS_8_BIT);
	spi_set_baudrate_div(SPI_MASTER_BASE, SPI_CHIP_SEL,
  400792:	4620      	mov	r0, r4
  400794:	2100      	movs	r1, #0
  400796:	22b0      	movs	r2, #176	; 0xb0
  400798:	4b21      	ldr	r3, [pc, #132]	; (400820 <main+0x138>)
  40079a:	4798      	blx	r3
			(sysclk_get_cpu_hz() / 100000uL));
	spi_set_transfer_delay(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_DLYBS,
  40079c:	4620      	mov	r0, r4
  40079e:	2100      	movs	r1, #0
  4007a0:	2240      	movs	r2, #64	; 0x40
  4007a2:	2310      	movs	r3, #16
  4007a4:	4d1f      	ldr	r5, [pc, #124]	; (400824 <main+0x13c>)
  4007a6:	47a8      	blx	r5
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4007a8:	2301      	movs	r3, #1
  4007aa:	6023      	str	r3, [r4, #0]
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  4007ac:	4b1e      	ldr	r3, [pc, #120]	; (400828 <main+0x140>)
  4007ae:	4a1f      	ldr	r2, [pc, #124]	; (40082c <main+0x144>)
  4007b0:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  4007b2:	21f0      	movs	r1, #240	; 0xf0
  4007b4:	4a1e      	ldr	r2, [pc, #120]	; (400830 <main+0x148>)
  4007b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  4007ba:	2200      	movs	r2, #0
  4007bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  4007be:	2207      	movs	r2, #7
  4007c0:	601a      	str	r2, [r3, #0]
			puts("-F- Systick configuration error\r");
		}
	}

	for (;;) {
		cmd_process ();
  4007c2:	4c1c      	ldr	r4, [pc, #112]	; (400834 <main+0x14c>)
  4007c4:	47a0      	blx	r4
  4007c6:	e7fd      	b.n	4007c4 <main+0xdc>
  4007c8:	00400839 	.word	0x00400839
  4007cc:	00400931 	.word	0x00400931
  4007d0:	004006bd 	.word	0x004006bd
  4007d4:	00400e69 	.word	0x00400e69
  4007d8:	400e0600 	.word	0x400e0600
  4007dc:	20000928 	.word	0x20000928
  4007e0:	0040028d 	.word	0x0040028d
  4007e4:	20000924 	.word	0x20000924
  4007e8:	00400205 	.word	0x00400205
  4007ec:	20000920 	.word	0x20000920
  4007f0:	07270e00 	.word	0x07270e00
  4007f4:	00400ec1 	.word	0x00400ec1
  4007f8:	20000440 	.word	0x20000440
  4007fc:	00401365 	.word	0x00401365
  400800:	00403048 	.word	0x00403048
  400804:	00401321 	.word	0x00401321
  400808:	40008000 	.word	0x40008000
  40080c:	00400121 	.word	0x00400121
  400810:	00400131 	.word	0x00400131
  400814:	00400181 	.word	0x00400181
  400818:	004001a1 	.word	0x004001a1
  40081c:	004001c1 	.word	0x004001c1
  400820:	004001d5 	.word	0x004001d5
  400824:	004001ed 	.word	0x004001ed
  400828:	e000e010 	.word	0xe000e010
  40082c:	00124f7f 	.word	0x00124f7f
  400830:	e000ed00 	.word	0xe000ed00
  400834:	004005c5 	.word	0x004005c5

00400838 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400838:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40083a:	480e      	ldr	r0, [pc, #56]	; (400874 <sysclk_init+0x3c>)
  40083c:	4b0e      	ldr	r3, [pc, #56]	; (400878 <sysclk_init+0x40>)
  40083e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400840:	2000      	movs	r0, #0
  400842:	213e      	movs	r1, #62	; 0x3e
  400844:	4b0d      	ldr	r3, [pc, #52]	; (40087c <sysclk_init+0x44>)
  400846:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400848:	4c0d      	ldr	r4, [pc, #52]	; (400880 <sysclk_init+0x48>)
  40084a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40084c:	2800      	cmp	r0, #0
  40084e:	d0fc      	beq.n	40084a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400850:	4b0c      	ldr	r3, [pc, #48]	; (400884 <sysclk_init+0x4c>)
  400852:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400854:	4a0c      	ldr	r2, [pc, #48]	; (400888 <sysclk_init+0x50>)
  400856:	4b0d      	ldr	r3, [pc, #52]	; (40088c <sysclk_init+0x54>)
  400858:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40085a:	4c0d      	ldr	r4, [pc, #52]	; (400890 <sysclk_init+0x58>)
  40085c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40085e:	2800      	cmp	r0, #0
  400860:	d0fc      	beq.n	40085c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400862:	2010      	movs	r0, #16
  400864:	4b0b      	ldr	r3, [pc, #44]	; (400894 <sysclk_init+0x5c>)
  400866:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400868:	4b0b      	ldr	r3, [pc, #44]	; (400898 <sysclk_init+0x60>)
  40086a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40086c:	4801      	ldr	r0, [pc, #4]	; (400874 <sysclk_init+0x3c>)
  40086e:	4b02      	ldr	r3, [pc, #8]	; (400878 <sysclk_init+0x40>)
  400870:	4798      	blx	r3
  400872:	bd10      	pop	{r4, pc}
  400874:	07270e00 	.word	0x07270e00
  400878:	00401115 	.word	0x00401115
  40087c:	00400de5 	.word	0x00400de5
  400880:	00400e39 	.word	0x00400e39
  400884:	00400e49 	.word	0x00400e49
  400888:	20133f01 	.word	0x20133f01
  40088c:	400e0400 	.word	0x400e0400
  400890:	00400e59 	.word	0x00400e59
  400894:	00400d81 	.word	0x00400d81
  400898:	00401001 	.word	0x00401001

0040089c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40089c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008a0:	460c      	mov	r4, r1
  4008a2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
  4008a4:	b960      	cbnz	r0, 4008c0 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
  4008a6:	2a00      	cmp	r2, #0
  4008a8:	dd0e      	ble.n	4008c8 <_read+0x2c>
  4008aa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4008ac:	4e09      	ldr	r6, [pc, #36]	; (4008d4 <_read+0x38>)
  4008ae:	4d0a      	ldr	r5, [pc, #40]	; (4008d8 <_read+0x3c>)
  4008b0:	6830      	ldr	r0, [r6, #0]
  4008b2:	4621      	mov	r1, r4
  4008b4:	682b      	ldr	r3, [r5, #0]
  4008b6:	4798      	blx	r3
		ptr++;
  4008b8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4008ba:	42bc      	cmp	r4, r7
  4008bc:	d1f8      	bne.n	4008b0 <_read+0x14>
  4008be:	e006      	b.n	4008ce <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4008c0:	f04f 30ff 	mov.w	r0, #4294967295
  4008c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
  4008c8:	2000      	movs	r0, #0
  4008ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  4008ce:	4640      	mov	r0, r8
	}
	return nChars;
}
  4008d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008d4:	20000928 	.word	0x20000928
  4008d8:	20000920 	.word	0x20000920

004008dc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4008dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4008e0:	460e      	mov	r6, r1
  4008e2:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4008e4:	3801      	subs	r0, #1
  4008e6:	2802      	cmp	r0, #2
  4008e8:	d80f      	bhi.n	40090a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
  4008ea:	b192      	cbz	r2, 400912 <_write+0x36>
  4008ec:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4008ee:	f8df 803c 	ldr.w	r8, [pc, #60]	; 40092c <_write+0x50>
  4008f2:	4f0d      	ldr	r7, [pc, #52]	; (400928 <_write+0x4c>)
  4008f4:	f8d8 0000 	ldr.w	r0, [r8]
  4008f8:	5d31      	ldrb	r1, [r6, r4]
  4008fa:	683b      	ldr	r3, [r7, #0]
  4008fc:	4798      	blx	r3
  4008fe:	2800      	cmp	r0, #0
  400900:	db0a      	blt.n	400918 <_write+0x3c>
			return -1;
		}
		++nChars;
  400902:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400904:	42a5      	cmp	r5, r4
  400906:	d1f5      	bne.n	4008f4 <_write+0x18>
  400908:	e00a      	b.n	400920 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40090a:	f04f 30ff 	mov.w	r0, #4294967295
  40090e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
  400912:	2000      	movs	r0, #0
  400914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400918:	f04f 30ff 	mov.w	r0, #4294967295
  40091c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
  400920:	4620      	mov	r0, r4
	}
	return nChars;
}
  400922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400926:	bf00      	nop
  400928:	20000924 	.word	0x20000924
  40092c:	20000928 	.word	0x20000928

00400930 <board_init>:
#include "ioport.h"
#include "pmc.h"
#include "ioport.h"

void board_init(void)
{
  400930:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT 
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400932:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400936:	4b16      	ldr	r3, [pc, #88]	; (400990 <board_init+0x60>)
  400938:	605a      	str	r2, [r3, #4]
  40093a:	200b      	movs	r0, #11
  40093c:	4c15      	ldr	r4, [pc, #84]	; (400994 <board_init+0x64>)
  40093e:	47a0      	blx	r4
  400940:	200c      	movs	r0, #12
  400942:	47a0      	blx	r4
  400944:	200d      	movs	r0, #13
  400946:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400948:	204a      	movs	r0, #74	; 0x4a
  40094a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40094e:	4c12      	ldr	r4, [pc, #72]	; (400998 <board_init+0x68>)
  400950:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  400952:	2051      	movs	r0, #81	; 0x51
  400954:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400958:	47a0      	blx	r4
	
	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  40095a:	2005      	movs	r0, #5
  40095c:	490f      	ldr	r1, [pc, #60]	; (40099c <board_init+0x6c>)
  40095e:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  400960:	480f      	ldr	r0, [pc, #60]	; (4009a0 <board_init+0x70>)
  400962:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40096a:	4b0e      	ldr	r3, [pc, #56]	; (4009a4 <board_init+0x74>)
  40096c:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  40096e:	200c      	movs	r0, #12
  400970:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400974:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400976:	200d      	movs	r0, #13
  400978:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40097c:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  40097e:	200e      	movs	r0, #14
  400980:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400984:	47a0      	blx	r4
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and 
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */
	
	#ifdef CONF_BOARD_SPI_NPCS0
		gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  400986:	200b      	movs	r0, #11
  400988:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40098c:	47a0      	blx	r4
  40098e:	bd10      	pop	{r4, pc}
  400990:	400e1450 	.word	0x400e1450
  400994:	00400e69 	.word	0x00400e69
  400998:	00400ad5 	.word	0x00400ad5
  40099c:	28000079 	.word	0x28000079
  4009a0:	400e0e00 	.word	0x400e0e00
  4009a4:	00400bf9 	.word	0x00400bf9

004009a8 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4009a8:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4009aa:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  4009ac:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4009b0:	d02e      	beq.n	400a10 <pio_set_peripheral+0x68>
  4009b2:	d808      	bhi.n	4009c6 <pio_set_peripheral+0x1e>
  4009b4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4009b8:	d014      	beq.n	4009e4 <pio_set_peripheral+0x3c>
  4009ba:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4009be:	d01d      	beq.n	4009fc <pio_set_peripheral+0x54>
  4009c0:	2900      	cmp	r1, #0
  4009c2:	d135      	bne.n	400a30 <pio_set_peripheral+0x88>
  4009c4:	e035      	b.n	400a32 <pio_set_peripheral+0x8a>
  4009c6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4009ca:	d032      	beq.n	400a32 <pio_set_peripheral+0x8a>
  4009cc:	d803      	bhi.n	4009d6 <pio_set_peripheral+0x2e>
  4009ce:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4009d2:	d027      	beq.n	400a24 <pio_set_peripheral+0x7c>
  4009d4:	e02c      	b.n	400a30 <pio_set_peripheral+0x88>
  4009d6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4009da:	d02a      	beq.n	400a32 <pio_set_peripheral+0x8a>
  4009dc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4009e0:	d027      	beq.n	400a32 <pio_set_peripheral+0x8a>
  4009e2:	e025      	b.n	400a30 <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4009e4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4009e6:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4009e8:	43d3      	mvns	r3, r2
  4009ea:	4021      	ands	r1, r4
  4009ec:	4019      	ands	r1, r3
  4009ee:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4009f0:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4009f2:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4009f4:	4021      	ands	r1, r4
  4009f6:	400b      	ands	r3, r1
  4009f8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4009fa:	e019      	b.n	400a30 <pio_set_peripheral+0x88>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4009fc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4009fe:	4313      	orrs	r3, r2
  400a00:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a02:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400a04:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400a06:	400b      	ands	r3, r1
  400a08:	ea23 0302 	bic.w	r3, r3, r2
  400a0c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a0e:	e00f      	b.n	400a30 <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a10:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400a12:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400a14:	400b      	ands	r3, r1
  400a16:	ea23 0302 	bic.w	r3, r3, r2
  400a1a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a1c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a1e:	4313      	orrs	r3, r2
  400a20:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400a22:	e005      	b.n	400a30 <pio_set_peripheral+0x88>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400a24:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400a26:	4313      	orrs	r3, r2
  400a28:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400a2a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400a2c:	4313      	orrs	r3, r2
  400a2e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400a30:	6042      	str	r2, [r0, #4]
}
  400a32:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a36:	4770      	bx	lr

00400a38 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400a38:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400a3a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400a3e:	bf14      	ite	ne
  400a40:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400a42:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400a44:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400a48:	bf14      	ite	ne
  400a4a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400a4c:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400a4e:	f012 0f02 	tst.w	r2, #2
  400a52:	d002      	beq.n	400a5a <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400a54:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400a58:	e004      	b.n	400a64 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400a5a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400a5e:	bf18      	it	ne
  400a60:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400a64:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400a66:	6001      	str	r1, [r0, #0]
  400a68:	4770      	bx	lr
  400a6a:	bf00      	nop

00400a6c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400a6c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400a6e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400a70:	9c01      	ldr	r4, [sp, #4]
  400a72:	b10c      	cbz	r4, 400a78 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400a74:	6641      	str	r1, [r0, #100]	; 0x64
  400a76:	e000      	b.n	400a7a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400a78:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400a7a:	b10b      	cbz	r3, 400a80 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400a7c:	6501      	str	r1, [r0, #80]	; 0x50
  400a7e:	e000      	b.n	400a82 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  400a80:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  400a82:	b10a      	cbz	r2, 400a88 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400a84:	6301      	str	r1, [r0, #48]	; 0x30
  400a86:	e000      	b.n	400a8a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400a88:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400a8a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400a8c:	6001      	str	r1, [r0, #0]
}
  400a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a92:	4770      	bx	lr

00400a94 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400a94:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400a96:	4770      	bx	lr

00400a98 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400a98:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400a9a:	4770      	bx	lr

00400a9c <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400a9c:	0943      	lsrs	r3, r0, #5
  400a9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400aa2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400aa6:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400aa8:	f000 001f 	and.w	r0, r0, #31
  400aac:	2201      	movs	r2, #1
  400aae:	fa02 f000 	lsl.w	r0, r2, r0
  400ab2:	6318      	str	r0, [r3, #48]	; 0x30
  400ab4:	4770      	bx	lr
  400ab6:	bf00      	nop

00400ab8 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400ab8:	0943      	lsrs	r3, r0, #5
  400aba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400abe:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400ac2:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400ac4:	f000 001f 	and.w	r0, r0, #31
  400ac8:	2201      	movs	r2, #1
  400aca:	fa02 f000 	lsl.w	r0, r2, r0
  400ace:	6358      	str	r0, [r3, #52]	; 0x34
  400ad0:	4770      	bx	lr
  400ad2:	bf00      	nop

00400ad4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400ad4:	b570      	push	{r4, r5, r6, lr}
  400ad6:	b082      	sub	sp, #8
  400ad8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400ada:	0944      	lsrs	r4, r0, #5
  400adc:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
  400ae0:	f204 7407 	addw	r4, r4, #1799	; 0x707
  400ae4:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400ae6:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
  400aea:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  400aee:	d047      	beq.n	400b80 <pio_configure_pin+0xac>
  400af0:	d809      	bhi.n	400b06 <pio_configure_pin+0x32>
  400af2:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  400af6:	d021      	beq.n	400b3c <pio_configure_pin+0x68>
  400af8:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  400afc:	d02f      	beq.n	400b5e <pio_configure_pin+0x8a>
  400afe:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  400b02:	d16f      	bne.n	400be4 <pio_configure_pin+0x110>
  400b04:	e009      	b.n	400b1a <pio_configure_pin+0x46>
  400b06:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  400b0a:	d055      	beq.n	400bb8 <pio_configure_pin+0xe4>
  400b0c:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  400b10:	d052      	beq.n	400bb8 <pio_configure_pin+0xe4>
  400b12:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  400b16:	d044      	beq.n	400ba2 <pio_configure_pin+0xce>
  400b18:	e064      	b.n	400be4 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400b1a:	f000 001f 	and.w	r0, r0, #31
  400b1e:	2401      	movs	r4, #1
  400b20:	4084      	lsls	r4, r0
  400b22:	4630      	mov	r0, r6
  400b24:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400b28:	4622      	mov	r2, r4
  400b2a:	4b30      	ldr	r3, [pc, #192]	; (400bec <pio_configure_pin+0x118>)
  400b2c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400b2e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400b32:	bf14      	ite	ne
  400b34:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400b36:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400b38:	2001      	movs	r0, #1
  400b3a:	e054      	b.n	400be6 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400b3c:	f000 001f 	and.w	r0, r0, #31
  400b40:	2401      	movs	r4, #1
  400b42:	4084      	lsls	r4, r0
  400b44:	4630      	mov	r0, r6
  400b46:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b4a:	4622      	mov	r2, r4
  400b4c:	4b27      	ldr	r3, [pc, #156]	; (400bec <pio_configure_pin+0x118>)
  400b4e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400b50:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400b54:	bf14      	ite	ne
  400b56:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400b58:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400b5a:	2001      	movs	r0, #1
  400b5c:	e043      	b.n	400be6 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  400b5e:	f000 001f 	and.w	r0, r0, #31
  400b62:	2401      	movs	r4, #1
  400b64:	4084      	lsls	r4, r0
  400b66:	4630      	mov	r0, r6
  400b68:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400b6c:	4622      	mov	r2, r4
  400b6e:	4b1f      	ldr	r3, [pc, #124]	; (400bec <pio_configure_pin+0x118>)
  400b70:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400b72:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400b76:	bf14      	ite	ne
  400b78:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400b7a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400b7c:	2001      	movs	r0, #1
  400b7e:	e032      	b.n	400be6 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  400b80:	f000 001f 	and.w	r0, r0, #31
  400b84:	2401      	movs	r4, #1
  400b86:	4084      	lsls	r4, r0
  400b88:	4630      	mov	r0, r6
  400b8a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400b8e:	4622      	mov	r2, r4
  400b90:	4b16      	ldr	r3, [pc, #88]	; (400bec <pio_configure_pin+0x118>)
  400b92:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400b94:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400b98:	bf14      	ite	ne
  400b9a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400b9c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400b9e:	2001      	movs	r0, #1
  400ba0:	e021      	b.n	400be6 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400ba2:	f000 011f 	and.w	r1, r0, #31
  400ba6:	2401      	movs	r4, #1
  400ba8:	4630      	mov	r0, r6
  400baa:	fa04 f101 	lsl.w	r1, r4, r1
  400bae:	462a      	mov	r2, r5
  400bb0:	4b0f      	ldr	r3, [pc, #60]	; (400bf0 <pio_configure_pin+0x11c>)
  400bb2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400bb4:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  400bb6:	e016      	b.n	400be6 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400bb8:	f000 011f 	and.w	r1, r0, #31
  400bbc:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400bbe:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400bc2:	ea05 0304 	and.w	r3, r5, r4
  400bc6:	9300      	str	r3, [sp, #0]
  400bc8:	4630      	mov	r0, r6
  400bca:	fa04 f101 	lsl.w	r1, r4, r1
  400bce:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400bd2:	bf14      	ite	ne
  400bd4:	2200      	movne	r2, #0
  400bd6:	2201      	moveq	r2, #1
  400bd8:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400bdc:	4d05      	ldr	r5, [pc, #20]	; (400bf4 <pio_configure_pin+0x120>)
  400bde:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
  400be0:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400be2:	e000      	b.n	400be6 <pio_configure_pin+0x112>

	default:
		return 0;
  400be4:	2000      	movs	r0, #0
	}

	return 1;
}
  400be6:	b002      	add	sp, #8
  400be8:	bd70      	pop	{r4, r5, r6, pc}
  400bea:	bf00      	nop
  400bec:	004009a9 	.word	0x004009a9
  400bf0:	00400a39 	.word	0x00400a39
  400bf4:	00400a6d 	.word	0x00400a6d

00400bf8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
  400bfa:	b083      	sub	sp, #12
  400bfc:	4607      	mov	r7, r0
  400bfe:	460e      	mov	r6, r1
  400c00:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400c02:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
  400c06:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  400c0a:	d038      	beq.n	400c7e <pio_configure_pin_group+0x86>
  400c0c:	d809      	bhi.n	400c22 <pio_configure_pin_group+0x2a>
  400c0e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  400c12:	d01c      	beq.n	400c4e <pio_configure_pin_group+0x56>
  400c14:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  400c18:	d025      	beq.n	400c66 <pio_configure_pin_group+0x6e>
  400c1a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  400c1e:	d150      	bne.n	400cc2 <pio_configure_pin_group+0xca>
  400c20:	e009      	b.n	400c36 <pio_configure_pin_group+0x3e>
  400c22:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  400c26:	d03a      	beq.n	400c9e <pio_configure_pin_group+0xa6>
  400c28:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  400c2c:	d037      	beq.n	400c9e <pio_configure_pin_group+0xa6>
  400c2e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  400c32:	d030      	beq.n	400c96 <pio_configure_pin_group+0x9e>
  400c34:	e045      	b.n	400cc2 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400c36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400c3a:	4632      	mov	r2, r6
  400c3c:	4b22      	ldr	r3, [pc, #136]	; (400cc8 <pio_configure_pin_group+0xd0>)
  400c3e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c40:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400c44:	bf14      	ite	ne
  400c46:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c48:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400c4a:	2001      	movs	r0, #1
  400c4c:	e03a      	b.n	400cc4 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400c4e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400c52:	4632      	mov	r2, r6
  400c54:	4b1c      	ldr	r3, [pc, #112]	; (400cc8 <pio_configure_pin_group+0xd0>)
  400c56:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c58:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400c5c:	bf14      	ite	ne
  400c5e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c60:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400c62:	2001      	movs	r0, #1
  400c64:	e02e      	b.n	400cc4 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400c66:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400c6a:	4632      	mov	r2, r6
  400c6c:	4b16      	ldr	r3, [pc, #88]	; (400cc8 <pio_configure_pin_group+0xd0>)
  400c6e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c70:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400c74:	bf14      	ite	ne
  400c76:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c78:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400c7a:	2001      	movs	r0, #1
  400c7c:	e022      	b.n	400cc4 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400c7e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400c82:	4632      	mov	r2, r6
  400c84:	4b10      	ldr	r3, [pc, #64]	; (400cc8 <pio_configure_pin_group+0xd0>)
  400c86:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400c88:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400c8c:	bf14      	ite	ne
  400c8e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400c90:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400c92:	2001      	movs	r0, #1
  400c94:	e016      	b.n	400cc4 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  400c96:	4b0d      	ldr	r3, [pc, #52]	; (400ccc <pio_configure_pin_group+0xd4>)
  400c98:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400c9a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400c9c:	e012      	b.n	400cc4 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400c9e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400ca2:	f005 0301 	and.w	r3, r5, #1
  400ca6:	9300      	str	r3, [sp, #0]
  400ca8:	4638      	mov	r0, r7
  400caa:	4631      	mov	r1, r6
  400cac:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400cb0:	bf14      	ite	ne
  400cb2:	2200      	movne	r2, #0
  400cb4:	2201      	moveq	r2, #1
  400cb6:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400cba:	4c05      	ldr	r4, [pc, #20]	; (400cd0 <pio_configure_pin_group+0xd8>)
  400cbc:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400cbe:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400cc0:	e000      	b.n	400cc4 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400cc2:	2000      	movs	r0, #0
	}

	return 1;
}
  400cc4:	b003      	add	sp, #12
  400cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400cc8:	004009a9 	.word	0x004009a9
  400ccc:	00400a39 	.word	0x00400a39
  400cd0:	00400a6d 	.word	0x00400a6d

00400cd4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400cd8:	4681      	mov	r9, r0
  400cda:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400cdc:	4b14      	ldr	r3, [pc, #80]	; (400d30 <pio_handler_process+0x5c>)
  400cde:	4798      	blx	r3
  400ce0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400ce2:	4648      	mov	r0, r9
  400ce4:	4b13      	ldr	r3, [pc, #76]	; (400d34 <pio_handler_process+0x60>)
  400ce6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400ce8:	4005      	ands	r5, r0
  400cea:	d017      	beq.n	400d1c <pio_handler_process+0x48>
  400cec:	4f12      	ldr	r7, [pc, #72]	; (400d38 <pio_handler_process+0x64>)
  400cee:	f107 040c 	add.w	r4, r7, #12
  400cf2:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400cf4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  400cf8:	42b3      	cmp	r3, r6
  400cfa:	d10a      	bne.n	400d12 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400cfc:	f854 1c08 	ldr.w	r1, [r4, #-8]
  400d00:	4229      	tst	r1, r5
  400d02:	d006      	beq.n	400d12 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d04:	6823      	ldr	r3, [r4, #0]
  400d06:	4630      	mov	r0, r6
  400d08:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400d0a:	f854 3c08 	ldr.w	r3, [r4, #-8]
  400d0e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400d12:	42bc      	cmp	r4, r7
  400d14:	d002      	beq.n	400d1c <pio_handler_process+0x48>
  400d16:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400d18:	2d00      	cmp	r5, #0
  400d1a:	d1eb      	bne.n	400cf4 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400d1c:	4b07      	ldr	r3, [pc, #28]	; (400d3c <pio_handler_process+0x68>)
  400d1e:	681b      	ldr	r3, [r3, #0]
  400d20:	b123      	cbz	r3, 400d2c <pio_handler_process+0x58>
		if (pio_capture_handler) {
  400d22:	4b07      	ldr	r3, [pc, #28]	; (400d40 <pio_handler_process+0x6c>)
  400d24:	681b      	ldr	r3, [r3, #0]
  400d26:	b10b      	cbz	r3, 400d2c <pio_handler_process+0x58>
			pio_capture_handler(p_pio);
  400d28:	4648      	mov	r0, r9
  400d2a:	4798      	blx	r3
  400d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400d30:	00400a95 	.word	0x00400a95
  400d34:	00400a99 	.word	0x00400a99
  400d38:	20000878 	.word	0x20000878
  400d3c:	2000092c 	.word	0x2000092c
  400d40:	20000874 	.word	0x20000874

00400d44 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400d44:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400d46:	4802      	ldr	r0, [pc, #8]	; (400d50 <PIOA_Handler+0xc>)
  400d48:	210b      	movs	r1, #11
  400d4a:	4b02      	ldr	r3, [pc, #8]	; (400d54 <PIOA_Handler+0x10>)
  400d4c:	4798      	blx	r3
  400d4e:	bd08      	pop	{r3, pc}
  400d50:	400e0e00 	.word	0x400e0e00
  400d54:	00400cd5 	.word	0x00400cd5

00400d58 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400d58:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400d5a:	4802      	ldr	r0, [pc, #8]	; (400d64 <PIOB_Handler+0xc>)
  400d5c:	210c      	movs	r1, #12
  400d5e:	4b02      	ldr	r3, [pc, #8]	; (400d68 <PIOB_Handler+0x10>)
  400d60:	4798      	blx	r3
  400d62:	bd08      	pop	{r3, pc}
  400d64:	400e1000 	.word	0x400e1000
  400d68:	00400cd5 	.word	0x00400cd5

00400d6c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400d6c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400d6e:	4802      	ldr	r0, [pc, #8]	; (400d78 <PIOC_Handler+0xc>)
  400d70:	210d      	movs	r1, #13
  400d72:	4b02      	ldr	r3, [pc, #8]	; (400d7c <PIOC_Handler+0x10>)
  400d74:	4798      	blx	r3
  400d76:	bd08      	pop	{r3, pc}
  400d78:	400e1200 	.word	0x400e1200
  400d7c:	00400cd5 	.word	0x00400cd5

00400d80 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400d80:	4b17      	ldr	r3, [pc, #92]	; (400de0 <pmc_switch_mck_to_pllack+0x60>)
  400d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400d84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  400d88:	4310      	orrs	r0, r2
  400d8a:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400d8e:	f013 0f08 	tst.w	r3, #8
  400d92:	d109      	bne.n	400da8 <pmc_switch_mck_to_pllack+0x28>
  400d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400d98:	4911      	ldr	r1, [pc, #68]	; (400de0 <pmc_switch_mck_to_pllack+0x60>)
  400d9a:	e001      	b.n	400da0 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400d9c:	3b01      	subs	r3, #1
  400d9e:	d019      	beq.n	400dd4 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400da0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400da2:	f012 0f08 	tst.w	r2, #8
  400da6:	d0f9      	beq.n	400d9c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400da8:	4b0d      	ldr	r3, [pc, #52]	; (400de0 <pmc_switch_mck_to_pllack+0x60>)
  400daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400dac:	f022 0203 	bic.w	r2, r2, #3
  400db0:	f042 0202 	orr.w	r2, r2, #2
  400db4:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400db6:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400db8:	f010 0008 	ands.w	r0, r0, #8
  400dbc:	d10c      	bne.n	400dd8 <pmc_switch_mck_to_pllack+0x58>
  400dbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400dc2:	4907      	ldr	r1, [pc, #28]	; (400de0 <pmc_switch_mck_to_pllack+0x60>)
  400dc4:	e001      	b.n	400dca <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400dc6:	3b01      	subs	r3, #1
  400dc8:	d008      	beq.n	400ddc <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400dca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400dcc:	f012 0f08 	tst.w	r2, #8
  400dd0:	d0f9      	beq.n	400dc6 <pmc_switch_mck_to_pllack+0x46>
  400dd2:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400dd4:	2001      	movs	r0, #1
  400dd6:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400dd8:	2000      	movs	r0, #0
  400dda:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400ddc:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400dde:	4770      	bx	lr
  400de0:	400e0400 	.word	0x400e0400

00400de4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400de4:	b138      	cbz	r0, 400df6 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400de6:	4911      	ldr	r1, [pc, #68]	; (400e2c <pmc_switch_mainck_to_xtal+0x48>)
  400de8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400dea:	4a11      	ldr	r2, [pc, #68]	; (400e30 <pmc_switch_mainck_to_xtal+0x4c>)
  400dec:	401a      	ands	r2, r3
  400dee:	4b11      	ldr	r3, [pc, #68]	; (400e34 <pmc_switch_mainck_to_xtal+0x50>)
  400df0:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400df2:	620b      	str	r3, [r1, #32]
  400df4:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400df6:	4a0d      	ldr	r2, [pc, #52]	; (400e2c <pmc_switch_mainck_to_xtal+0x48>)
  400df8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400dfa:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400dfe:	f023 0303 	bic.w	r3, r3, #3
  400e02:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400e06:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400e0a:	0209      	lsls	r1, r1, #8
  400e0c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400e0e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400e10:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400e12:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e14:	f013 0f01 	tst.w	r3, #1
  400e18:	d0fb      	beq.n	400e12 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400e1a:	4a04      	ldr	r2, [pc, #16]	; (400e2c <pmc_switch_mainck_to_xtal+0x48>)
  400e1c:	6a13      	ldr	r3, [r2, #32]
  400e1e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400e26:	6213      	str	r3, [r2, #32]
  400e28:	4770      	bx	lr
  400e2a:	bf00      	nop
  400e2c:	400e0400 	.word	0x400e0400
  400e30:	fec8fffc 	.word	0xfec8fffc
  400e34:	01370002 	.word	0x01370002

00400e38 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400e38:	4b02      	ldr	r3, [pc, #8]	; (400e44 <pmc_osc_is_ready_mainck+0xc>)
  400e3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e3c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400e40:	4770      	bx	lr
  400e42:	bf00      	nop
  400e44:	400e0400 	.word	0x400e0400

00400e48 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400e48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400e4c:	4b01      	ldr	r3, [pc, #4]	; (400e54 <pmc_disable_pllack+0xc>)
  400e4e:	629a      	str	r2, [r3, #40]	; 0x28
  400e50:	4770      	bx	lr
  400e52:	bf00      	nop
  400e54:	400e0400 	.word	0x400e0400

00400e58 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400e58:	4b02      	ldr	r3, [pc, #8]	; (400e64 <pmc_is_locked_pllack+0xc>)
  400e5a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400e5c:	f000 0002 	and.w	r0, r0, #2
  400e60:	4770      	bx	lr
  400e62:	bf00      	nop
  400e64:	400e0400 	.word	0x400e0400

00400e68 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400e68:	2822      	cmp	r0, #34	; 0x22
  400e6a:	d820      	bhi.n	400eae <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  400e6c:	281f      	cmp	r0, #31
  400e6e:	d80d      	bhi.n	400e8c <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400e70:	4b12      	ldr	r3, [pc, #72]	; (400ebc <pmc_enable_periph_clk+0x54>)
  400e72:	699a      	ldr	r2, [r3, #24]
  400e74:	2301      	movs	r3, #1
  400e76:	4083      	lsls	r3, r0
  400e78:	401a      	ands	r2, r3
  400e7a:	4293      	cmp	r3, r2
  400e7c:	d019      	beq.n	400eb2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  400e7e:	2301      	movs	r3, #1
  400e80:	fa03 f000 	lsl.w	r0, r3, r0
  400e84:	4b0d      	ldr	r3, [pc, #52]	; (400ebc <pmc_enable_periph_clk+0x54>)
  400e86:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400e88:	2000      	movs	r0, #0
  400e8a:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e8c:	4b0b      	ldr	r3, [pc, #44]	; (400ebc <pmc_enable_periph_clk+0x54>)
  400e8e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  400e92:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400e94:	2301      	movs	r3, #1
  400e96:	4083      	lsls	r3, r0
  400e98:	401a      	ands	r2, r3
  400e9a:	4293      	cmp	r3, r2
  400e9c:	d00b      	beq.n	400eb6 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  400e9e:	2301      	movs	r3, #1
  400ea0:	fa03 f000 	lsl.w	r0, r3, r0
  400ea4:	4b05      	ldr	r3, [pc, #20]	; (400ebc <pmc_enable_periph_clk+0x54>)
  400ea6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  400eaa:	2000      	movs	r0, #0
  400eac:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400eae:	2001      	movs	r0, #1
  400eb0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400eb2:	2000      	movs	r0, #0
  400eb4:	4770      	bx	lr
  400eb6:	2000      	movs	r0, #0
}
  400eb8:	4770      	bx	lr
  400eba:	bf00      	nop
  400ebc:	400e0400 	.word	0x400e0400

00400ec0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400ec0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400ec2:	23ac      	movs	r3, #172	; 0xac
  400ec4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400ec6:	680a      	ldr	r2, [r1, #0]
  400ec8:	684b      	ldr	r3, [r1, #4]
  400eca:	fbb2 f3f3 	udiv	r3, r2, r3
  400ece:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400ed0:	1e5c      	subs	r4, r3, #1
  400ed2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400ed6:	4294      	cmp	r4, r2
  400ed8:	d80a      	bhi.n	400ef0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400eda:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400edc:	688b      	ldr	r3, [r1, #8]
  400ede:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400ee0:	f240 2302 	movw	r3, #514	; 0x202
  400ee4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400ee8:	2350      	movs	r3, #80	; 0x50
  400eea:	6003      	str	r3, [r0, #0]

	return 0;
  400eec:	2000      	movs	r0, #0
  400eee:	e000      	b.n	400ef2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400ef0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ef6:	4770      	bx	lr

00400ef8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400ef8:	6943      	ldr	r3, [r0, #20]
  400efa:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400efe:	bf1a      	itte	ne
  400f00:	61c1      	strne	r1, [r0, #28]
	return 0;
  400f02:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400f04:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400f06:	4770      	bx	lr

00400f08 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400f08:	6943      	ldr	r3, [r0, #20]
  400f0a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400f0e:	bf1d      	ittte	ne
  400f10:	6983      	ldrne	r3, [r0, #24]
  400f12:	700b      	strbne	r3, [r1, #0]
	return 0;
  400f14:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400f16:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400f18:	4770      	bx	lr
  400f1a:	bf00      	nop

00400f1c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400f1c:	6943      	ldr	r3, [r0, #20]
  400f1e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400f22:	bf1d      	ittte	ne
  400f24:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400f28:	61c1      	strne	r1, [r0, #28]
	return 0;
  400f2a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400f2c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400f2e:	4770      	bx	lr

00400f30 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400f30:	6943      	ldr	r3, [r0, #20]
  400f32:	f013 0f01 	tst.w	r3, #1
  400f36:	d005      	beq.n	400f44 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400f38:	6983      	ldr	r3, [r0, #24]
  400f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400f3e:	600b      	str	r3, [r1, #0]

	return 0;
  400f40:	2000      	movs	r0, #0
  400f42:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400f44:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400f46:	4770      	bx	lr

00400f48 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400f48:	e7fe      	b.n	400f48 <Dummy_Handler>
  400f4a:	bf00      	nop

00400f4c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400f4c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400f4e:	4b20      	ldr	r3, [pc, #128]	; (400fd0 <Reset_Handler+0x84>)
  400f50:	4a20      	ldr	r2, [pc, #128]	; (400fd4 <Reset_Handler+0x88>)
  400f52:	429a      	cmp	r2, r3
  400f54:	d912      	bls.n	400f7c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400f56:	4b20      	ldr	r3, [pc, #128]	; (400fd8 <Reset_Handler+0x8c>)
  400f58:	4a1d      	ldr	r2, [pc, #116]	; (400fd0 <Reset_Handler+0x84>)
  400f5a:	429a      	cmp	r2, r3
  400f5c:	d21f      	bcs.n	400f9e <Reset_Handler+0x52>
  400f5e:	1d13      	adds	r3, r2, #4
  400f60:	4c1e      	ldr	r4, [pc, #120]	; (400fdc <Reset_Handler+0x90>)
  400f62:	1ae4      	subs	r4, r4, r3
  400f64:	f024 0403 	bic.w	r4, r4, #3
  400f68:	3404      	adds	r4, #4
  400f6a:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  400f6c:	4610      	mov	r0, r2
  400f6e:	4919      	ldr	r1, [pc, #100]	; (400fd4 <Reset_Handler+0x88>)
  400f70:	585a      	ldr	r2, [r3, r1]
  400f72:	501a      	str	r2, [r3, r0]
  400f74:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400f76:	42a3      	cmp	r3, r4
  400f78:	d1fa      	bne.n	400f70 <Reset_Handler+0x24>
  400f7a:	e010      	b.n	400f9e <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400f7c:	4b14      	ldr	r3, [pc, #80]	; (400fd0 <Reset_Handler+0x84>)
  400f7e:	4a15      	ldr	r2, [pc, #84]	; (400fd4 <Reset_Handler+0x88>)
  400f80:	429a      	cmp	r2, r3
  400f82:	d20c      	bcs.n	400f9e <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400f84:	4a14      	ldr	r2, [pc, #80]	; (400fd8 <Reset_Handler+0x8c>)
  400f86:	4619      	mov	r1, r3
  400f88:	1ad3      	subs	r3, r2, r3
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400f8a:	4815      	ldr	r0, [pc, #84]	; (400fe0 <Reset_Handler+0x94>)
  400f8c:	4418      	add	r0, r3
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400f8e:	b133      	cbz	r3, 400f9e <Reset_Handler+0x52>
  400f90:	4613      	mov	r3, r2
  400f92:	1a9c      	subs	r4, r3, r2
			*pDest-- = *pSrc--;
  400f94:	5824      	ldr	r4, [r4, r0]
  400f96:	f843 4d04 	str.w	r4, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400f9a:	4299      	cmp	r1, r3
  400f9c:	d1f9      	bne.n	400f92 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400f9e:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400fa0:	4b10      	ldr	r3, [pc, #64]	; (400fe4 <Reset_Handler+0x98>)
  400fa2:	4a11      	ldr	r2, [pc, #68]	; (400fe8 <Reset_Handler+0x9c>)
  400fa4:	429a      	cmp	r2, r3
  400fa6:	d20b      	bcs.n	400fc0 <Reset_Handler+0x74>
  400fa8:	1f13      	subs	r3, r2, #4
  400faa:	4910      	ldr	r1, [pc, #64]	; (400fec <Reset_Handler+0xa0>)
  400fac:	1ac9      	subs	r1, r1, r3
  400fae:	f021 0103 	bic.w	r1, r1, #3
  400fb2:	1d1a      	adds	r2, r3, #4
  400fb4:	4411      	add	r1, r2
		*pDest++ = 0;
  400fb6:	2200      	movs	r2, #0
  400fb8:	f843 2f04 	str.w	r2, [r3, #4]!
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400fbc:	428b      	cmp	r3, r1
  400fbe:	d1fb      	bne.n	400fb8 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400fc0:	4b0b      	ldr	r3, [pc, #44]	; (400ff0 <Reset_Handler+0xa4>)
  400fc2:	4a0c      	ldr	r2, [pc, #48]	; (400ff4 <Reset_Handler+0xa8>)
  400fc4:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400fc6:	4b0c      	ldr	r3, [pc, #48]	; (400ff8 <Reset_Handler+0xac>)
  400fc8:	4798      	blx	r3

	/* Branch to main function */
	main();
  400fca:	4b0c      	ldr	r3, [pc, #48]	; (400ffc <Reset_Handler+0xb0>)
  400fcc:	4798      	blx	r3
  400fce:	e7fe      	b.n	400fce <Reset_Handler+0x82>
  400fd0:	20000000 	.word	0x20000000
  400fd4:	0040319c 	.word	0x0040319c
  400fd8:	20000854 	.word	0x20000854
  400fdc:	20000857 	.word	0x20000857
  400fe0:	00403198 	.word	0x00403198
  400fe4:	20000934 	.word	0x20000934
  400fe8:	20000854 	.word	0x20000854
  400fec:	2000092f 	.word	0x2000092f
  400ff0:	e000ed00 	.word	0xe000ed00
  400ff4:	00400000 	.word	0x00400000
  400ff8:	004011e1 	.word	0x004011e1
  400ffc:	004006e9 	.word	0x004006e9

00401000 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401000:	4b3d      	ldr	r3, [pc, #244]	; (4010f8 <SystemCoreClockUpdate+0xf8>)
  401002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401004:	f003 0303 	and.w	r3, r3, #3
  401008:	2b03      	cmp	r3, #3
  40100a:	d85d      	bhi.n	4010c8 <SystemCoreClockUpdate+0xc8>
  40100c:	e8df f003 	tbb	[pc, r3]
  401010:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401014:	4b39      	ldr	r3, [pc, #228]	; (4010fc <SystemCoreClockUpdate+0xfc>)
  401016:	695b      	ldr	r3, [r3, #20]
  401018:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40101c:	bf14      	ite	ne
  40101e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401022:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401026:	4b36      	ldr	r3, [pc, #216]	; (401100 <SystemCoreClockUpdate+0x100>)
  401028:	601a      	str	r2, [r3, #0]
  40102a:	e04d      	b.n	4010c8 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40102c:	4b32      	ldr	r3, [pc, #200]	; (4010f8 <SystemCoreClockUpdate+0xf8>)
  40102e:	6a1b      	ldr	r3, [r3, #32]
  401030:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401034:	d003      	beq.n	40103e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401036:	4a33      	ldr	r2, [pc, #204]	; (401104 <SystemCoreClockUpdate+0x104>)
  401038:	4b31      	ldr	r3, [pc, #196]	; (401100 <SystemCoreClockUpdate+0x100>)
  40103a:	601a      	str	r2, [r3, #0]
  40103c:	e044      	b.n	4010c8 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40103e:	4a32      	ldr	r2, [pc, #200]	; (401108 <SystemCoreClockUpdate+0x108>)
  401040:	4b2f      	ldr	r3, [pc, #188]	; (401100 <SystemCoreClockUpdate+0x100>)
  401042:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401044:	4b2c      	ldr	r3, [pc, #176]	; (4010f8 <SystemCoreClockUpdate+0xf8>)
  401046:	6a1b      	ldr	r3, [r3, #32]
  401048:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40104c:	2b10      	cmp	r3, #16
  40104e:	d002      	beq.n	401056 <SystemCoreClockUpdate+0x56>
  401050:	2b20      	cmp	r3, #32
  401052:	d004      	beq.n	40105e <SystemCoreClockUpdate+0x5e>
  401054:	e038      	b.n	4010c8 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401056:	4a2d      	ldr	r2, [pc, #180]	; (40110c <SystemCoreClockUpdate+0x10c>)
  401058:	4b29      	ldr	r3, [pc, #164]	; (401100 <SystemCoreClockUpdate+0x100>)
  40105a:	601a      	str	r2, [r3, #0]
			break;
  40105c:	e034      	b.n	4010c8 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40105e:	4a29      	ldr	r2, [pc, #164]	; (401104 <SystemCoreClockUpdate+0x104>)
  401060:	4b27      	ldr	r3, [pc, #156]	; (401100 <SystemCoreClockUpdate+0x100>)
  401062:	601a      	str	r2, [r3, #0]
			break;
  401064:	e030      	b.n	4010c8 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401066:	4b24      	ldr	r3, [pc, #144]	; (4010f8 <SystemCoreClockUpdate+0xf8>)
  401068:	6a1b      	ldr	r3, [r3, #32]
  40106a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40106e:	d003      	beq.n	401078 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  401070:	4a24      	ldr	r2, [pc, #144]	; (401104 <SystemCoreClockUpdate+0x104>)
  401072:	4b23      	ldr	r3, [pc, #140]	; (401100 <SystemCoreClockUpdate+0x100>)
  401074:	601a      	str	r2, [r3, #0]
  401076:	e012      	b.n	40109e <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401078:	4a23      	ldr	r2, [pc, #140]	; (401108 <SystemCoreClockUpdate+0x108>)
  40107a:	4b21      	ldr	r3, [pc, #132]	; (401100 <SystemCoreClockUpdate+0x100>)
  40107c:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40107e:	4b1e      	ldr	r3, [pc, #120]	; (4010f8 <SystemCoreClockUpdate+0xf8>)
  401080:	6a1b      	ldr	r3, [r3, #32]
  401082:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401086:	2b10      	cmp	r3, #16
  401088:	d002      	beq.n	401090 <SystemCoreClockUpdate+0x90>
  40108a:	2b20      	cmp	r3, #32
  40108c:	d004      	beq.n	401098 <SystemCoreClockUpdate+0x98>
  40108e:	e006      	b.n	40109e <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401090:	4a1e      	ldr	r2, [pc, #120]	; (40110c <SystemCoreClockUpdate+0x10c>)
  401092:	4b1b      	ldr	r3, [pc, #108]	; (401100 <SystemCoreClockUpdate+0x100>)
  401094:	601a      	str	r2, [r3, #0]
					break;
  401096:	e002      	b.n	40109e <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401098:	4a1a      	ldr	r2, [pc, #104]	; (401104 <SystemCoreClockUpdate+0x104>)
  40109a:	4b19      	ldr	r3, [pc, #100]	; (401100 <SystemCoreClockUpdate+0x100>)
  40109c:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40109e:	4b16      	ldr	r3, [pc, #88]	; (4010f8 <SystemCoreClockUpdate+0xf8>)
  4010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010a2:	f003 0303 	and.w	r3, r3, #3
  4010a6:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4010a8:	4b13      	ldr	r3, [pc, #76]	; (4010f8 <SystemCoreClockUpdate+0xf8>)
  4010aa:	bf07      	ittee	eq
  4010ac:	6a98      	ldreq	r0, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4010ae:	6a99      	ldreq	r1, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4010b0:	6ad8      	ldrne	r0, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4010b2:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
  4010b4:	4b12      	ldr	r3, [pc, #72]	; (401100 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4010b6:	f3c0 400a 	ubfx	r0, r0, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4010ba:	681a      	ldr	r2, [r3, #0]
  4010bc:	fb00 2202 	mla	r2, r0, r2, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  4010c0:	b2c9      	uxtb	r1, r1
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4010c2:	fbb2 f2f1 	udiv	r2, r2, r1
  4010c6:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4010c8:	4b0b      	ldr	r3, [pc, #44]	; (4010f8 <SystemCoreClockUpdate+0xf8>)
  4010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4010d0:	2b70      	cmp	r3, #112	; 0x70
  4010d2:	d107      	bne.n	4010e4 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4010d4:	4b0a      	ldr	r3, [pc, #40]	; (401100 <SystemCoreClockUpdate+0x100>)
  4010d6:	681a      	ldr	r2, [r3, #0]
  4010d8:	490d      	ldr	r1, [pc, #52]	; (401110 <SystemCoreClockUpdate+0x110>)
  4010da:	fba1 0202 	umull	r0, r2, r1, r2
  4010de:	0852      	lsrs	r2, r2, #1
  4010e0:	601a      	str	r2, [r3, #0]
  4010e2:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4010e4:	4b04      	ldr	r3, [pc, #16]	; (4010f8 <SystemCoreClockUpdate+0xf8>)
  4010e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4010e8:	4b05      	ldr	r3, [pc, #20]	; (401100 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4010ea:	f3c1 1102 	ubfx	r1, r1, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4010ee:	681a      	ldr	r2, [r3, #0]
  4010f0:	40ca      	lsrs	r2, r1
  4010f2:	601a      	str	r2, [r3, #0]
  4010f4:	4770      	bx	lr
  4010f6:	bf00      	nop
  4010f8:	400e0400 	.word	0x400e0400
  4010fc:	400e1410 	.word	0x400e1410
  401100:	2000000c 	.word	0x2000000c
  401104:	00b71b00 	.word	0x00b71b00
  401108:	003d0900 	.word	0x003d0900
  40110c:	007a1200 	.word	0x007a1200
  401110:	aaaaaaab 	.word	0xaaaaaaab

00401114 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401114:	4b12      	ldr	r3, [pc, #72]	; (401160 <system_init_flash+0x4c>)
  401116:	4298      	cmp	r0, r3
  401118:	d804      	bhi.n	401124 <system_init_flash+0x10>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40111a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40111e:	4b11      	ldr	r3, [pc, #68]	; (401164 <system_init_flash+0x50>)
  401120:	601a      	str	r2, [r3, #0]
  401122:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401124:	4b10      	ldr	r3, [pc, #64]	; (401168 <system_init_flash+0x54>)
  401126:	4298      	cmp	r0, r3
  401128:	d803      	bhi.n	401132 <system_init_flash+0x1e>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40112a:	4a10      	ldr	r2, [pc, #64]	; (40116c <system_init_flash+0x58>)
  40112c:	4b0d      	ldr	r3, [pc, #52]	; (401164 <system_init_flash+0x50>)
  40112e:	601a      	str	r2, [r3, #0]
  401130:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  401132:	4b0f      	ldr	r3, [pc, #60]	; (401170 <system_init_flash+0x5c>)
  401134:	4298      	cmp	r0, r3
  401136:	d803      	bhi.n	401140 <system_init_flash+0x2c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401138:	4a0e      	ldr	r2, [pc, #56]	; (401174 <system_init_flash+0x60>)
  40113a:	4b0a      	ldr	r3, [pc, #40]	; (401164 <system_init_flash+0x50>)
  40113c:	601a      	str	r2, [r3, #0]
  40113e:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401140:	4b0d      	ldr	r3, [pc, #52]	; (401178 <system_init_flash+0x64>)
  401142:	4298      	cmp	r0, r3
  401144:	d803      	bhi.n	40114e <system_init_flash+0x3a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401146:	4a0d      	ldr	r2, [pc, #52]	; (40117c <system_init_flash+0x68>)
  401148:	4b06      	ldr	r3, [pc, #24]	; (401164 <system_init_flash+0x50>)
  40114a:	601a      	str	r2, [r3, #0]
  40114c:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40114e:	4b0c      	ldr	r3, [pc, #48]	; (401180 <system_init_flash+0x6c>)
  401150:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401152:	bf94      	ite	ls
  401154:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401158:	4a0a      	ldrhi	r2, [pc, #40]	; (401184 <system_init_flash+0x70>)
  40115a:	4b02      	ldr	r3, [pc, #8]	; (401164 <system_init_flash+0x50>)
  40115c:	601a      	str	r2, [r3, #0]
  40115e:	4770      	bx	lr
  401160:	01312cff 	.word	0x01312cff
  401164:	400e0a00 	.word	0x400e0a00
  401168:	026259ff 	.word	0x026259ff
  40116c:	04000100 	.word	0x04000100
  401170:	039386ff 	.word	0x039386ff
  401174:	04000200 	.word	0x04000200
  401178:	04c4b3ff 	.word	0x04c4b3ff
  40117c:	04000300 	.word	0x04000300
  401180:	05f5e0ff 	.word	0x05f5e0ff
  401184:	04000500 	.word	0x04000500

00401188 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401188:	4b09      	ldr	r3, [pc, #36]	; (4011b0 <_sbrk+0x28>)
  40118a:	681b      	ldr	r3, [r3, #0]
  40118c:	b913      	cbnz	r3, 401194 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40118e:	4a09      	ldr	r2, [pc, #36]	; (4011b4 <_sbrk+0x2c>)
  401190:	4b07      	ldr	r3, [pc, #28]	; (4011b0 <_sbrk+0x28>)
  401192:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401194:	4b06      	ldr	r3, [pc, #24]	; (4011b0 <_sbrk+0x28>)
  401196:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401198:	181a      	adds	r2, r3, r0
  40119a:	4907      	ldr	r1, [pc, #28]	; (4011b8 <_sbrk+0x30>)
  40119c:	4291      	cmp	r1, r2
  40119e:	db04      	blt.n	4011aa <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4011a0:	4610      	mov	r0, r2
  4011a2:	4a03      	ldr	r2, [pc, #12]	; (4011b0 <_sbrk+0x28>)
  4011a4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4011a6:	4618      	mov	r0, r3
  4011a8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4011aa:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4011ae:	4770      	bx	lr
  4011b0:	200008e8 	.word	0x200008e8
  4011b4:	20003938 	.word	0x20003938
  4011b8:	2001fffc 	.word	0x2001fffc

004011bc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4011bc:	f04f 30ff 	mov.w	r0, #4294967295
  4011c0:	4770      	bx	lr
  4011c2:	bf00      	nop

004011c4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4011c8:	604b      	str	r3, [r1, #4]

	return 0;
}
  4011ca:	2000      	movs	r0, #0
  4011cc:	4770      	bx	lr
  4011ce:	bf00      	nop

004011d0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4011d0:	2001      	movs	r0, #1
  4011d2:	4770      	bx	lr

004011d4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4011d4:	2000      	movs	r0, #0
  4011d6:	4770      	bx	lr

004011d8 <atoi>:
  4011d8:	2100      	movs	r1, #0
  4011da:	220a      	movs	r2, #10
  4011dc:	f000 ba04 	b.w	4015e8 <strtol>

004011e0 <__libc_init_array>:
  4011e0:	b570      	push	{r4, r5, r6, lr}
  4011e2:	4e0f      	ldr	r6, [pc, #60]	; (401220 <__libc_init_array+0x40>)
  4011e4:	4d0f      	ldr	r5, [pc, #60]	; (401224 <__libc_init_array+0x44>)
  4011e6:	1b76      	subs	r6, r6, r5
  4011e8:	10b6      	asrs	r6, r6, #2
  4011ea:	d007      	beq.n	4011fc <__libc_init_array+0x1c>
  4011ec:	3d04      	subs	r5, #4
  4011ee:	2400      	movs	r4, #0
  4011f0:	3401      	adds	r4, #1
  4011f2:	f855 3f04 	ldr.w	r3, [r5, #4]!
  4011f6:	4798      	blx	r3
  4011f8:	42a6      	cmp	r6, r4
  4011fa:	d1f9      	bne.n	4011f0 <__libc_init_array+0x10>
  4011fc:	4e0a      	ldr	r6, [pc, #40]	; (401228 <__libc_init_array+0x48>)
  4011fe:	4d0b      	ldr	r5, [pc, #44]	; (40122c <__libc_init_array+0x4c>)
  401200:	1b76      	subs	r6, r6, r5
  401202:	f001 ffb9 	bl	403178 <_init>
  401206:	10b6      	asrs	r6, r6, #2
  401208:	d008      	beq.n	40121c <__libc_init_array+0x3c>
  40120a:	3d04      	subs	r5, #4
  40120c:	2400      	movs	r4, #0
  40120e:	3401      	adds	r4, #1
  401210:	f855 3f04 	ldr.w	r3, [r5, #4]!
  401214:	4798      	blx	r3
  401216:	42a6      	cmp	r6, r4
  401218:	d1f9      	bne.n	40120e <__libc_init_array+0x2e>
  40121a:	bd70      	pop	{r4, r5, r6, pc}
  40121c:	bd70      	pop	{r4, r5, r6, pc}
  40121e:	bf00      	nop
  401220:	00403184 	.word	0x00403184
  401224:	00403184 	.word	0x00403184
  401228:	0040318c 	.word	0x0040318c
  40122c:	00403184 	.word	0x00403184

00401230 <memset>:
  401230:	b4f0      	push	{r4, r5, r6, r7}
  401232:	0784      	lsls	r4, r0, #30
  401234:	d043      	beq.n	4012be <memset+0x8e>
  401236:	1e54      	subs	r4, r2, #1
  401238:	2a00      	cmp	r2, #0
  40123a:	d03e      	beq.n	4012ba <memset+0x8a>
  40123c:	b2cd      	uxtb	r5, r1
  40123e:	4603      	mov	r3, r0
  401240:	e003      	b.n	40124a <memset+0x1a>
  401242:	1e62      	subs	r2, r4, #1
  401244:	2c00      	cmp	r4, #0
  401246:	d038      	beq.n	4012ba <memset+0x8a>
  401248:	4614      	mov	r4, r2
  40124a:	f803 5b01 	strb.w	r5, [r3], #1
  40124e:	079a      	lsls	r2, r3, #30
  401250:	d1f7      	bne.n	401242 <memset+0x12>
  401252:	2c03      	cmp	r4, #3
  401254:	d92a      	bls.n	4012ac <memset+0x7c>
  401256:	b2cd      	uxtb	r5, r1
  401258:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40125c:	2c0f      	cmp	r4, #15
  40125e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401262:	d915      	bls.n	401290 <memset+0x60>
  401264:	f1a4 0710 	sub.w	r7, r4, #16
  401268:	093f      	lsrs	r7, r7, #4
  40126a:	f103 0610 	add.w	r6, r3, #16
  40126e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  401272:	461a      	mov	r2, r3
  401274:	6015      	str	r5, [r2, #0]
  401276:	6055      	str	r5, [r2, #4]
  401278:	6095      	str	r5, [r2, #8]
  40127a:	60d5      	str	r5, [r2, #12]
  40127c:	3210      	adds	r2, #16
  40127e:	42b2      	cmp	r2, r6
  401280:	d1f8      	bne.n	401274 <memset+0x44>
  401282:	f004 040f 	and.w	r4, r4, #15
  401286:	3701      	adds	r7, #1
  401288:	2c03      	cmp	r4, #3
  40128a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  40128e:	d90d      	bls.n	4012ac <memset+0x7c>
  401290:	461e      	mov	r6, r3
  401292:	4622      	mov	r2, r4
  401294:	3a04      	subs	r2, #4
  401296:	2a03      	cmp	r2, #3
  401298:	f846 5b04 	str.w	r5, [r6], #4
  40129c:	d8fa      	bhi.n	401294 <memset+0x64>
  40129e:	1f22      	subs	r2, r4, #4
  4012a0:	f022 0203 	bic.w	r2, r2, #3
  4012a4:	3204      	adds	r2, #4
  4012a6:	4413      	add	r3, r2
  4012a8:	f004 0403 	and.w	r4, r4, #3
  4012ac:	b12c      	cbz	r4, 4012ba <memset+0x8a>
  4012ae:	b2c9      	uxtb	r1, r1
  4012b0:	441c      	add	r4, r3
  4012b2:	f803 1b01 	strb.w	r1, [r3], #1
  4012b6:	42a3      	cmp	r3, r4
  4012b8:	d1fb      	bne.n	4012b2 <memset+0x82>
  4012ba:	bcf0      	pop	{r4, r5, r6, r7}
  4012bc:	4770      	bx	lr
  4012be:	4614      	mov	r4, r2
  4012c0:	4603      	mov	r3, r0
  4012c2:	e7c6      	b.n	401252 <memset+0x22>

004012c4 <_puts_r>:
  4012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4012c6:	4604      	mov	r4, r0
  4012c8:	b089      	sub	sp, #36	; 0x24
  4012ca:	4608      	mov	r0, r1
  4012cc:	460d      	mov	r5, r1
  4012ce:	f000 f8d1 	bl	401474 <strlen>
  4012d2:	68a3      	ldr	r3, [r4, #8]
  4012d4:	4f11      	ldr	r7, [pc, #68]	; (40131c <_puts_r+0x58>)
  4012d6:	899a      	ldrh	r2, [r3, #12]
  4012d8:	9504      	str	r5, [sp, #16]
  4012da:	2102      	movs	r1, #2
  4012dc:	f100 0e01 	add.w	lr, r0, #1
  4012e0:	2601      	movs	r6, #1
  4012e2:	ad04      	add	r5, sp, #16
  4012e4:	9102      	str	r1, [sp, #8]
  4012e6:	0491      	lsls	r1, r2, #18
  4012e8:	9005      	str	r0, [sp, #20]
  4012ea:	f8cd e00c 	str.w	lr, [sp, #12]
  4012ee:	9706      	str	r7, [sp, #24]
  4012f0:	9607      	str	r6, [sp, #28]
  4012f2:	9501      	str	r5, [sp, #4]
  4012f4:	d406      	bmi.n	401304 <_puts_r+0x40>
  4012f6:	6e59      	ldr	r1, [r3, #100]	; 0x64
  4012f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4012fc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  401300:	819a      	strh	r2, [r3, #12]
  401302:	6659      	str	r1, [r3, #100]	; 0x64
  401304:	4620      	mov	r0, r4
  401306:	4619      	mov	r1, r3
  401308:	aa01      	add	r2, sp, #4
  40130a:	f000 fc75 	bl	401bf8 <__sfvwrite_r>
  40130e:	2800      	cmp	r0, #0
  401310:	bf0c      	ite	eq
  401312:	200a      	moveq	r0, #10
  401314:	f04f 30ff 	movne.w	r0, #4294967295
  401318:	b009      	add	sp, #36	; 0x24
  40131a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40131c:	00403174 	.word	0x00403174

00401320 <puts>:
  401320:	4b02      	ldr	r3, [pc, #8]	; (40132c <puts+0xc>)
  401322:	4601      	mov	r1, r0
  401324:	6818      	ldr	r0, [r3, #0]
  401326:	f7ff bfcd 	b.w	4012c4 <_puts_r>
  40132a:	bf00      	nop
  40132c:	20000440 	.word	0x20000440

00401330 <__srget_r>:
  401330:	b538      	push	{r3, r4, r5, lr}
  401332:	460c      	mov	r4, r1
  401334:	4605      	mov	r5, r0
  401336:	b108      	cbz	r0, 40133c <__srget_r+0xc>
  401338:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40133a:	b163      	cbz	r3, 401356 <__srget_r+0x26>
  40133c:	4628      	mov	r0, r5
  40133e:	4621      	mov	r1, r4
  401340:	f001 fc7e 	bl	402c40 <__srefill_r>
  401344:	b950      	cbnz	r0, 40135c <__srget_r+0x2c>
  401346:	6823      	ldr	r3, [r4, #0]
  401348:	6862      	ldr	r2, [r4, #4]
  40134a:	1c59      	adds	r1, r3, #1
  40134c:	3a01      	subs	r2, #1
  40134e:	e884 0006 	stmia.w	r4, {r1, r2}
  401352:	7818      	ldrb	r0, [r3, #0]
  401354:	bd38      	pop	{r3, r4, r5, pc}
  401356:	f000 fa9d 	bl	401894 <__sinit>
  40135a:	e7ef      	b.n	40133c <__srget_r+0xc>
  40135c:	f04f 30ff 	mov.w	r0, #4294967295
  401360:	bd38      	pop	{r3, r4, r5, pc}
  401362:	bf00      	nop

00401364 <setbuf>:
  401364:	2900      	cmp	r1, #0
  401366:	bf0c      	ite	eq
  401368:	2202      	moveq	r2, #2
  40136a:	2200      	movne	r2, #0
  40136c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401370:	f000 b800 	b.w	401374 <setvbuf>

00401374 <setvbuf>:
  401374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401378:	4c3c      	ldr	r4, [pc, #240]	; (40146c <setvbuf+0xf8>)
  40137a:	6825      	ldr	r5, [r4, #0]
  40137c:	4688      	mov	r8, r1
  40137e:	4604      	mov	r4, r0
  401380:	4616      	mov	r6, r2
  401382:	461f      	mov	r7, r3
  401384:	b115      	cbz	r5, 40138c <setvbuf+0x18>
  401386:	6bab      	ldr	r3, [r5, #56]	; 0x38
  401388:	2b00      	cmp	r3, #0
  40138a:	d04f      	beq.n	40142c <setvbuf+0xb8>
  40138c:	2e02      	cmp	r6, #2
  40138e:	d830      	bhi.n	4013f2 <setvbuf+0x7e>
  401390:	2f00      	cmp	r7, #0
  401392:	db2e      	blt.n	4013f2 <setvbuf+0x7e>
  401394:	4628      	mov	r0, r5
  401396:	4621      	mov	r1, r4
  401398:	f000 fa4e 	bl	401838 <_fflush_r>
  40139c:	89a3      	ldrh	r3, [r4, #12]
  40139e:	2200      	movs	r2, #0
  4013a0:	6062      	str	r2, [r4, #4]
  4013a2:	61a2      	str	r2, [r4, #24]
  4013a4:	061a      	lsls	r2, r3, #24
  4013a6:	d428      	bmi.n	4013fa <setvbuf+0x86>
  4013a8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  4013ac:	b29b      	uxth	r3, r3
  4013ae:	2e02      	cmp	r6, #2
  4013b0:	81a3      	strh	r3, [r4, #12]
  4013b2:	d02d      	beq.n	401410 <setvbuf+0x9c>
  4013b4:	f1b8 0f00 	cmp.w	r8, #0
  4013b8:	d03c      	beq.n	401434 <setvbuf+0xc0>
  4013ba:	2e01      	cmp	r6, #1
  4013bc:	d013      	beq.n	4013e6 <setvbuf+0x72>
  4013be:	b29b      	uxth	r3, r3
  4013c0:	f003 0008 	and.w	r0, r3, #8
  4013c4:	4a2a      	ldr	r2, [pc, #168]	; (401470 <setvbuf+0xfc>)
  4013c6:	63ea      	str	r2, [r5, #60]	; 0x3c
  4013c8:	b280      	uxth	r0, r0
  4013ca:	f8c4 8000 	str.w	r8, [r4]
  4013ce:	f8c4 8010 	str.w	r8, [r4, #16]
  4013d2:	6167      	str	r7, [r4, #20]
  4013d4:	b178      	cbz	r0, 4013f6 <setvbuf+0x82>
  4013d6:	f013 0f03 	tst.w	r3, #3
  4013da:	bf18      	it	ne
  4013dc:	2700      	movne	r7, #0
  4013de:	60a7      	str	r7, [r4, #8]
  4013e0:	2000      	movs	r0, #0
  4013e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4013e6:	f043 0301 	orr.w	r3, r3, #1
  4013ea:	427a      	negs	r2, r7
  4013ec:	81a3      	strh	r3, [r4, #12]
  4013ee:	61a2      	str	r2, [r4, #24]
  4013f0:	e7e5      	b.n	4013be <setvbuf+0x4a>
  4013f2:	f04f 30ff 	mov.w	r0, #4294967295
  4013f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4013fa:	4628      	mov	r0, r5
  4013fc:	6921      	ldr	r1, [r4, #16]
  4013fe:	f000 fb2d 	bl	401a5c <_free_r>
  401402:	89a3      	ldrh	r3, [r4, #12]
  401404:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  401408:	b29b      	uxth	r3, r3
  40140a:	2e02      	cmp	r6, #2
  40140c:	81a3      	strh	r3, [r4, #12]
  40140e:	d1d1      	bne.n	4013b4 <setvbuf+0x40>
  401410:	2000      	movs	r0, #0
  401412:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401416:	f043 0302 	orr.w	r3, r3, #2
  40141a:	2500      	movs	r5, #0
  40141c:	2101      	movs	r1, #1
  40141e:	81a3      	strh	r3, [r4, #12]
  401420:	60a5      	str	r5, [r4, #8]
  401422:	6022      	str	r2, [r4, #0]
  401424:	6122      	str	r2, [r4, #16]
  401426:	6161      	str	r1, [r4, #20]
  401428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40142c:	4628      	mov	r0, r5
  40142e:	f000 fa31 	bl	401894 <__sinit>
  401432:	e7ab      	b.n	40138c <setvbuf+0x18>
  401434:	2f00      	cmp	r7, #0
  401436:	bf08      	it	eq
  401438:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40143c:	4638      	mov	r0, r7
  40143e:	f000 fe25 	bl	40208c <malloc>
  401442:	4680      	mov	r8, r0
  401444:	b128      	cbz	r0, 401452 <setvbuf+0xde>
  401446:	89a3      	ldrh	r3, [r4, #12]
  401448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40144c:	b29b      	uxth	r3, r3
  40144e:	81a3      	strh	r3, [r4, #12]
  401450:	e7b3      	b.n	4013ba <setvbuf+0x46>
  401452:	f44f 6080 	mov.w	r0, #1024	; 0x400
  401456:	f000 fe19 	bl	40208c <malloc>
  40145a:	4680      	mov	r8, r0
  40145c:	b918      	cbnz	r0, 401466 <setvbuf+0xf2>
  40145e:	89a3      	ldrh	r3, [r4, #12]
  401460:	f04f 30ff 	mov.w	r0, #4294967295
  401464:	e7d5      	b.n	401412 <setvbuf+0x9e>
  401466:	f44f 6780 	mov.w	r7, #1024	; 0x400
  40146a:	e7ec      	b.n	401446 <setvbuf+0xd2>
  40146c:	20000440 	.word	0x20000440
  401470:	00401889 	.word	0x00401889

00401474 <strlen>:
  401474:	f020 0103 	bic.w	r1, r0, #3
  401478:	f010 0003 	ands.w	r0, r0, #3
  40147c:	f1c0 0000 	rsb	r0, r0, #0
  401480:	f851 3b04 	ldr.w	r3, [r1], #4
  401484:	f100 0c04 	add.w	ip, r0, #4
  401488:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  40148c:	f06f 0200 	mvn.w	r2, #0
  401490:	bf1c      	itt	ne
  401492:	fa22 f20c 	lsrne.w	r2, r2, ip
  401496:	4313      	orrne	r3, r2
  401498:	f04f 0c01 	mov.w	ip, #1
  40149c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4014a0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4014a4:	eba3 020c 	sub.w	r2, r3, ip
  4014a8:	ea22 0203 	bic.w	r2, r2, r3
  4014ac:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4014b0:	bf04      	itt	eq
  4014b2:	f851 3b04 	ldreq.w	r3, [r1], #4
  4014b6:	3004      	addeq	r0, #4
  4014b8:	d0f4      	beq.n	4014a4 <strlen+0x30>
  4014ba:	f013 0fff 	tst.w	r3, #255	; 0xff
  4014be:	bf1f      	itttt	ne
  4014c0:	3001      	addne	r0, #1
  4014c2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  4014c6:	3001      	addne	r0, #1
  4014c8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  4014cc:	bf18      	it	ne
  4014ce:	3001      	addne	r0, #1
  4014d0:	4770      	bx	lr
  4014d2:	bf00      	nop

004014d4 <_strtol_r>:
  4014d4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4014d8:	4c42      	ldr	r4, [pc, #264]	; (4015e4 <_strtol_r+0x110>)
  4014da:	b082      	sub	sp, #8
  4014dc:	f8d4 c000 	ldr.w	ip, [r4]
  4014e0:	9001      	str	r0, [sp, #4]
  4014e2:	460e      	mov	r6, r1
  4014e4:	e000      	b.n	4014e8 <_strtol_r+0x14>
  4014e6:	4626      	mov	r6, r4
  4014e8:	4634      	mov	r4, r6
  4014ea:	f814 5b01 	ldrb.w	r5, [r4], #1
  4014ee:	eb0c 0005 	add.w	r0, ip, r5
  4014f2:	7840      	ldrb	r0, [r0, #1]
  4014f4:	f000 0008 	and.w	r0, r0, #8
  4014f8:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  4014fc:	2800      	cmp	r0, #0
  4014fe:	d1f2      	bne.n	4014e6 <_strtol_r+0x12>
  401500:	2d2d      	cmp	r5, #45	; 0x2d
  401502:	d05b      	beq.n	4015bc <_strtol_r+0xe8>
  401504:	2d2b      	cmp	r5, #43	; 0x2b
  401506:	bf04      	itt	eq
  401508:	7875      	ldrbeq	r5, [r6, #1]
  40150a:	1cb4      	addeq	r4, r6, #2
  40150c:	f033 0010 	bics.w	r0, r3, #16
  401510:	d03c      	beq.n	40158c <_strtol_r+0xb8>
  401512:	4699      	mov	r9, r3
  401514:	f1ba 0f00 	cmp.w	sl, #0
  401518:	bf0c      	ite	eq
  40151a:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
  40151e:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
  401522:	fbbb f8f9 	udiv	r8, fp, r9
  401526:	2700      	movs	r7, #0
  401528:	fb09 bb18 	mls	fp, r9, r8, fp
  40152c:	4638      	mov	r0, r7
  40152e:	e00c      	b.n	40154a <_strtol_r+0x76>
  401530:	3d30      	subs	r5, #48	; 0x30
  401532:	42ab      	cmp	r3, r5
  401534:	dd19      	ble.n	40156a <_strtol_r+0x96>
  401536:	1c7e      	adds	r6, r7, #1
  401538:	d005      	beq.n	401546 <_strtol_r+0x72>
  40153a:	4540      	cmp	r0, r8
  40153c:	d823      	bhi.n	401586 <_strtol_r+0xb2>
  40153e:	d020      	beq.n	401582 <_strtol_r+0xae>
  401540:	fb09 5000 	mla	r0, r9, r0, r5
  401544:	2701      	movs	r7, #1
  401546:	f814 5b01 	ldrb.w	r5, [r4], #1
  40154a:	eb0c 0605 	add.w	r6, ip, r5
  40154e:	7876      	ldrb	r6, [r6, #1]
  401550:	f016 0f04 	tst.w	r6, #4
  401554:	d1ec      	bne.n	401530 <_strtol_r+0x5c>
  401556:	f016 0603 	ands.w	r6, r6, #3
  40155a:	d006      	beq.n	40156a <_strtol_r+0x96>
  40155c:	2e01      	cmp	r6, #1
  40155e:	bf14      	ite	ne
  401560:	2657      	movne	r6, #87	; 0x57
  401562:	2637      	moveq	r6, #55	; 0x37
  401564:	1bad      	subs	r5, r5, r6
  401566:	42ab      	cmp	r3, r5
  401568:	dce5      	bgt.n	401536 <_strtol_r+0x62>
  40156a:	1c7b      	adds	r3, r7, #1
  40156c:	d015      	beq.n	40159a <_strtol_r+0xc6>
  40156e:	f1ba 0f00 	cmp.w	sl, #0
  401572:	d121      	bne.n	4015b8 <_strtol_r+0xe4>
  401574:	b10a      	cbz	r2, 40157a <_strtol_r+0xa6>
  401576:	b9ef      	cbnz	r7, 4015b4 <_strtol_r+0xe0>
  401578:	6011      	str	r1, [r2, #0]
  40157a:	b002      	add	sp, #8
  40157c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  401580:	4770      	bx	lr
  401582:	455d      	cmp	r5, fp
  401584:	dddc      	ble.n	401540 <_strtol_r+0x6c>
  401586:	f04f 37ff 	mov.w	r7, #4294967295
  40158a:	e7dc      	b.n	401546 <_strtol_r+0x72>
  40158c:	2d30      	cmp	r5, #48	; 0x30
  40158e:	d01a      	beq.n	4015c6 <_strtol_r+0xf2>
  401590:	2b00      	cmp	r3, #0
  401592:	d1be      	bne.n	401512 <_strtol_r+0x3e>
  401594:	230a      	movs	r3, #10
  401596:	4699      	mov	r9, r3
  401598:	e7bc      	b.n	401514 <_strtol_r+0x40>
  40159a:	9901      	ldr	r1, [sp, #4]
  40159c:	f1ba 0f00 	cmp.w	sl, #0
  4015a0:	f04f 0322 	mov.w	r3, #34	; 0x22
  4015a4:	bf0c      	ite	eq
  4015a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4015aa:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  4015ae:	600b      	str	r3, [r1, #0]
  4015b0:	2a00      	cmp	r2, #0
  4015b2:	d0e2      	beq.n	40157a <_strtol_r+0xa6>
  4015b4:	1e61      	subs	r1, r4, #1
  4015b6:	e7df      	b.n	401578 <_strtol_r+0xa4>
  4015b8:	4240      	negs	r0, r0
  4015ba:	e7db      	b.n	401574 <_strtol_r+0xa0>
  4015bc:	1cb4      	adds	r4, r6, #2
  4015be:	7875      	ldrb	r5, [r6, #1]
  4015c0:	f04f 0a01 	mov.w	sl, #1
  4015c4:	e7a2      	b.n	40150c <_strtol_r+0x38>
  4015c6:	7820      	ldrb	r0, [r4, #0]
  4015c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  4015cc:	2858      	cmp	r0, #88	; 0x58
  4015ce:	d003      	beq.n	4015d8 <_strtol_r+0x104>
  4015d0:	2b00      	cmp	r3, #0
  4015d2:	d19e      	bne.n	401512 <_strtol_r+0x3e>
  4015d4:	2308      	movs	r3, #8
  4015d6:	e79c      	b.n	401512 <_strtol_r+0x3e>
  4015d8:	2310      	movs	r3, #16
  4015da:	7865      	ldrb	r5, [r4, #1]
  4015dc:	4699      	mov	r9, r3
  4015de:	3402      	adds	r4, #2
  4015e0:	e798      	b.n	401514 <_strtol_r+0x40>
  4015e2:	bf00      	nop
  4015e4:	20000010 	.word	0x20000010

004015e8 <strtol>:
  4015e8:	b430      	push	{r4, r5}
  4015ea:	4c04      	ldr	r4, [pc, #16]	; (4015fc <strtol+0x14>)
  4015ec:	460d      	mov	r5, r1
  4015ee:	4613      	mov	r3, r2
  4015f0:	4601      	mov	r1, r0
  4015f2:	462a      	mov	r2, r5
  4015f4:	6820      	ldr	r0, [r4, #0]
  4015f6:	bc30      	pop	{r4, r5}
  4015f8:	f7ff bf6c 	b.w	4014d4 <_strtol_r>
  4015fc:	20000440 	.word	0x20000440

00401600 <__swsetup_r>:
  401600:	4b2f      	ldr	r3, [pc, #188]	; (4016c0 <__swsetup_r+0xc0>)
  401602:	681b      	ldr	r3, [r3, #0]
  401604:	b570      	push	{r4, r5, r6, lr}
  401606:	4606      	mov	r6, r0
  401608:	460c      	mov	r4, r1
  40160a:	b113      	cbz	r3, 401612 <__swsetup_r+0x12>
  40160c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40160e:	2a00      	cmp	r2, #0
  401610:	d036      	beq.n	401680 <__swsetup_r+0x80>
  401612:	89a5      	ldrh	r5, [r4, #12]
  401614:	b2ab      	uxth	r3, r5
  401616:	0719      	lsls	r1, r3, #28
  401618:	d50c      	bpl.n	401634 <__swsetup_r+0x34>
  40161a:	6922      	ldr	r2, [r4, #16]
  40161c:	b1aa      	cbz	r2, 40164a <__swsetup_r+0x4a>
  40161e:	f013 0101 	ands.w	r1, r3, #1
  401622:	d01e      	beq.n	401662 <__swsetup_r+0x62>
  401624:	6963      	ldr	r3, [r4, #20]
  401626:	2100      	movs	r1, #0
  401628:	425b      	negs	r3, r3
  40162a:	61a3      	str	r3, [r4, #24]
  40162c:	60a1      	str	r1, [r4, #8]
  40162e:	b1f2      	cbz	r2, 40166e <__swsetup_r+0x6e>
  401630:	2000      	movs	r0, #0
  401632:	bd70      	pop	{r4, r5, r6, pc}
  401634:	06da      	lsls	r2, r3, #27
  401636:	d53b      	bpl.n	4016b0 <__swsetup_r+0xb0>
  401638:	075b      	lsls	r3, r3, #29
  40163a:	d425      	bmi.n	401688 <__swsetup_r+0x88>
  40163c:	6922      	ldr	r2, [r4, #16]
  40163e:	f045 0308 	orr.w	r3, r5, #8
  401642:	81a3      	strh	r3, [r4, #12]
  401644:	b29b      	uxth	r3, r3
  401646:	2a00      	cmp	r2, #0
  401648:	d1e9      	bne.n	40161e <__swsetup_r+0x1e>
  40164a:	f403 7120 	and.w	r1, r3, #640	; 0x280
  40164e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  401652:	d0e4      	beq.n	40161e <__swsetup_r+0x1e>
  401654:	4630      	mov	r0, r6
  401656:	4621      	mov	r1, r4
  401658:	f000 fca8 	bl	401fac <__smakebuf_r>
  40165c:	89a3      	ldrh	r3, [r4, #12]
  40165e:	6922      	ldr	r2, [r4, #16]
  401660:	e7dd      	b.n	40161e <__swsetup_r+0x1e>
  401662:	0798      	lsls	r0, r3, #30
  401664:	bf58      	it	pl
  401666:	6961      	ldrpl	r1, [r4, #20]
  401668:	60a1      	str	r1, [r4, #8]
  40166a:	2a00      	cmp	r2, #0
  40166c:	d1e0      	bne.n	401630 <__swsetup_r+0x30>
  40166e:	89a3      	ldrh	r3, [r4, #12]
  401670:	061a      	lsls	r2, r3, #24
  401672:	d5dd      	bpl.n	401630 <__swsetup_r+0x30>
  401674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401678:	81a3      	strh	r3, [r4, #12]
  40167a:	f04f 30ff 	mov.w	r0, #4294967295
  40167e:	bd70      	pop	{r4, r5, r6, pc}
  401680:	4618      	mov	r0, r3
  401682:	f000 f907 	bl	401894 <__sinit>
  401686:	e7c4      	b.n	401612 <__swsetup_r+0x12>
  401688:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40168a:	b149      	cbz	r1, 4016a0 <__swsetup_r+0xa0>
  40168c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401690:	4299      	cmp	r1, r3
  401692:	d003      	beq.n	40169c <__swsetup_r+0x9c>
  401694:	4630      	mov	r0, r6
  401696:	f000 f9e1 	bl	401a5c <_free_r>
  40169a:	89a5      	ldrh	r5, [r4, #12]
  40169c:	2300      	movs	r3, #0
  40169e:	6323      	str	r3, [r4, #48]	; 0x30
  4016a0:	f025 0524 	bic.w	r5, r5, #36	; 0x24
  4016a4:	2300      	movs	r3, #0
  4016a6:	6922      	ldr	r2, [r4, #16]
  4016a8:	6063      	str	r3, [r4, #4]
  4016aa:	b2ad      	uxth	r5, r5
  4016ac:	6022      	str	r2, [r4, #0]
  4016ae:	e7c6      	b.n	40163e <__swsetup_r+0x3e>
  4016b0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  4016b4:	2309      	movs	r3, #9
  4016b6:	6033      	str	r3, [r6, #0]
  4016b8:	f04f 30ff 	mov.w	r0, #4294967295
  4016bc:	81a5      	strh	r5, [r4, #12]
  4016be:	bd70      	pop	{r4, r5, r6, pc}
  4016c0:	20000440 	.word	0x20000440

004016c4 <register_fini>:
  4016c4:	4b02      	ldr	r3, [pc, #8]	; (4016d0 <register_fini+0xc>)
  4016c6:	b113      	cbz	r3, 4016ce <register_fini+0xa>
  4016c8:	4802      	ldr	r0, [pc, #8]	; (4016d4 <register_fini+0x10>)
  4016ca:	f000 b805 	b.w	4016d8 <atexit>
  4016ce:	4770      	bx	lr
  4016d0:	00000000 	.word	0x00000000
  4016d4:	00401991 	.word	0x00401991

004016d8 <atexit>:
  4016d8:	4601      	mov	r1, r0
  4016da:	2000      	movs	r0, #0
  4016dc:	4602      	mov	r2, r0
  4016de:	4603      	mov	r3, r0
  4016e0:	f001 bba0 	b.w	402e24 <__register_exitproc>

004016e4 <__sflush_r>:
  4016e4:	898b      	ldrh	r3, [r1, #12]
  4016e6:	b29a      	uxth	r2, r3
  4016e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4016ec:	460d      	mov	r5, r1
  4016ee:	0711      	lsls	r1, r2, #28
  4016f0:	4680      	mov	r8, r0
  4016f2:	d43c      	bmi.n	40176e <__sflush_r+0x8a>
  4016f4:	686a      	ldr	r2, [r5, #4]
  4016f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4016fa:	2a00      	cmp	r2, #0
  4016fc:	81ab      	strh	r3, [r5, #12]
  4016fe:	dd59      	ble.n	4017b4 <__sflush_r+0xd0>
  401700:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401702:	2c00      	cmp	r4, #0
  401704:	d04b      	beq.n	40179e <__sflush_r+0xba>
  401706:	b29b      	uxth	r3, r3
  401708:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40170c:	2100      	movs	r1, #0
  40170e:	b292      	uxth	r2, r2
  401710:	f8d8 6000 	ldr.w	r6, [r8]
  401714:	f8c8 1000 	str.w	r1, [r8]
  401718:	2a00      	cmp	r2, #0
  40171a:	d04f      	beq.n	4017bc <__sflush_r+0xd8>
  40171c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40171e:	075f      	lsls	r7, r3, #29
  401720:	d505      	bpl.n	40172e <__sflush_r+0x4a>
  401722:	6869      	ldr	r1, [r5, #4]
  401724:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401726:	1a52      	subs	r2, r2, r1
  401728:	b10b      	cbz	r3, 40172e <__sflush_r+0x4a>
  40172a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40172c:	1ad2      	subs	r2, r2, r3
  40172e:	4640      	mov	r0, r8
  401730:	69e9      	ldr	r1, [r5, #28]
  401732:	2300      	movs	r3, #0
  401734:	47a0      	blx	r4
  401736:	1c44      	adds	r4, r0, #1
  401738:	d04a      	beq.n	4017d0 <__sflush_r+0xec>
  40173a:	89aa      	ldrh	r2, [r5, #12]
  40173c:	692b      	ldr	r3, [r5, #16]
  40173e:	602b      	str	r3, [r5, #0]
  401740:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401744:	b29b      	uxth	r3, r3
  401746:	2200      	movs	r2, #0
  401748:	606a      	str	r2, [r5, #4]
  40174a:	04da      	lsls	r2, r3, #19
  40174c:	81ab      	strh	r3, [r5, #12]
  40174e:	d44c      	bmi.n	4017ea <__sflush_r+0x106>
  401750:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401752:	f8c8 6000 	str.w	r6, [r8]
  401756:	b311      	cbz	r1, 40179e <__sflush_r+0xba>
  401758:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40175c:	4299      	cmp	r1, r3
  40175e:	d002      	beq.n	401766 <__sflush_r+0x82>
  401760:	4640      	mov	r0, r8
  401762:	f000 f97b 	bl	401a5c <_free_r>
  401766:	2000      	movs	r0, #0
  401768:	6328      	str	r0, [r5, #48]	; 0x30
  40176a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40176e:	692e      	ldr	r6, [r5, #16]
  401770:	b1ae      	cbz	r6, 40179e <__sflush_r+0xba>
  401772:	682c      	ldr	r4, [r5, #0]
  401774:	602e      	str	r6, [r5, #0]
  401776:	0791      	lsls	r1, r2, #30
  401778:	bf0c      	ite	eq
  40177a:	696b      	ldreq	r3, [r5, #20]
  40177c:	2300      	movne	r3, #0
  40177e:	1ba4      	subs	r4, r4, r6
  401780:	60ab      	str	r3, [r5, #8]
  401782:	e00a      	b.n	40179a <__sflush_r+0xb6>
  401784:	4632      	mov	r2, r6
  401786:	4623      	mov	r3, r4
  401788:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40178a:	69e9      	ldr	r1, [r5, #28]
  40178c:	4640      	mov	r0, r8
  40178e:	47b8      	blx	r7
  401790:	2800      	cmp	r0, #0
  401792:	ebc0 0404 	rsb	r4, r0, r4
  401796:	4406      	add	r6, r0
  401798:	dd04      	ble.n	4017a4 <__sflush_r+0xc0>
  40179a:	2c00      	cmp	r4, #0
  40179c:	dcf2      	bgt.n	401784 <__sflush_r+0xa0>
  40179e:	2000      	movs	r0, #0
  4017a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4017a4:	89ab      	ldrh	r3, [r5, #12]
  4017a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4017aa:	81ab      	strh	r3, [r5, #12]
  4017ac:	f04f 30ff 	mov.w	r0, #4294967295
  4017b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4017b4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4017b6:	2a00      	cmp	r2, #0
  4017b8:	dca2      	bgt.n	401700 <__sflush_r+0x1c>
  4017ba:	e7f0      	b.n	40179e <__sflush_r+0xba>
  4017bc:	2301      	movs	r3, #1
  4017be:	4640      	mov	r0, r8
  4017c0:	69e9      	ldr	r1, [r5, #28]
  4017c2:	47a0      	blx	r4
  4017c4:	1c43      	adds	r3, r0, #1
  4017c6:	4602      	mov	r2, r0
  4017c8:	d01e      	beq.n	401808 <__sflush_r+0x124>
  4017ca:	89ab      	ldrh	r3, [r5, #12]
  4017cc:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4017ce:	e7a6      	b.n	40171e <__sflush_r+0x3a>
  4017d0:	f8d8 3000 	ldr.w	r3, [r8]
  4017d4:	b95b      	cbnz	r3, 4017ee <__sflush_r+0x10a>
  4017d6:	89a9      	ldrh	r1, [r5, #12]
  4017d8:	606b      	str	r3, [r5, #4]
  4017da:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
  4017de:	b29b      	uxth	r3, r3
  4017e0:	692a      	ldr	r2, [r5, #16]
  4017e2:	81ab      	strh	r3, [r5, #12]
  4017e4:	04db      	lsls	r3, r3, #19
  4017e6:	602a      	str	r2, [r5, #0]
  4017e8:	d5b2      	bpl.n	401750 <__sflush_r+0x6c>
  4017ea:	6528      	str	r0, [r5, #80]	; 0x50
  4017ec:	e7b0      	b.n	401750 <__sflush_r+0x6c>
  4017ee:	2b1d      	cmp	r3, #29
  4017f0:	d001      	beq.n	4017f6 <__sflush_r+0x112>
  4017f2:	2b16      	cmp	r3, #22
  4017f4:	d119      	bne.n	40182a <__sflush_r+0x146>
  4017f6:	89aa      	ldrh	r2, [r5, #12]
  4017f8:	692b      	ldr	r3, [r5, #16]
  4017fa:	602b      	str	r3, [r5, #0]
  4017fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  401800:	2300      	movs	r3, #0
  401802:	81aa      	strh	r2, [r5, #12]
  401804:	606b      	str	r3, [r5, #4]
  401806:	e7a3      	b.n	401750 <__sflush_r+0x6c>
  401808:	f8d8 3000 	ldr.w	r3, [r8]
  40180c:	2b00      	cmp	r3, #0
  40180e:	d0dc      	beq.n	4017ca <__sflush_r+0xe6>
  401810:	2b1d      	cmp	r3, #29
  401812:	d007      	beq.n	401824 <__sflush_r+0x140>
  401814:	2b16      	cmp	r3, #22
  401816:	d005      	beq.n	401824 <__sflush_r+0x140>
  401818:	89ab      	ldrh	r3, [r5, #12]
  40181a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40181e:	81ab      	strh	r3, [r5, #12]
  401820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401824:	f8c8 6000 	str.w	r6, [r8]
  401828:	e7b9      	b.n	40179e <__sflush_r+0xba>
  40182a:	89ab      	ldrh	r3, [r5, #12]
  40182c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401830:	81ab      	strh	r3, [r5, #12]
  401832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401836:	bf00      	nop

00401838 <_fflush_r>:
  401838:	b510      	push	{r4, lr}
  40183a:	4604      	mov	r4, r0
  40183c:	b082      	sub	sp, #8
  40183e:	b108      	cbz	r0, 401844 <_fflush_r+0xc>
  401840:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401842:	b153      	cbz	r3, 40185a <_fflush_r+0x22>
  401844:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  401848:	b908      	cbnz	r0, 40184e <_fflush_r+0x16>
  40184a:	b002      	add	sp, #8
  40184c:	bd10      	pop	{r4, pc}
  40184e:	4620      	mov	r0, r4
  401850:	b002      	add	sp, #8
  401852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401856:	f7ff bf45 	b.w	4016e4 <__sflush_r>
  40185a:	9101      	str	r1, [sp, #4]
  40185c:	f000 f81a 	bl	401894 <__sinit>
  401860:	9901      	ldr	r1, [sp, #4]
  401862:	e7ef      	b.n	401844 <_fflush_r+0xc>

00401864 <fflush>:
  401864:	b120      	cbz	r0, 401870 <fflush+0xc>
  401866:	4b05      	ldr	r3, [pc, #20]	; (40187c <fflush+0x18>)
  401868:	4601      	mov	r1, r0
  40186a:	6818      	ldr	r0, [r3, #0]
  40186c:	f7ff bfe4 	b.w	401838 <_fflush_r>
  401870:	4b03      	ldr	r3, [pc, #12]	; (401880 <fflush+0x1c>)
  401872:	4904      	ldr	r1, [pc, #16]	; (401884 <fflush+0x20>)
  401874:	6818      	ldr	r0, [r3, #0]
  401876:	f000 bb71 	b.w	401f5c <_fwalk_reent>
  40187a:	bf00      	nop
  40187c:	20000440 	.word	0x20000440
  401880:	00403170 	.word	0x00403170
  401884:	00401839 	.word	0x00401839

00401888 <_cleanup_r>:
  401888:	4901      	ldr	r1, [pc, #4]	; (401890 <_cleanup_r+0x8>)
  40188a:	f000 bb41 	b.w	401f10 <_fwalk>
  40188e:	bf00      	nop
  401890:	00402f71 	.word	0x00402f71

00401894 <__sinit>:
  401894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401898:	6b84      	ldr	r4, [r0, #56]	; 0x38
  40189a:	b083      	sub	sp, #12
  40189c:	4607      	mov	r7, r0
  40189e:	2c00      	cmp	r4, #0
  4018a0:	d165      	bne.n	40196e <__sinit+0xda>
  4018a2:	6845      	ldr	r5, [r0, #4]
  4018a4:	4833      	ldr	r0, [pc, #204]	; (401974 <__sinit+0xe0>)
  4018a6:	63f8      	str	r0, [r7, #60]	; 0x3c
  4018a8:	2304      	movs	r3, #4
  4018aa:	2103      	movs	r1, #3
  4018ac:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  4018b0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  4018b4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  4018b8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  4018bc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4018c0:	81ab      	strh	r3, [r5, #12]
  4018c2:	602c      	str	r4, [r5, #0]
  4018c4:	606c      	str	r4, [r5, #4]
  4018c6:	60ac      	str	r4, [r5, #8]
  4018c8:	666c      	str	r4, [r5, #100]	; 0x64
  4018ca:	81ec      	strh	r4, [r5, #14]
  4018cc:	612c      	str	r4, [r5, #16]
  4018ce:	616c      	str	r4, [r5, #20]
  4018d0:	61ac      	str	r4, [r5, #24]
  4018d2:	4621      	mov	r1, r4
  4018d4:	2208      	movs	r2, #8
  4018d6:	f7ff fcab 	bl	401230 <memset>
  4018da:	68be      	ldr	r6, [r7, #8]
  4018dc:	f8df b098 	ldr.w	fp, [pc, #152]	; 401978 <__sinit+0xe4>
  4018e0:	f8df a098 	ldr.w	sl, [pc, #152]	; 40197c <__sinit+0xe8>
  4018e4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 401980 <__sinit+0xec>
  4018e8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401984 <__sinit+0xf0>
  4018ec:	61ed      	str	r5, [r5, #28]
  4018ee:	2301      	movs	r3, #1
  4018f0:	2209      	movs	r2, #9
  4018f2:	f8c5 b020 	str.w	fp, [r5, #32]
  4018f6:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4018fa:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4018fe:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401902:	4621      	mov	r1, r4
  401904:	81f3      	strh	r3, [r6, #14]
  401906:	81b2      	strh	r2, [r6, #12]
  401908:	6034      	str	r4, [r6, #0]
  40190a:	6074      	str	r4, [r6, #4]
  40190c:	60b4      	str	r4, [r6, #8]
  40190e:	6674      	str	r4, [r6, #100]	; 0x64
  401910:	6134      	str	r4, [r6, #16]
  401912:	6174      	str	r4, [r6, #20]
  401914:	61b4      	str	r4, [r6, #24]
  401916:	2208      	movs	r2, #8
  401918:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40191c:	9301      	str	r3, [sp, #4]
  40191e:	f7ff fc87 	bl	401230 <memset>
  401922:	68fd      	ldr	r5, [r7, #12]
  401924:	61f6      	str	r6, [r6, #28]
  401926:	2012      	movs	r0, #18
  401928:	2202      	movs	r2, #2
  40192a:	f8c6 b020 	str.w	fp, [r6, #32]
  40192e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  401932:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  401936:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40193a:	4621      	mov	r1, r4
  40193c:	81a8      	strh	r0, [r5, #12]
  40193e:	81ea      	strh	r2, [r5, #14]
  401940:	602c      	str	r4, [r5, #0]
  401942:	606c      	str	r4, [r5, #4]
  401944:	60ac      	str	r4, [r5, #8]
  401946:	666c      	str	r4, [r5, #100]	; 0x64
  401948:	612c      	str	r4, [r5, #16]
  40194a:	616c      	str	r4, [r5, #20]
  40194c:	61ac      	str	r4, [r5, #24]
  40194e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  401952:	2208      	movs	r2, #8
  401954:	f7ff fc6c 	bl	401230 <memset>
  401958:	9b01      	ldr	r3, [sp, #4]
  40195a:	61ed      	str	r5, [r5, #28]
  40195c:	f8c5 b020 	str.w	fp, [r5, #32]
  401960:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401964:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401968:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40196c:	63bb      	str	r3, [r7, #56]	; 0x38
  40196e:	b003      	add	sp, #12
  401970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401974:	00401889 	.word	0x00401889
  401978:	00402d79 	.word	0x00402d79
  40197c:	00402d9d 	.word	0x00402d9d
  401980:	00402dd5 	.word	0x00402dd5
  401984:	00402df5 	.word	0x00402df5

00401988 <__sfp_lock_acquire>:
  401988:	4770      	bx	lr
  40198a:	bf00      	nop

0040198c <__sfp_lock_release>:
  40198c:	4770      	bx	lr
  40198e:	bf00      	nop

00401990 <__libc_fini_array>:
  401990:	b538      	push	{r3, r4, r5, lr}
  401992:	4d09      	ldr	r5, [pc, #36]	; (4019b8 <__libc_fini_array+0x28>)
  401994:	4c09      	ldr	r4, [pc, #36]	; (4019bc <__libc_fini_array+0x2c>)
  401996:	1b64      	subs	r4, r4, r5
  401998:	10a4      	asrs	r4, r4, #2
  40199a:	bf18      	it	ne
  40199c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  4019a0:	d005      	beq.n	4019ae <__libc_fini_array+0x1e>
  4019a2:	3c01      	subs	r4, #1
  4019a4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4019a8:	4798      	blx	r3
  4019aa:	2c00      	cmp	r4, #0
  4019ac:	d1f9      	bne.n	4019a2 <__libc_fini_array+0x12>
  4019ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4019b2:	f001 bbeb 	b.w	40318c <_fini>
  4019b6:	bf00      	nop
  4019b8:	00403198 	.word	0x00403198
  4019bc:	0040319c 	.word	0x0040319c

004019c0 <_malloc_trim_r>:
  4019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4019c2:	4d23      	ldr	r5, [pc, #140]	; (401a50 <_malloc_trim_r+0x90>)
  4019c4:	460f      	mov	r7, r1
  4019c6:	4604      	mov	r4, r0
  4019c8:	f000 ff46 	bl	402858 <__malloc_lock>
  4019cc:	68ab      	ldr	r3, [r5, #8]
  4019ce:	685e      	ldr	r6, [r3, #4]
  4019d0:	f026 0603 	bic.w	r6, r6, #3
  4019d4:	1bf1      	subs	r1, r6, r7
  4019d6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4019da:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4019de:	f021 010f 	bic.w	r1, r1, #15
  4019e2:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  4019e6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  4019ea:	db07      	blt.n	4019fc <_malloc_trim_r+0x3c>
  4019ec:	4620      	mov	r0, r4
  4019ee:	2100      	movs	r1, #0
  4019f0:	f001 f9b0 	bl	402d54 <_sbrk_r>
  4019f4:	68ab      	ldr	r3, [r5, #8]
  4019f6:	4433      	add	r3, r6
  4019f8:	4298      	cmp	r0, r3
  4019fa:	d004      	beq.n	401a06 <_malloc_trim_r+0x46>
  4019fc:	4620      	mov	r0, r4
  4019fe:	f000 ff2d 	bl	40285c <__malloc_unlock>
  401a02:	2000      	movs	r0, #0
  401a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a06:	4620      	mov	r0, r4
  401a08:	4279      	negs	r1, r7
  401a0a:	f001 f9a3 	bl	402d54 <_sbrk_r>
  401a0e:	3001      	adds	r0, #1
  401a10:	d00d      	beq.n	401a2e <_malloc_trim_r+0x6e>
  401a12:	4b10      	ldr	r3, [pc, #64]	; (401a54 <_malloc_trim_r+0x94>)
  401a14:	68aa      	ldr	r2, [r5, #8]
  401a16:	6819      	ldr	r1, [r3, #0]
  401a18:	1bf6      	subs	r6, r6, r7
  401a1a:	f046 0601 	orr.w	r6, r6, #1
  401a1e:	4620      	mov	r0, r4
  401a20:	1bc9      	subs	r1, r1, r7
  401a22:	6056      	str	r6, [r2, #4]
  401a24:	6019      	str	r1, [r3, #0]
  401a26:	f000 ff19 	bl	40285c <__malloc_unlock>
  401a2a:	2001      	movs	r0, #1
  401a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a2e:	4620      	mov	r0, r4
  401a30:	2100      	movs	r1, #0
  401a32:	f001 f98f 	bl	402d54 <_sbrk_r>
  401a36:	68ab      	ldr	r3, [r5, #8]
  401a38:	1ac2      	subs	r2, r0, r3
  401a3a:	2a0f      	cmp	r2, #15
  401a3c:	ddde      	ble.n	4019fc <_malloc_trim_r+0x3c>
  401a3e:	4d06      	ldr	r5, [pc, #24]	; (401a58 <_malloc_trim_r+0x98>)
  401a40:	4904      	ldr	r1, [pc, #16]	; (401a54 <_malloc_trim_r+0x94>)
  401a42:	682d      	ldr	r5, [r5, #0]
  401a44:	f042 0201 	orr.w	r2, r2, #1
  401a48:	1b40      	subs	r0, r0, r5
  401a4a:	605a      	str	r2, [r3, #4]
  401a4c:	6008      	str	r0, [r1, #0]
  401a4e:	e7d5      	b.n	4019fc <_malloc_trim_r+0x3c>
  401a50:	20000444 	.word	0x20000444
  401a54:	200008f8 	.word	0x200008f8
  401a58:	20000850 	.word	0x20000850

00401a5c <_free_r>:
  401a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401a60:	460d      	mov	r5, r1
  401a62:	4606      	mov	r6, r0
  401a64:	2900      	cmp	r1, #0
  401a66:	d055      	beq.n	401b14 <_free_r+0xb8>
  401a68:	f000 fef6 	bl	402858 <__malloc_lock>
  401a6c:	f855 1c04 	ldr.w	r1, [r5, #-4]
  401a70:	f8df c174 	ldr.w	ip, [pc, #372]	; 401be8 <_free_r+0x18c>
  401a74:	f021 0301 	bic.w	r3, r1, #1
  401a78:	f1a5 0408 	sub.w	r4, r5, #8
  401a7c:	18e2      	adds	r2, r4, r3
  401a7e:	f8dc 0008 	ldr.w	r0, [ip, #8]
  401a82:	6857      	ldr	r7, [r2, #4]
  401a84:	4290      	cmp	r0, r2
  401a86:	f027 0703 	bic.w	r7, r7, #3
  401a8a:	d069      	beq.n	401b60 <_free_r+0x104>
  401a8c:	f011 0101 	ands.w	r1, r1, #1
  401a90:	6057      	str	r7, [r2, #4]
  401a92:	d032      	beq.n	401afa <_free_r+0x9e>
  401a94:	2100      	movs	r1, #0
  401a96:	19d0      	adds	r0, r2, r7
  401a98:	6840      	ldr	r0, [r0, #4]
  401a9a:	07c0      	lsls	r0, r0, #31
  401a9c:	d406      	bmi.n	401aac <_free_r+0x50>
  401a9e:	443b      	add	r3, r7
  401aa0:	6890      	ldr	r0, [r2, #8]
  401aa2:	2900      	cmp	r1, #0
  401aa4:	d04e      	beq.n	401b44 <_free_r+0xe8>
  401aa6:	68d2      	ldr	r2, [r2, #12]
  401aa8:	60c2      	str	r2, [r0, #12]
  401aaa:	6090      	str	r0, [r2, #8]
  401aac:	f043 0201 	orr.w	r2, r3, #1
  401ab0:	6062      	str	r2, [r4, #4]
  401ab2:	50e3      	str	r3, [r4, r3]
  401ab4:	b9e1      	cbnz	r1, 401af0 <_free_r+0x94>
  401ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401aba:	d32d      	bcc.n	401b18 <_free_r+0xbc>
  401abc:	0a5a      	lsrs	r2, r3, #9
  401abe:	2a04      	cmp	r2, #4
  401ac0:	d86a      	bhi.n	401b98 <_free_r+0x13c>
  401ac2:	0998      	lsrs	r0, r3, #6
  401ac4:	3038      	adds	r0, #56	; 0x38
  401ac6:	0041      	lsls	r1, r0, #1
  401ac8:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  401acc:	4946      	ldr	r1, [pc, #280]	; (401be8 <_free_r+0x18c>)
  401ace:	f8dc 2008 	ldr.w	r2, [ip, #8]
  401ad2:	4562      	cmp	r2, ip
  401ad4:	d066      	beq.n	401ba4 <_free_r+0x148>
  401ad6:	6851      	ldr	r1, [r2, #4]
  401ad8:	f021 0103 	bic.w	r1, r1, #3
  401adc:	428b      	cmp	r3, r1
  401ade:	d202      	bcs.n	401ae6 <_free_r+0x8a>
  401ae0:	6892      	ldr	r2, [r2, #8]
  401ae2:	4594      	cmp	ip, r2
  401ae4:	d1f7      	bne.n	401ad6 <_free_r+0x7a>
  401ae6:	68d3      	ldr	r3, [r2, #12]
  401ae8:	60e3      	str	r3, [r4, #12]
  401aea:	60a2      	str	r2, [r4, #8]
  401aec:	609c      	str	r4, [r3, #8]
  401aee:	60d4      	str	r4, [r2, #12]
  401af0:	4630      	mov	r0, r6
  401af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401af6:	f000 beb1 	b.w	40285c <__malloc_unlock>
  401afa:	f855 5c08 	ldr.w	r5, [r5, #-8]
  401afe:	1b64      	subs	r4, r4, r5
  401b00:	f10c 0808 	add.w	r8, ip, #8
  401b04:	68a0      	ldr	r0, [r4, #8]
  401b06:	4540      	cmp	r0, r8
  401b08:	442b      	add	r3, r5
  401b0a:	d043      	beq.n	401b94 <_free_r+0x138>
  401b0c:	68e5      	ldr	r5, [r4, #12]
  401b0e:	60c5      	str	r5, [r0, #12]
  401b10:	60a8      	str	r0, [r5, #8]
  401b12:	e7c0      	b.n	401a96 <_free_r+0x3a>
  401b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401b18:	08db      	lsrs	r3, r3, #3
  401b1a:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  401b1e:	2501      	movs	r5, #1
  401b20:	f8dc 0004 	ldr.w	r0, [ip, #4]
  401b24:	6891      	ldr	r1, [r2, #8]
  401b26:	60a1      	str	r1, [r4, #8]
  401b28:	109b      	asrs	r3, r3, #2
  401b2a:	fa05 f303 	lsl.w	r3, r5, r3
  401b2e:	4318      	orrs	r0, r3
  401b30:	60e2      	str	r2, [r4, #12]
  401b32:	f8cc 0004 	str.w	r0, [ip, #4]
  401b36:	6094      	str	r4, [r2, #8]
  401b38:	4630      	mov	r0, r6
  401b3a:	60cc      	str	r4, [r1, #12]
  401b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401b40:	f000 be8c 	b.w	40285c <__malloc_unlock>
  401b44:	4d29      	ldr	r5, [pc, #164]	; (401bec <_free_r+0x190>)
  401b46:	42a8      	cmp	r0, r5
  401b48:	d1ad      	bne.n	401aa6 <_free_r+0x4a>
  401b4a:	f043 0201 	orr.w	r2, r3, #1
  401b4e:	f8cc 4014 	str.w	r4, [ip, #20]
  401b52:	f8cc 4010 	str.w	r4, [ip, #16]
  401b56:	60e0      	str	r0, [r4, #12]
  401b58:	60a0      	str	r0, [r4, #8]
  401b5a:	6062      	str	r2, [r4, #4]
  401b5c:	50e3      	str	r3, [r4, r3]
  401b5e:	e7c7      	b.n	401af0 <_free_r+0x94>
  401b60:	441f      	add	r7, r3
  401b62:	07cb      	lsls	r3, r1, #31
  401b64:	d407      	bmi.n	401b76 <_free_r+0x11a>
  401b66:	f855 3c08 	ldr.w	r3, [r5, #-8]
  401b6a:	1ae4      	subs	r4, r4, r3
  401b6c:	441f      	add	r7, r3
  401b6e:	68a2      	ldr	r2, [r4, #8]
  401b70:	68e3      	ldr	r3, [r4, #12]
  401b72:	60d3      	str	r3, [r2, #12]
  401b74:	609a      	str	r2, [r3, #8]
  401b76:	4b1e      	ldr	r3, [pc, #120]	; (401bf0 <_free_r+0x194>)
  401b78:	681b      	ldr	r3, [r3, #0]
  401b7a:	f047 0201 	orr.w	r2, r7, #1
  401b7e:	429f      	cmp	r7, r3
  401b80:	6062      	str	r2, [r4, #4]
  401b82:	f8cc 4008 	str.w	r4, [ip, #8]
  401b86:	d3b3      	bcc.n	401af0 <_free_r+0x94>
  401b88:	4b1a      	ldr	r3, [pc, #104]	; (401bf4 <_free_r+0x198>)
  401b8a:	4630      	mov	r0, r6
  401b8c:	6819      	ldr	r1, [r3, #0]
  401b8e:	f7ff ff17 	bl	4019c0 <_malloc_trim_r>
  401b92:	e7ad      	b.n	401af0 <_free_r+0x94>
  401b94:	2101      	movs	r1, #1
  401b96:	e77e      	b.n	401a96 <_free_r+0x3a>
  401b98:	2a14      	cmp	r2, #20
  401b9a:	d80c      	bhi.n	401bb6 <_free_r+0x15a>
  401b9c:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  401ba0:	0041      	lsls	r1, r0, #1
  401ba2:	e791      	b.n	401ac8 <_free_r+0x6c>
  401ba4:	684b      	ldr	r3, [r1, #4]
  401ba6:	1080      	asrs	r0, r0, #2
  401ba8:	2501      	movs	r5, #1
  401baa:	fa05 f000 	lsl.w	r0, r5, r0
  401bae:	4303      	orrs	r3, r0
  401bb0:	604b      	str	r3, [r1, #4]
  401bb2:	4613      	mov	r3, r2
  401bb4:	e798      	b.n	401ae8 <_free_r+0x8c>
  401bb6:	2a54      	cmp	r2, #84	; 0x54
  401bb8:	d803      	bhi.n	401bc2 <_free_r+0x166>
  401bba:	0b18      	lsrs	r0, r3, #12
  401bbc:	306e      	adds	r0, #110	; 0x6e
  401bbe:	0041      	lsls	r1, r0, #1
  401bc0:	e782      	b.n	401ac8 <_free_r+0x6c>
  401bc2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401bc6:	d803      	bhi.n	401bd0 <_free_r+0x174>
  401bc8:	0bd8      	lsrs	r0, r3, #15
  401bca:	3077      	adds	r0, #119	; 0x77
  401bcc:	0041      	lsls	r1, r0, #1
  401bce:	e77b      	b.n	401ac8 <_free_r+0x6c>
  401bd0:	f240 5154 	movw	r1, #1364	; 0x554
  401bd4:	428a      	cmp	r2, r1
  401bd6:	d803      	bhi.n	401be0 <_free_r+0x184>
  401bd8:	0c98      	lsrs	r0, r3, #18
  401bda:	307c      	adds	r0, #124	; 0x7c
  401bdc:	0041      	lsls	r1, r0, #1
  401bde:	e773      	b.n	401ac8 <_free_r+0x6c>
  401be0:	21fc      	movs	r1, #252	; 0xfc
  401be2:	207e      	movs	r0, #126	; 0x7e
  401be4:	e770      	b.n	401ac8 <_free_r+0x6c>
  401be6:	bf00      	nop
  401be8:	20000444 	.word	0x20000444
  401bec:	2000044c 	.word	0x2000044c
  401bf0:	2000084c 	.word	0x2000084c
  401bf4:	200008f4 	.word	0x200008f4

00401bf8 <__sfvwrite_r>:
  401bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401bfc:	6893      	ldr	r3, [r2, #8]
  401bfe:	b083      	sub	sp, #12
  401c00:	4616      	mov	r6, r2
  401c02:	4681      	mov	r9, r0
  401c04:	460c      	mov	r4, r1
  401c06:	b32b      	cbz	r3, 401c54 <__sfvwrite_r+0x5c>
  401c08:	898b      	ldrh	r3, [r1, #12]
  401c0a:	0719      	lsls	r1, r3, #28
  401c0c:	d526      	bpl.n	401c5c <__sfvwrite_r+0x64>
  401c0e:	6922      	ldr	r2, [r4, #16]
  401c10:	b322      	cbz	r2, 401c5c <__sfvwrite_r+0x64>
  401c12:	f003 0202 	and.w	r2, r3, #2
  401c16:	b292      	uxth	r2, r2
  401c18:	6835      	ldr	r5, [r6, #0]
  401c1a:	2a00      	cmp	r2, #0
  401c1c:	d02c      	beq.n	401c78 <__sfvwrite_r+0x80>
  401c1e:	f04f 0a00 	mov.w	sl, #0
  401c22:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 401f0c <__sfvwrite_r+0x314>
  401c26:	46d0      	mov	r8, sl
  401c28:	45d8      	cmp	r8, fp
  401c2a:	bf34      	ite	cc
  401c2c:	4643      	movcc	r3, r8
  401c2e:	465b      	movcs	r3, fp
  401c30:	4652      	mov	r2, sl
  401c32:	4648      	mov	r0, r9
  401c34:	f1b8 0f00 	cmp.w	r8, #0
  401c38:	d04f      	beq.n	401cda <__sfvwrite_r+0xe2>
  401c3a:	69e1      	ldr	r1, [r4, #28]
  401c3c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401c3e:	47b8      	blx	r7
  401c40:	2800      	cmp	r0, #0
  401c42:	dd56      	ble.n	401cf2 <__sfvwrite_r+0xfa>
  401c44:	68b3      	ldr	r3, [r6, #8]
  401c46:	1a1b      	subs	r3, r3, r0
  401c48:	4482      	add	sl, r0
  401c4a:	ebc0 0808 	rsb	r8, r0, r8
  401c4e:	60b3      	str	r3, [r6, #8]
  401c50:	2b00      	cmp	r3, #0
  401c52:	d1e9      	bne.n	401c28 <__sfvwrite_r+0x30>
  401c54:	2000      	movs	r0, #0
  401c56:	b003      	add	sp, #12
  401c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c5c:	4648      	mov	r0, r9
  401c5e:	4621      	mov	r1, r4
  401c60:	f7ff fcce 	bl	401600 <__swsetup_r>
  401c64:	2800      	cmp	r0, #0
  401c66:	f040 8148 	bne.w	401efa <__sfvwrite_r+0x302>
  401c6a:	89a3      	ldrh	r3, [r4, #12]
  401c6c:	6835      	ldr	r5, [r6, #0]
  401c6e:	f003 0202 	and.w	r2, r3, #2
  401c72:	b292      	uxth	r2, r2
  401c74:	2a00      	cmp	r2, #0
  401c76:	d1d2      	bne.n	401c1e <__sfvwrite_r+0x26>
  401c78:	f013 0a01 	ands.w	sl, r3, #1
  401c7c:	d142      	bne.n	401d04 <__sfvwrite_r+0x10c>
  401c7e:	46d0      	mov	r8, sl
  401c80:	f1b8 0f00 	cmp.w	r8, #0
  401c84:	d023      	beq.n	401cce <__sfvwrite_r+0xd6>
  401c86:	059a      	lsls	r2, r3, #22
  401c88:	68a7      	ldr	r7, [r4, #8]
  401c8a:	d576      	bpl.n	401d7a <__sfvwrite_r+0x182>
  401c8c:	45b8      	cmp	r8, r7
  401c8e:	f0c0 80a4 	bcc.w	401dda <__sfvwrite_r+0x1e2>
  401c92:	f413 6f90 	tst.w	r3, #1152	; 0x480
  401c96:	f040 80b2 	bne.w	401dfe <__sfvwrite_r+0x206>
  401c9a:	6820      	ldr	r0, [r4, #0]
  401c9c:	46bb      	mov	fp, r7
  401c9e:	4651      	mov	r1, sl
  401ca0:	465a      	mov	r2, fp
  401ca2:	f000 fd79 	bl	402798 <memmove>
  401ca6:	68a2      	ldr	r2, [r4, #8]
  401ca8:	6821      	ldr	r1, [r4, #0]
  401caa:	1bd2      	subs	r2, r2, r7
  401cac:	eb01 030b 	add.w	r3, r1, fp
  401cb0:	60a2      	str	r2, [r4, #8]
  401cb2:	6023      	str	r3, [r4, #0]
  401cb4:	4642      	mov	r2, r8
  401cb6:	68b3      	ldr	r3, [r6, #8]
  401cb8:	1a9b      	subs	r3, r3, r2
  401cba:	4492      	add	sl, r2
  401cbc:	ebc2 0808 	rsb	r8, r2, r8
  401cc0:	60b3      	str	r3, [r6, #8]
  401cc2:	2b00      	cmp	r3, #0
  401cc4:	d0c6      	beq.n	401c54 <__sfvwrite_r+0x5c>
  401cc6:	89a3      	ldrh	r3, [r4, #12]
  401cc8:	f1b8 0f00 	cmp.w	r8, #0
  401ccc:	d1db      	bne.n	401c86 <__sfvwrite_r+0x8e>
  401cce:	f8d5 a000 	ldr.w	sl, [r5]
  401cd2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  401cd6:	3508      	adds	r5, #8
  401cd8:	e7d2      	b.n	401c80 <__sfvwrite_r+0x88>
  401cda:	f8d5 a000 	ldr.w	sl, [r5]
  401cde:	f8d5 8004 	ldr.w	r8, [r5, #4]
  401ce2:	3508      	adds	r5, #8
  401ce4:	e7a0      	b.n	401c28 <__sfvwrite_r+0x30>
  401ce6:	4648      	mov	r0, r9
  401ce8:	4621      	mov	r1, r4
  401cea:	f7ff fda5 	bl	401838 <_fflush_r>
  401cee:	2800      	cmp	r0, #0
  401cf0:	d059      	beq.n	401da6 <__sfvwrite_r+0x1ae>
  401cf2:	89a3      	ldrh	r3, [r4, #12]
  401cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401cf8:	f04f 30ff 	mov.w	r0, #4294967295
  401cfc:	81a3      	strh	r3, [r4, #12]
  401cfe:	b003      	add	sp, #12
  401d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d04:	4692      	mov	sl, r2
  401d06:	9201      	str	r2, [sp, #4]
  401d08:	4693      	mov	fp, r2
  401d0a:	4690      	mov	r8, r2
  401d0c:	f1b8 0f00 	cmp.w	r8, #0
  401d10:	d02b      	beq.n	401d6a <__sfvwrite_r+0x172>
  401d12:	9f01      	ldr	r7, [sp, #4]
  401d14:	2f00      	cmp	r7, #0
  401d16:	d064      	beq.n	401de2 <__sfvwrite_r+0x1ea>
  401d18:	6820      	ldr	r0, [r4, #0]
  401d1a:	6921      	ldr	r1, [r4, #16]
  401d1c:	f8d4 c008 	ldr.w	ip, [r4, #8]
  401d20:	6962      	ldr	r2, [r4, #20]
  401d22:	45c2      	cmp	sl, r8
  401d24:	bf34      	ite	cc
  401d26:	4653      	movcc	r3, sl
  401d28:	4643      	movcs	r3, r8
  401d2a:	4288      	cmp	r0, r1
  401d2c:	461f      	mov	r7, r3
  401d2e:	d903      	bls.n	401d38 <__sfvwrite_r+0x140>
  401d30:	4494      	add	ip, r2
  401d32:	4563      	cmp	r3, ip
  401d34:	f300 80ae 	bgt.w	401e94 <__sfvwrite_r+0x29c>
  401d38:	4293      	cmp	r3, r2
  401d3a:	db36      	blt.n	401daa <__sfvwrite_r+0x1b2>
  401d3c:	4613      	mov	r3, r2
  401d3e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401d40:	69e1      	ldr	r1, [r4, #28]
  401d42:	4648      	mov	r0, r9
  401d44:	465a      	mov	r2, fp
  401d46:	47b8      	blx	r7
  401d48:	1e07      	subs	r7, r0, #0
  401d4a:	ddd2      	ble.n	401cf2 <__sfvwrite_r+0xfa>
  401d4c:	ebba 0a07 	subs.w	sl, sl, r7
  401d50:	d03a      	beq.n	401dc8 <__sfvwrite_r+0x1d0>
  401d52:	68b3      	ldr	r3, [r6, #8]
  401d54:	1bdb      	subs	r3, r3, r7
  401d56:	44bb      	add	fp, r7
  401d58:	ebc7 0808 	rsb	r8, r7, r8
  401d5c:	60b3      	str	r3, [r6, #8]
  401d5e:	2b00      	cmp	r3, #0
  401d60:	f43f af78 	beq.w	401c54 <__sfvwrite_r+0x5c>
  401d64:	f1b8 0f00 	cmp.w	r8, #0
  401d68:	d1d3      	bne.n	401d12 <__sfvwrite_r+0x11a>
  401d6a:	2700      	movs	r7, #0
  401d6c:	f8d5 b000 	ldr.w	fp, [r5]
  401d70:	f8d5 8004 	ldr.w	r8, [r5, #4]
  401d74:	9701      	str	r7, [sp, #4]
  401d76:	3508      	adds	r5, #8
  401d78:	e7c8      	b.n	401d0c <__sfvwrite_r+0x114>
  401d7a:	6820      	ldr	r0, [r4, #0]
  401d7c:	6923      	ldr	r3, [r4, #16]
  401d7e:	4298      	cmp	r0, r3
  401d80:	d802      	bhi.n	401d88 <__sfvwrite_r+0x190>
  401d82:	6963      	ldr	r3, [r4, #20]
  401d84:	4598      	cmp	r8, r3
  401d86:	d272      	bcs.n	401e6e <__sfvwrite_r+0x276>
  401d88:	45b8      	cmp	r8, r7
  401d8a:	bf38      	it	cc
  401d8c:	4647      	movcc	r7, r8
  401d8e:	463a      	mov	r2, r7
  401d90:	4651      	mov	r1, sl
  401d92:	f000 fd01 	bl	402798 <memmove>
  401d96:	68a3      	ldr	r3, [r4, #8]
  401d98:	6822      	ldr	r2, [r4, #0]
  401d9a:	1bdb      	subs	r3, r3, r7
  401d9c:	443a      	add	r2, r7
  401d9e:	60a3      	str	r3, [r4, #8]
  401da0:	6022      	str	r2, [r4, #0]
  401da2:	2b00      	cmp	r3, #0
  401da4:	d09f      	beq.n	401ce6 <__sfvwrite_r+0xee>
  401da6:	463a      	mov	r2, r7
  401da8:	e785      	b.n	401cb6 <__sfvwrite_r+0xbe>
  401daa:	461a      	mov	r2, r3
  401dac:	4659      	mov	r1, fp
  401dae:	9300      	str	r3, [sp, #0]
  401db0:	f000 fcf2 	bl	402798 <memmove>
  401db4:	9b00      	ldr	r3, [sp, #0]
  401db6:	68a1      	ldr	r1, [r4, #8]
  401db8:	6822      	ldr	r2, [r4, #0]
  401dba:	1ac9      	subs	r1, r1, r3
  401dbc:	ebba 0a07 	subs.w	sl, sl, r7
  401dc0:	4413      	add	r3, r2
  401dc2:	60a1      	str	r1, [r4, #8]
  401dc4:	6023      	str	r3, [r4, #0]
  401dc6:	d1c4      	bne.n	401d52 <__sfvwrite_r+0x15a>
  401dc8:	4648      	mov	r0, r9
  401dca:	4621      	mov	r1, r4
  401dcc:	f7ff fd34 	bl	401838 <_fflush_r>
  401dd0:	2800      	cmp	r0, #0
  401dd2:	d18e      	bne.n	401cf2 <__sfvwrite_r+0xfa>
  401dd4:	f8cd a004 	str.w	sl, [sp, #4]
  401dd8:	e7bb      	b.n	401d52 <__sfvwrite_r+0x15a>
  401dda:	6820      	ldr	r0, [r4, #0]
  401ddc:	4647      	mov	r7, r8
  401dde:	46c3      	mov	fp, r8
  401de0:	e75d      	b.n	401c9e <__sfvwrite_r+0xa6>
  401de2:	4658      	mov	r0, fp
  401de4:	210a      	movs	r1, #10
  401de6:	4642      	mov	r2, r8
  401de8:	f000 fbf4 	bl	4025d4 <memchr>
  401dec:	2800      	cmp	r0, #0
  401dee:	d07f      	beq.n	401ef0 <__sfvwrite_r+0x2f8>
  401df0:	f100 0a01 	add.w	sl, r0, #1
  401df4:	2701      	movs	r7, #1
  401df6:	ebcb 0a0a 	rsb	sl, fp, sl
  401dfa:	9701      	str	r7, [sp, #4]
  401dfc:	e78c      	b.n	401d18 <__sfvwrite_r+0x120>
  401dfe:	6822      	ldr	r2, [r4, #0]
  401e00:	6921      	ldr	r1, [r4, #16]
  401e02:	6967      	ldr	r7, [r4, #20]
  401e04:	ebc1 0c02 	rsb	ip, r1, r2
  401e08:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  401e0c:	f10c 0201 	add.w	r2, ip, #1
  401e10:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  401e14:	4442      	add	r2, r8
  401e16:	107f      	asrs	r7, r7, #1
  401e18:	4297      	cmp	r7, r2
  401e1a:	bf34      	ite	cc
  401e1c:	4617      	movcc	r7, r2
  401e1e:	463a      	movcs	r2, r7
  401e20:	055b      	lsls	r3, r3, #21
  401e22:	d54f      	bpl.n	401ec4 <__sfvwrite_r+0x2cc>
  401e24:	4611      	mov	r1, r2
  401e26:	4648      	mov	r0, r9
  401e28:	f8cd c000 	str.w	ip, [sp]
  401e2c:	f000 f936 	bl	40209c <_malloc_r>
  401e30:	f8dd c000 	ldr.w	ip, [sp]
  401e34:	4683      	mov	fp, r0
  401e36:	2800      	cmp	r0, #0
  401e38:	d062      	beq.n	401f00 <__sfvwrite_r+0x308>
  401e3a:	4662      	mov	r2, ip
  401e3c:	6921      	ldr	r1, [r4, #16]
  401e3e:	f8cd c000 	str.w	ip, [sp]
  401e42:	f000 fc0f 	bl	402664 <memcpy>
  401e46:	89a2      	ldrh	r2, [r4, #12]
  401e48:	f8dd c000 	ldr.w	ip, [sp]
  401e4c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  401e50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  401e54:	81a2      	strh	r2, [r4, #12]
  401e56:	eb0b 000c 	add.w	r0, fp, ip
  401e5a:	ebcc 0207 	rsb	r2, ip, r7
  401e5e:	f8c4 b010 	str.w	fp, [r4, #16]
  401e62:	6167      	str	r7, [r4, #20]
  401e64:	6020      	str	r0, [r4, #0]
  401e66:	60a2      	str	r2, [r4, #8]
  401e68:	4647      	mov	r7, r8
  401e6a:	46c3      	mov	fp, r8
  401e6c:	e717      	b.n	401c9e <__sfvwrite_r+0xa6>
  401e6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  401e72:	4590      	cmp	r8, r2
  401e74:	bf38      	it	cc
  401e76:	4642      	movcc	r2, r8
  401e78:	fb92 f2f3 	sdiv	r2, r2, r3
  401e7c:	fb02 f303 	mul.w	r3, r2, r3
  401e80:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401e82:	69e1      	ldr	r1, [r4, #28]
  401e84:	4648      	mov	r0, r9
  401e86:	4652      	mov	r2, sl
  401e88:	47b8      	blx	r7
  401e8a:	2800      	cmp	r0, #0
  401e8c:	f77f af31 	ble.w	401cf2 <__sfvwrite_r+0xfa>
  401e90:	4602      	mov	r2, r0
  401e92:	e710      	b.n	401cb6 <__sfvwrite_r+0xbe>
  401e94:	4662      	mov	r2, ip
  401e96:	4659      	mov	r1, fp
  401e98:	f8cd c000 	str.w	ip, [sp]
  401e9c:	f000 fc7c 	bl	402798 <memmove>
  401ea0:	f8dd c000 	ldr.w	ip, [sp]
  401ea4:	6823      	ldr	r3, [r4, #0]
  401ea6:	4463      	add	r3, ip
  401ea8:	6023      	str	r3, [r4, #0]
  401eaa:	4648      	mov	r0, r9
  401eac:	4621      	mov	r1, r4
  401eae:	f8cd c000 	str.w	ip, [sp]
  401eb2:	f7ff fcc1 	bl	401838 <_fflush_r>
  401eb6:	f8dd c000 	ldr.w	ip, [sp]
  401eba:	2800      	cmp	r0, #0
  401ebc:	f47f af19 	bne.w	401cf2 <__sfvwrite_r+0xfa>
  401ec0:	4667      	mov	r7, ip
  401ec2:	e743      	b.n	401d4c <__sfvwrite_r+0x154>
  401ec4:	4648      	mov	r0, r9
  401ec6:	f8cd c000 	str.w	ip, [sp]
  401eca:	f000 fcc9 	bl	402860 <_realloc_r>
  401ece:	f8dd c000 	ldr.w	ip, [sp]
  401ed2:	4683      	mov	fp, r0
  401ed4:	2800      	cmp	r0, #0
  401ed6:	d1be      	bne.n	401e56 <__sfvwrite_r+0x25e>
  401ed8:	4648      	mov	r0, r9
  401eda:	6921      	ldr	r1, [r4, #16]
  401edc:	f7ff fdbe 	bl	401a5c <_free_r>
  401ee0:	89a3      	ldrh	r3, [r4, #12]
  401ee2:	220c      	movs	r2, #12
  401ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401ee8:	b29b      	uxth	r3, r3
  401eea:	f8c9 2000 	str.w	r2, [r9]
  401eee:	e701      	b.n	401cf4 <__sfvwrite_r+0xfc>
  401ef0:	2701      	movs	r7, #1
  401ef2:	f108 0a01 	add.w	sl, r8, #1
  401ef6:	9701      	str	r7, [sp, #4]
  401ef8:	e70e      	b.n	401d18 <__sfvwrite_r+0x120>
  401efa:	f04f 30ff 	mov.w	r0, #4294967295
  401efe:	e6aa      	b.n	401c56 <__sfvwrite_r+0x5e>
  401f00:	230c      	movs	r3, #12
  401f02:	f8c9 3000 	str.w	r3, [r9]
  401f06:	89a3      	ldrh	r3, [r4, #12]
  401f08:	e6f4      	b.n	401cf4 <__sfvwrite_r+0xfc>
  401f0a:	bf00      	nop
  401f0c:	7ffffc00 	.word	0x7ffffc00

00401f10 <_fwalk>:
  401f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401f14:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401f18:	4688      	mov	r8, r1
  401f1a:	d01a      	beq.n	401f52 <_fwalk+0x42>
  401f1c:	2600      	movs	r6, #0
  401f1e:	687d      	ldr	r5, [r7, #4]
  401f20:	68bc      	ldr	r4, [r7, #8]
  401f22:	3d01      	subs	r5, #1
  401f24:	d40f      	bmi.n	401f46 <_fwalk+0x36>
  401f26:	89a3      	ldrh	r3, [r4, #12]
  401f28:	2b01      	cmp	r3, #1
  401f2a:	f105 35ff 	add.w	r5, r5, #4294967295
  401f2e:	d906      	bls.n	401f3e <_fwalk+0x2e>
  401f30:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401f34:	3301      	adds	r3, #1
  401f36:	4620      	mov	r0, r4
  401f38:	d001      	beq.n	401f3e <_fwalk+0x2e>
  401f3a:	47c0      	blx	r8
  401f3c:	4306      	orrs	r6, r0
  401f3e:	1c6b      	adds	r3, r5, #1
  401f40:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401f44:	d1ef      	bne.n	401f26 <_fwalk+0x16>
  401f46:	683f      	ldr	r7, [r7, #0]
  401f48:	2f00      	cmp	r7, #0
  401f4a:	d1e8      	bne.n	401f1e <_fwalk+0xe>
  401f4c:	4630      	mov	r0, r6
  401f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f52:	463e      	mov	r6, r7
  401f54:	4630      	mov	r0, r6
  401f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f5a:	bf00      	nop

00401f5c <_fwalk_reent>:
  401f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401f60:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
  401f64:	4680      	mov	r8, r0
  401f66:	4689      	mov	r9, r1
  401f68:	d01b      	beq.n	401fa2 <_fwalk_reent+0x46>
  401f6a:	2700      	movs	r7, #0
  401f6c:	6875      	ldr	r5, [r6, #4]
  401f6e:	68b4      	ldr	r4, [r6, #8]
  401f70:	3d01      	subs	r5, #1
  401f72:	d410      	bmi.n	401f96 <_fwalk_reent+0x3a>
  401f74:	89a3      	ldrh	r3, [r4, #12]
  401f76:	2b01      	cmp	r3, #1
  401f78:	f105 35ff 	add.w	r5, r5, #4294967295
  401f7c:	d907      	bls.n	401f8e <_fwalk_reent+0x32>
  401f7e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401f82:	3301      	adds	r3, #1
  401f84:	4621      	mov	r1, r4
  401f86:	4640      	mov	r0, r8
  401f88:	d001      	beq.n	401f8e <_fwalk_reent+0x32>
  401f8a:	47c8      	blx	r9
  401f8c:	4307      	orrs	r7, r0
  401f8e:	1c6b      	adds	r3, r5, #1
  401f90:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401f94:	d1ee      	bne.n	401f74 <_fwalk_reent+0x18>
  401f96:	6836      	ldr	r6, [r6, #0]
  401f98:	2e00      	cmp	r6, #0
  401f9a:	d1e7      	bne.n	401f6c <_fwalk_reent+0x10>
  401f9c:	4638      	mov	r0, r7
  401f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401fa2:	4637      	mov	r7, r6
  401fa4:	4638      	mov	r0, r7
  401fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401faa:	bf00      	nop

00401fac <__smakebuf_r>:
  401fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  401fae:	898b      	ldrh	r3, [r1, #12]
  401fb0:	b29a      	uxth	r2, r3
  401fb2:	0796      	lsls	r6, r2, #30
  401fb4:	b091      	sub	sp, #68	; 0x44
  401fb6:	460c      	mov	r4, r1
  401fb8:	4605      	mov	r5, r0
  401fba:	d437      	bmi.n	40202c <__smakebuf_r+0x80>
  401fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401fc0:	2900      	cmp	r1, #0
  401fc2:	db17      	blt.n	401ff4 <__smakebuf_r+0x48>
  401fc4:	aa01      	add	r2, sp, #4
  401fc6:	f000 ffdb 	bl	402f80 <_fstat_r>
  401fca:	2800      	cmp	r0, #0
  401fcc:	db10      	blt.n	401ff0 <__smakebuf_r+0x44>
  401fce:	9b02      	ldr	r3, [sp, #8]
  401fd0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  401fd4:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
  401fd8:	424f      	negs	r7, r1
  401fda:	414f      	adcs	r7, r1
  401fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  401fe0:	d02c      	beq.n	40203c <__smakebuf_r+0x90>
  401fe2:	89a3      	ldrh	r3, [r4, #12]
  401fe4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401fe8:	81a3      	strh	r3, [r4, #12]
  401fea:	f44f 6680 	mov.w	r6, #1024	; 0x400
  401fee:	e00b      	b.n	402008 <__smakebuf_r+0x5c>
  401ff0:	89a3      	ldrh	r3, [r4, #12]
  401ff2:	b29a      	uxth	r2, r3
  401ff4:	f012 0f80 	tst.w	r2, #128	; 0x80
  401ff8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401ffc:	81a3      	strh	r3, [r4, #12]
  401ffe:	bf14      	ite	ne
  402000:	2640      	movne	r6, #64	; 0x40
  402002:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  402006:	2700      	movs	r7, #0
  402008:	4628      	mov	r0, r5
  40200a:	4631      	mov	r1, r6
  40200c:	f000 f846 	bl	40209c <_malloc_r>
  402010:	89a3      	ldrh	r3, [r4, #12]
  402012:	2800      	cmp	r0, #0
  402014:	d029      	beq.n	40206a <__smakebuf_r+0xbe>
  402016:	4a1b      	ldr	r2, [pc, #108]	; (402084 <__smakebuf_r+0xd8>)
  402018:	63ea      	str	r2, [r5, #60]	; 0x3c
  40201a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40201e:	81a3      	strh	r3, [r4, #12]
  402020:	6020      	str	r0, [r4, #0]
  402022:	6120      	str	r0, [r4, #16]
  402024:	6166      	str	r6, [r4, #20]
  402026:	b9a7      	cbnz	r7, 402052 <__smakebuf_r+0xa6>
  402028:	b011      	add	sp, #68	; 0x44
  40202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40202c:	f101 0343 	add.w	r3, r1, #67	; 0x43
  402030:	2201      	movs	r2, #1
  402032:	600b      	str	r3, [r1, #0]
  402034:	610b      	str	r3, [r1, #16]
  402036:	614a      	str	r2, [r1, #20]
  402038:	b011      	add	sp, #68	; 0x44
  40203a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40203c:	4a12      	ldr	r2, [pc, #72]	; (402088 <__smakebuf_r+0xdc>)
  40203e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  402040:	4293      	cmp	r3, r2
  402042:	d1ce      	bne.n	401fe2 <__smakebuf_r+0x36>
  402044:	89a3      	ldrh	r3, [r4, #12]
  402046:	f44f 6680 	mov.w	r6, #1024	; 0x400
  40204a:	4333      	orrs	r3, r6
  40204c:	81a3      	strh	r3, [r4, #12]
  40204e:	64e6      	str	r6, [r4, #76]	; 0x4c
  402050:	e7da      	b.n	402008 <__smakebuf_r+0x5c>
  402052:	4628      	mov	r0, r5
  402054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402058:	f000 ffa6 	bl	402fa8 <_isatty_r>
  40205c:	2800      	cmp	r0, #0
  40205e:	d0e3      	beq.n	402028 <__smakebuf_r+0x7c>
  402060:	89a3      	ldrh	r3, [r4, #12]
  402062:	f043 0301 	orr.w	r3, r3, #1
  402066:	81a3      	strh	r3, [r4, #12]
  402068:	e7de      	b.n	402028 <__smakebuf_r+0x7c>
  40206a:	059a      	lsls	r2, r3, #22
  40206c:	d4dc      	bmi.n	402028 <__smakebuf_r+0x7c>
  40206e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  402072:	f043 0302 	orr.w	r3, r3, #2
  402076:	2101      	movs	r1, #1
  402078:	81a3      	strh	r3, [r4, #12]
  40207a:	6022      	str	r2, [r4, #0]
  40207c:	6122      	str	r2, [r4, #16]
  40207e:	6161      	str	r1, [r4, #20]
  402080:	e7d2      	b.n	402028 <__smakebuf_r+0x7c>
  402082:	bf00      	nop
  402084:	00401889 	.word	0x00401889
  402088:	00402dd5 	.word	0x00402dd5

0040208c <malloc>:
  40208c:	4b02      	ldr	r3, [pc, #8]	; (402098 <malloc+0xc>)
  40208e:	4601      	mov	r1, r0
  402090:	6818      	ldr	r0, [r3, #0]
  402092:	f000 b803 	b.w	40209c <_malloc_r>
  402096:	bf00      	nop
  402098:	20000440 	.word	0x20000440

0040209c <_malloc_r>:
  40209c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4020a0:	f101 050b 	add.w	r5, r1, #11
  4020a4:	2d16      	cmp	r5, #22
  4020a6:	b083      	sub	sp, #12
  4020a8:	4606      	mov	r6, r0
  4020aa:	d927      	bls.n	4020fc <_malloc_r+0x60>
  4020ac:	f035 0507 	bics.w	r5, r5, #7
  4020b0:	d427      	bmi.n	402102 <_malloc_r+0x66>
  4020b2:	42a9      	cmp	r1, r5
  4020b4:	d825      	bhi.n	402102 <_malloc_r+0x66>
  4020b6:	4630      	mov	r0, r6
  4020b8:	f000 fbce 	bl	402858 <__malloc_lock>
  4020bc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4020c0:	d226      	bcs.n	402110 <_malloc_r+0x74>
  4020c2:	4fc1      	ldr	r7, [pc, #772]	; (4023c8 <_malloc_r+0x32c>)
  4020c4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  4020c8:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  4020cc:	68dc      	ldr	r4, [r3, #12]
  4020ce:	429c      	cmp	r4, r3
  4020d0:	f000 81d2 	beq.w	402478 <_malloc_r+0x3dc>
  4020d4:	6863      	ldr	r3, [r4, #4]
  4020d6:	68e2      	ldr	r2, [r4, #12]
  4020d8:	68a1      	ldr	r1, [r4, #8]
  4020da:	f023 0303 	bic.w	r3, r3, #3
  4020de:	4423      	add	r3, r4
  4020e0:	4630      	mov	r0, r6
  4020e2:	685d      	ldr	r5, [r3, #4]
  4020e4:	60ca      	str	r2, [r1, #12]
  4020e6:	f045 0501 	orr.w	r5, r5, #1
  4020ea:	6091      	str	r1, [r2, #8]
  4020ec:	605d      	str	r5, [r3, #4]
  4020ee:	f000 fbb5 	bl	40285c <__malloc_unlock>
  4020f2:	3408      	adds	r4, #8
  4020f4:	4620      	mov	r0, r4
  4020f6:	b003      	add	sp, #12
  4020f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4020fc:	2510      	movs	r5, #16
  4020fe:	42a9      	cmp	r1, r5
  402100:	d9d9      	bls.n	4020b6 <_malloc_r+0x1a>
  402102:	2400      	movs	r4, #0
  402104:	230c      	movs	r3, #12
  402106:	4620      	mov	r0, r4
  402108:	6033      	str	r3, [r6, #0]
  40210a:	b003      	add	sp, #12
  40210c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402110:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  402114:	f000 808a 	beq.w	40222c <_malloc_r+0x190>
  402118:	f1bc 0f04 	cmp.w	ip, #4
  40211c:	f200 8160 	bhi.w	4023e0 <_malloc_r+0x344>
  402120:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  402124:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  402128:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40212c:	4fa6      	ldr	r7, [pc, #664]	; (4023c8 <_malloc_r+0x32c>)
  40212e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  402132:	68cc      	ldr	r4, [r1, #12]
  402134:	42a1      	cmp	r1, r4
  402136:	d105      	bne.n	402144 <_malloc_r+0xa8>
  402138:	e00c      	b.n	402154 <_malloc_r+0xb8>
  40213a:	2b00      	cmp	r3, #0
  40213c:	da7a      	bge.n	402234 <_malloc_r+0x198>
  40213e:	68e4      	ldr	r4, [r4, #12]
  402140:	42a1      	cmp	r1, r4
  402142:	d007      	beq.n	402154 <_malloc_r+0xb8>
  402144:	6862      	ldr	r2, [r4, #4]
  402146:	f022 0203 	bic.w	r2, r2, #3
  40214a:	1b53      	subs	r3, r2, r5
  40214c:	2b0f      	cmp	r3, #15
  40214e:	ddf4      	ble.n	40213a <_malloc_r+0x9e>
  402150:	f10c 3cff 	add.w	ip, ip, #4294967295
  402154:	f10c 0c01 	add.w	ip, ip, #1
  402158:	4b9b      	ldr	r3, [pc, #620]	; (4023c8 <_malloc_r+0x32c>)
  40215a:	693c      	ldr	r4, [r7, #16]
  40215c:	f103 0e08 	add.w	lr, r3, #8
  402160:	4574      	cmp	r4, lr
  402162:	f000 817e 	beq.w	402462 <_malloc_r+0x3c6>
  402166:	6861      	ldr	r1, [r4, #4]
  402168:	f021 0103 	bic.w	r1, r1, #3
  40216c:	1b4a      	subs	r2, r1, r5
  40216e:	2a0f      	cmp	r2, #15
  402170:	f300 8164 	bgt.w	40243c <_malloc_r+0x3a0>
  402174:	2a00      	cmp	r2, #0
  402176:	f8c3 e014 	str.w	lr, [r3, #20]
  40217a:	f8c3 e010 	str.w	lr, [r3, #16]
  40217e:	da6a      	bge.n	402256 <_malloc_r+0x1ba>
  402180:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  402184:	f080 813a 	bcs.w	4023fc <_malloc_r+0x360>
  402188:	08c9      	lsrs	r1, r1, #3
  40218a:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  40218e:	ea4f 08a1 	mov.w	r8, r1, asr #2
  402192:	685a      	ldr	r2, [r3, #4]
  402194:	6881      	ldr	r1, [r0, #8]
  402196:	60a1      	str	r1, [r4, #8]
  402198:	f04f 0901 	mov.w	r9, #1
  40219c:	fa09 f808 	lsl.w	r8, r9, r8
  4021a0:	ea48 0202 	orr.w	r2, r8, r2
  4021a4:	60e0      	str	r0, [r4, #12]
  4021a6:	605a      	str	r2, [r3, #4]
  4021a8:	6084      	str	r4, [r0, #8]
  4021aa:	60cc      	str	r4, [r1, #12]
  4021ac:	ea4f 03ac 	mov.w	r3, ip, asr #2
  4021b0:	2001      	movs	r0, #1
  4021b2:	4098      	lsls	r0, r3
  4021b4:	4290      	cmp	r0, r2
  4021b6:	d85b      	bhi.n	402270 <_malloc_r+0x1d4>
  4021b8:	4202      	tst	r2, r0
  4021ba:	d106      	bne.n	4021ca <_malloc_r+0x12e>
  4021bc:	f02c 0c03 	bic.w	ip, ip, #3
  4021c0:	0040      	lsls	r0, r0, #1
  4021c2:	4202      	tst	r2, r0
  4021c4:	f10c 0c04 	add.w	ip, ip, #4
  4021c8:	d0fa      	beq.n	4021c0 <_malloc_r+0x124>
  4021ca:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  4021ce:	4644      	mov	r4, r8
  4021d0:	46e1      	mov	r9, ip
  4021d2:	68e3      	ldr	r3, [r4, #12]
  4021d4:	429c      	cmp	r4, r3
  4021d6:	d107      	bne.n	4021e8 <_malloc_r+0x14c>
  4021d8:	e145      	b.n	402466 <_malloc_r+0x3ca>
  4021da:	2a00      	cmp	r2, #0
  4021dc:	f280 8156 	bge.w	40248c <_malloc_r+0x3f0>
  4021e0:	68db      	ldr	r3, [r3, #12]
  4021e2:	429c      	cmp	r4, r3
  4021e4:	f000 813f 	beq.w	402466 <_malloc_r+0x3ca>
  4021e8:	6859      	ldr	r1, [r3, #4]
  4021ea:	f021 0103 	bic.w	r1, r1, #3
  4021ee:	1b4a      	subs	r2, r1, r5
  4021f0:	2a0f      	cmp	r2, #15
  4021f2:	ddf2      	ble.n	4021da <_malloc_r+0x13e>
  4021f4:	461c      	mov	r4, r3
  4021f6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4021fa:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4021fe:	1959      	adds	r1, r3, r5
  402200:	f045 0901 	orr.w	r9, r5, #1
  402204:	f042 0501 	orr.w	r5, r2, #1
  402208:	f8c3 9004 	str.w	r9, [r3, #4]
  40220c:	4630      	mov	r0, r6
  40220e:	f8c8 c00c 	str.w	ip, [r8, #12]
  402212:	f8cc 8008 	str.w	r8, [ip, #8]
  402216:	6179      	str	r1, [r7, #20]
  402218:	6139      	str	r1, [r7, #16]
  40221a:	f8c1 e00c 	str.w	lr, [r1, #12]
  40221e:	f8c1 e008 	str.w	lr, [r1, #8]
  402222:	604d      	str	r5, [r1, #4]
  402224:	508a      	str	r2, [r1, r2]
  402226:	f000 fb19 	bl	40285c <__malloc_unlock>
  40222a:	e763      	b.n	4020f4 <_malloc_r+0x58>
  40222c:	217e      	movs	r1, #126	; 0x7e
  40222e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  402232:	e77b      	b.n	40212c <_malloc_r+0x90>
  402234:	4422      	add	r2, r4
  402236:	68e3      	ldr	r3, [r4, #12]
  402238:	6850      	ldr	r0, [r2, #4]
  40223a:	68a1      	ldr	r1, [r4, #8]
  40223c:	f040 0501 	orr.w	r5, r0, #1
  402240:	60cb      	str	r3, [r1, #12]
  402242:	4630      	mov	r0, r6
  402244:	6099      	str	r1, [r3, #8]
  402246:	6055      	str	r5, [r2, #4]
  402248:	f000 fb08 	bl	40285c <__malloc_unlock>
  40224c:	3408      	adds	r4, #8
  40224e:	4620      	mov	r0, r4
  402250:	b003      	add	sp, #12
  402252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402256:	4421      	add	r1, r4
  402258:	4630      	mov	r0, r6
  40225a:	684b      	ldr	r3, [r1, #4]
  40225c:	f043 0301 	orr.w	r3, r3, #1
  402260:	604b      	str	r3, [r1, #4]
  402262:	f000 fafb 	bl	40285c <__malloc_unlock>
  402266:	3408      	adds	r4, #8
  402268:	4620      	mov	r0, r4
  40226a:	b003      	add	sp, #12
  40226c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402270:	68bc      	ldr	r4, [r7, #8]
  402272:	6863      	ldr	r3, [r4, #4]
  402274:	f023 0903 	bic.w	r9, r3, #3
  402278:	45a9      	cmp	r9, r5
  40227a:	d304      	bcc.n	402286 <_malloc_r+0x1ea>
  40227c:	ebc5 0309 	rsb	r3, r5, r9
  402280:	2b0f      	cmp	r3, #15
  402282:	f300 8091 	bgt.w	4023a8 <_malloc_r+0x30c>
  402286:	4b51      	ldr	r3, [pc, #324]	; (4023cc <_malloc_r+0x330>)
  402288:	4a51      	ldr	r2, [pc, #324]	; (4023d0 <_malloc_r+0x334>)
  40228a:	6819      	ldr	r1, [r3, #0]
  40228c:	6813      	ldr	r3, [r2, #0]
  40228e:	3301      	adds	r3, #1
  402290:	eb05 0a01 	add.w	sl, r5, r1
  402294:	eb04 0b09 	add.w	fp, r4, r9
  402298:	f000 8161 	beq.w	40255e <_malloc_r+0x4c2>
  40229c:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  4022a0:	f10a 0a0f 	add.w	sl, sl, #15
  4022a4:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  4022a8:	f02a 0a0f 	bic.w	sl, sl, #15
  4022ac:	4630      	mov	r0, r6
  4022ae:	4651      	mov	r1, sl
  4022b0:	9201      	str	r2, [sp, #4]
  4022b2:	f000 fd4f 	bl	402d54 <_sbrk_r>
  4022b6:	f1b0 3fff 	cmp.w	r0, #4294967295
  4022ba:	4680      	mov	r8, r0
  4022bc:	9a01      	ldr	r2, [sp, #4]
  4022be:	f000 8100 	beq.w	4024c2 <_malloc_r+0x426>
  4022c2:	4583      	cmp	fp, r0
  4022c4:	f200 80fa 	bhi.w	4024bc <_malloc_r+0x420>
  4022c8:	f8df c110 	ldr.w	ip, [pc, #272]	; 4023dc <_malloc_r+0x340>
  4022cc:	f8dc 3000 	ldr.w	r3, [ip]
  4022d0:	45c3      	cmp	fp, r8
  4022d2:	4453      	add	r3, sl
  4022d4:	f8cc 3000 	str.w	r3, [ip]
  4022d8:	f000 814a 	beq.w	402570 <_malloc_r+0x4d4>
  4022dc:	6812      	ldr	r2, [r2, #0]
  4022de:	493c      	ldr	r1, [pc, #240]	; (4023d0 <_malloc_r+0x334>)
  4022e0:	3201      	adds	r2, #1
  4022e2:	bf1b      	ittet	ne
  4022e4:	ebcb 0b08 	rsbne	fp, fp, r8
  4022e8:	445b      	addne	r3, fp
  4022ea:	f8c1 8000 	streq.w	r8, [r1]
  4022ee:	f8cc 3000 	strne.w	r3, [ip]
  4022f2:	f018 0307 	ands.w	r3, r8, #7
  4022f6:	f000 8113 	beq.w	402520 <_malloc_r+0x484>
  4022fa:	f1c3 0208 	rsb	r2, r3, #8
  4022fe:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  402302:	4490      	add	r8, r2
  402304:	3308      	adds	r3, #8
  402306:	44c2      	add	sl, r8
  402308:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  40230c:	ebca 0a03 	rsb	sl, sl, r3
  402310:	4651      	mov	r1, sl
  402312:	4630      	mov	r0, r6
  402314:	f8cd c004 	str.w	ip, [sp, #4]
  402318:	f000 fd1c 	bl	402d54 <_sbrk_r>
  40231c:	1c43      	adds	r3, r0, #1
  40231e:	f8dd c004 	ldr.w	ip, [sp, #4]
  402322:	f000 8135 	beq.w	402590 <_malloc_r+0x4f4>
  402326:	ebc8 0200 	rsb	r2, r8, r0
  40232a:	4452      	add	r2, sl
  40232c:	f042 0201 	orr.w	r2, r2, #1
  402330:	f8dc 3000 	ldr.w	r3, [ip]
  402334:	f8c7 8008 	str.w	r8, [r7, #8]
  402338:	4453      	add	r3, sl
  40233a:	42bc      	cmp	r4, r7
  40233c:	f8c8 2004 	str.w	r2, [r8, #4]
  402340:	f8cc 3000 	str.w	r3, [ip]
  402344:	f8df a094 	ldr.w	sl, [pc, #148]	; 4023dc <_malloc_r+0x340>
  402348:	d015      	beq.n	402376 <_malloc_r+0x2da>
  40234a:	f1b9 0f0f 	cmp.w	r9, #15
  40234e:	f240 80ea 	bls.w	402526 <_malloc_r+0x48a>
  402352:	6861      	ldr	r1, [r4, #4]
  402354:	f1a9 020c 	sub.w	r2, r9, #12
  402358:	f022 0207 	bic.w	r2, r2, #7
  40235c:	f001 0e01 	and.w	lr, r1, #1
  402360:	18a1      	adds	r1, r4, r2
  402362:	2005      	movs	r0, #5
  402364:	ea42 0e0e 	orr.w	lr, r2, lr
  402368:	2a0f      	cmp	r2, #15
  40236a:	f8c4 e004 	str.w	lr, [r4, #4]
  40236e:	6048      	str	r0, [r1, #4]
  402370:	6088      	str	r0, [r1, #8]
  402372:	f200 8111 	bhi.w	402598 <_malloc_r+0x4fc>
  402376:	4a17      	ldr	r2, [pc, #92]	; (4023d4 <_malloc_r+0x338>)
  402378:	68bc      	ldr	r4, [r7, #8]
  40237a:	6811      	ldr	r1, [r2, #0]
  40237c:	428b      	cmp	r3, r1
  40237e:	bf88      	it	hi
  402380:	6013      	strhi	r3, [r2, #0]
  402382:	4a15      	ldr	r2, [pc, #84]	; (4023d8 <_malloc_r+0x33c>)
  402384:	6811      	ldr	r1, [r2, #0]
  402386:	428b      	cmp	r3, r1
  402388:	bf88      	it	hi
  40238a:	6013      	strhi	r3, [r2, #0]
  40238c:	6862      	ldr	r2, [r4, #4]
  40238e:	f022 0203 	bic.w	r2, r2, #3
  402392:	4295      	cmp	r5, r2
  402394:	ebc5 0302 	rsb	r3, r5, r2
  402398:	d801      	bhi.n	40239e <_malloc_r+0x302>
  40239a:	2b0f      	cmp	r3, #15
  40239c:	dc04      	bgt.n	4023a8 <_malloc_r+0x30c>
  40239e:	4630      	mov	r0, r6
  4023a0:	f000 fa5c 	bl	40285c <__malloc_unlock>
  4023a4:	2400      	movs	r4, #0
  4023a6:	e6a5      	b.n	4020f4 <_malloc_r+0x58>
  4023a8:	1962      	adds	r2, r4, r5
  4023aa:	f043 0301 	orr.w	r3, r3, #1
  4023ae:	f045 0501 	orr.w	r5, r5, #1
  4023b2:	6065      	str	r5, [r4, #4]
  4023b4:	4630      	mov	r0, r6
  4023b6:	60ba      	str	r2, [r7, #8]
  4023b8:	6053      	str	r3, [r2, #4]
  4023ba:	f000 fa4f 	bl	40285c <__malloc_unlock>
  4023be:	3408      	adds	r4, #8
  4023c0:	4620      	mov	r0, r4
  4023c2:	b003      	add	sp, #12
  4023c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023c8:	20000444 	.word	0x20000444
  4023cc:	200008f4 	.word	0x200008f4
  4023d0:	20000850 	.word	0x20000850
  4023d4:	200008f0 	.word	0x200008f0
  4023d8:	200008ec 	.word	0x200008ec
  4023dc:	200008f8 	.word	0x200008f8
  4023e0:	f1bc 0f14 	cmp.w	ip, #20
  4023e4:	d961      	bls.n	4024aa <_malloc_r+0x40e>
  4023e6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  4023ea:	f200 808f 	bhi.w	40250c <_malloc_r+0x470>
  4023ee:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  4023f2:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  4023f6:	ea4f 014c 	mov.w	r1, ip, lsl #1
  4023fa:	e697      	b.n	40212c <_malloc_r+0x90>
  4023fc:	0a4b      	lsrs	r3, r1, #9
  4023fe:	2b04      	cmp	r3, #4
  402400:	d958      	bls.n	4024b4 <_malloc_r+0x418>
  402402:	2b14      	cmp	r3, #20
  402404:	f200 80ae 	bhi.w	402564 <_malloc_r+0x4c8>
  402408:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  40240c:	0050      	lsls	r0, r2, #1
  40240e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  402412:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 4025d0 <_malloc_r+0x534>
  402416:	6883      	ldr	r3, [r0, #8]
  402418:	4283      	cmp	r3, r0
  40241a:	f000 808a 	beq.w	402532 <_malloc_r+0x496>
  40241e:	685a      	ldr	r2, [r3, #4]
  402420:	f022 0203 	bic.w	r2, r2, #3
  402424:	4291      	cmp	r1, r2
  402426:	d202      	bcs.n	40242e <_malloc_r+0x392>
  402428:	689b      	ldr	r3, [r3, #8]
  40242a:	4298      	cmp	r0, r3
  40242c:	d1f7      	bne.n	40241e <_malloc_r+0x382>
  40242e:	68d9      	ldr	r1, [r3, #12]
  402430:	687a      	ldr	r2, [r7, #4]
  402432:	60e1      	str	r1, [r4, #12]
  402434:	60a3      	str	r3, [r4, #8]
  402436:	608c      	str	r4, [r1, #8]
  402438:	60dc      	str	r4, [r3, #12]
  40243a:	e6b7      	b.n	4021ac <_malloc_r+0x110>
  40243c:	1961      	adds	r1, r4, r5
  40243e:	f042 0701 	orr.w	r7, r2, #1
  402442:	f045 0501 	orr.w	r5, r5, #1
  402446:	6065      	str	r5, [r4, #4]
  402448:	4630      	mov	r0, r6
  40244a:	6159      	str	r1, [r3, #20]
  40244c:	6119      	str	r1, [r3, #16]
  40244e:	f8c1 e00c 	str.w	lr, [r1, #12]
  402452:	f8c1 e008 	str.w	lr, [r1, #8]
  402456:	604f      	str	r7, [r1, #4]
  402458:	508a      	str	r2, [r1, r2]
  40245a:	3408      	adds	r4, #8
  40245c:	f000 f9fe 	bl	40285c <__malloc_unlock>
  402460:	e648      	b.n	4020f4 <_malloc_r+0x58>
  402462:	685a      	ldr	r2, [r3, #4]
  402464:	e6a2      	b.n	4021ac <_malloc_r+0x110>
  402466:	f109 0901 	add.w	r9, r9, #1
  40246a:	f019 0f03 	tst.w	r9, #3
  40246e:	f104 0408 	add.w	r4, r4, #8
  402472:	f47f aeae 	bne.w	4021d2 <_malloc_r+0x136>
  402476:	e02d      	b.n	4024d4 <_malloc_r+0x438>
  402478:	f104 0308 	add.w	r3, r4, #8
  40247c:	6964      	ldr	r4, [r4, #20]
  40247e:	42a3      	cmp	r3, r4
  402480:	bf08      	it	eq
  402482:	f10c 0c02 	addeq.w	ip, ip, #2
  402486:	f43f ae67 	beq.w	402158 <_malloc_r+0xbc>
  40248a:	e623      	b.n	4020d4 <_malloc_r+0x38>
  40248c:	4419      	add	r1, r3
  40248e:	461c      	mov	r4, r3
  402490:	6848      	ldr	r0, [r1, #4]
  402492:	68db      	ldr	r3, [r3, #12]
  402494:	f854 2f08 	ldr.w	r2, [r4, #8]!
  402498:	f040 0501 	orr.w	r5, r0, #1
  40249c:	604d      	str	r5, [r1, #4]
  40249e:	4630      	mov	r0, r6
  4024a0:	60d3      	str	r3, [r2, #12]
  4024a2:	609a      	str	r2, [r3, #8]
  4024a4:	f000 f9da 	bl	40285c <__malloc_unlock>
  4024a8:	e624      	b.n	4020f4 <_malloc_r+0x58>
  4024aa:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  4024ae:	ea4f 014c 	mov.w	r1, ip, lsl #1
  4024b2:	e63b      	b.n	40212c <_malloc_r+0x90>
  4024b4:	098a      	lsrs	r2, r1, #6
  4024b6:	3238      	adds	r2, #56	; 0x38
  4024b8:	0050      	lsls	r0, r2, #1
  4024ba:	e7a8      	b.n	40240e <_malloc_r+0x372>
  4024bc:	42bc      	cmp	r4, r7
  4024be:	f43f af03 	beq.w	4022c8 <_malloc_r+0x22c>
  4024c2:	68bc      	ldr	r4, [r7, #8]
  4024c4:	6862      	ldr	r2, [r4, #4]
  4024c6:	f022 0203 	bic.w	r2, r2, #3
  4024ca:	e762      	b.n	402392 <_malloc_r+0x2f6>
  4024cc:	f8d8 8000 	ldr.w	r8, [r8]
  4024d0:	4598      	cmp	r8, r3
  4024d2:	d17b      	bne.n	4025cc <_malloc_r+0x530>
  4024d4:	f01c 0f03 	tst.w	ip, #3
  4024d8:	f1a8 0308 	sub.w	r3, r8, #8
  4024dc:	f10c 3cff 	add.w	ip, ip, #4294967295
  4024e0:	d1f4      	bne.n	4024cc <_malloc_r+0x430>
  4024e2:	687b      	ldr	r3, [r7, #4]
  4024e4:	ea23 0300 	bic.w	r3, r3, r0
  4024e8:	607b      	str	r3, [r7, #4]
  4024ea:	0040      	lsls	r0, r0, #1
  4024ec:	4298      	cmp	r0, r3
  4024ee:	f63f aebf 	bhi.w	402270 <_malloc_r+0x1d4>
  4024f2:	2800      	cmp	r0, #0
  4024f4:	f43f aebc 	beq.w	402270 <_malloc_r+0x1d4>
  4024f8:	4203      	tst	r3, r0
  4024fa:	46cc      	mov	ip, r9
  4024fc:	f47f ae65 	bne.w	4021ca <_malloc_r+0x12e>
  402500:	0040      	lsls	r0, r0, #1
  402502:	4203      	tst	r3, r0
  402504:	f10c 0c04 	add.w	ip, ip, #4
  402508:	d0fa      	beq.n	402500 <_malloc_r+0x464>
  40250a:	e65e      	b.n	4021ca <_malloc_r+0x12e>
  40250c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  402510:	d81a      	bhi.n	402548 <_malloc_r+0x4ac>
  402512:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  402516:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  40251a:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40251e:	e605      	b.n	40212c <_malloc_r+0x90>
  402520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402524:	e6ef      	b.n	402306 <_malloc_r+0x26a>
  402526:	2301      	movs	r3, #1
  402528:	f8c8 3004 	str.w	r3, [r8, #4]
  40252c:	4644      	mov	r4, r8
  40252e:	2200      	movs	r2, #0
  402530:	e72f      	b.n	402392 <_malloc_r+0x2f6>
  402532:	1091      	asrs	r1, r2, #2
  402534:	2001      	movs	r0, #1
  402536:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40253a:	fa00 f101 	lsl.w	r1, r0, r1
  40253e:	430a      	orrs	r2, r1
  402540:	f8c8 2004 	str.w	r2, [r8, #4]
  402544:	4619      	mov	r1, r3
  402546:	e774      	b.n	402432 <_malloc_r+0x396>
  402548:	f240 5354 	movw	r3, #1364	; 0x554
  40254c:	459c      	cmp	ip, r3
  40254e:	d81b      	bhi.n	402588 <_malloc_r+0x4ec>
  402550:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  402554:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  402558:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40255c:	e5e6      	b.n	40212c <_malloc_r+0x90>
  40255e:	f10a 0a10 	add.w	sl, sl, #16
  402562:	e6a3      	b.n	4022ac <_malloc_r+0x210>
  402564:	2b54      	cmp	r3, #84	; 0x54
  402566:	d81f      	bhi.n	4025a8 <_malloc_r+0x50c>
  402568:	0b0a      	lsrs	r2, r1, #12
  40256a:	326e      	adds	r2, #110	; 0x6e
  40256c:	0050      	lsls	r0, r2, #1
  40256e:	e74e      	b.n	40240e <_malloc_r+0x372>
  402570:	f3cb 010b 	ubfx	r1, fp, #0, #12
  402574:	2900      	cmp	r1, #0
  402576:	f47f aeb1 	bne.w	4022dc <_malloc_r+0x240>
  40257a:	eb0a 0109 	add.w	r1, sl, r9
  40257e:	68ba      	ldr	r2, [r7, #8]
  402580:	f041 0101 	orr.w	r1, r1, #1
  402584:	6051      	str	r1, [r2, #4]
  402586:	e6f6      	b.n	402376 <_malloc_r+0x2da>
  402588:	21fc      	movs	r1, #252	; 0xfc
  40258a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40258e:	e5cd      	b.n	40212c <_malloc_r+0x90>
  402590:	2201      	movs	r2, #1
  402592:	f04f 0a00 	mov.w	sl, #0
  402596:	e6cb      	b.n	402330 <_malloc_r+0x294>
  402598:	f104 0108 	add.w	r1, r4, #8
  40259c:	4630      	mov	r0, r6
  40259e:	f7ff fa5d 	bl	401a5c <_free_r>
  4025a2:	f8da 3000 	ldr.w	r3, [sl]
  4025a6:	e6e6      	b.n	402376 <_malloc_r+0x2da>
  4025a8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4025ac:	d803      	bhi.n	4025b6 <_malloc_r+0x51a>
  4025ae:	0bca      	lsrs	r2, r1, #15
  4025b0:	3277      	adds	r2, #119	; 0x77
  4025b2:	0050      	lsls	r0, r2, #1
  4025b4:	e72b      	b.n	40240e <_malloc_r+0x372>
  4025b6:	f240 5254 	movw	r2, #1364	; 0x554
  4025ba:	4293      	cmp	r3, r2
  4025bc:	d803      	bhi.n	4025c6 <_malloc_r+0x52a>
  4025be:	0c8a      	lsrs	r2, r1, #18
  4025c0:	327c      	adds	r2, #124	; 0x7c
  4025c2:	0050      	lsls	r0, r2, #1
  4025c4:	e723      	b.n	40240e <_malloc_r+0x372>
  4025c6:	20fc      	movs	r0, #252	; 0xfc
  4025c8:	227e      	movs	r2, #126	; 0x7e
  4025ca:	e720      	b.n	40240e <_malloc_r+0x372>
  4025cc:	687b      	ldr	r3, [r7, #4]
  4025ce:	e78c      	b.n	4024ea <_malloc_r+0x44e>
  4025d0:	20000444 	.word	0x20000444

004025d4 <memchr>:
  4025d4:	0783      	lsls	r3, r0, #30
  4025d6:	b470      	push	{r4, r5, r6}
  4025d8:	b2c9      	uxtb	r1, r1
  4025da:	d03f      	beq.n	40265c <memchr+0x88>
  4025dc:	1e54      	subs	r4, r2, #1
  4025de:	b32a      	cbz	r2, 40262c <memchr+0x58>
  4025e0:	7803      	ldrb	r3, [r0, #0]
  4025e2:	428b      	cmp	r3, r1
  4025e4:	d023      	beq.n	40262e <memchr+0x5a>
  4025e6:	1c43      	adds	r3, r0, #1
  4025e8:	e004      	b.n	4025f4 <memchr+0x20>
  4025ea:	b1fc      	cbz	r4, 40262c <memchr+0x58>
  4025ec:	7804      	ldrb	r4, [r0, #0]
  4025ee:	428c      	cmp	r4, r1
  4025f0:	d01d      	beq.n	40262e <memchr+0x5a>
  4025f2:	4614      	mov	r4, r2
  4025f4:	f013 0f03 	tst.w	r3, #3
  4025f8:	4618      	mov	r0, r3
  4025fa:	f104 32ff 	add.w	r2, r4, #4294967295
  4025fe:	f103 0301 	add.w	r3, r3, #1
  402602:	d1f2      	bne.n	4025ea <memchr+0x16>
  402604:	2c03      	cmp	r4, #3
  402606:	d814      	bhi.n	402632 <memchr+0x5e>
  402608:	1e65      	subs	r5, r4, #1
  40260a:	b34c      	cbz	r4, 402660 <memchr+0x8c>
  40260c:	7803      	ldrb	r3, [r0, #0]
  40260e:	428b      	cmp	r3, r1
  402610:	d00d      	beq.n	40262e <memchr+0x5a>
  402612:	1c42      	adds	r2, r0, #1
  402614:	2300      	movs	r3, #0
  402616:	e002      	b.n	40261e <memchr+0x4a>
  402618:	7804      	ldrb	r4, [r0, #0]
  40261a:	428c      	cmp	r4, r1
  40261c:	d007      	beq.n	40262e <memchr+0x5a>
  40261e:	42ab      	cmp	r3, r5
  402620:	4610      	mov	r0, r2
  402622:	f103 0301 	add.w	r3, r3, #1
  402626:	f102 0201 	add.w	r2, r2, #1
  40262a:	d1f5      	bne.n	402618 <memchr+0x44>
  40262c:	2000      	movs	r0, #0
  40262e:	bc70      	pop	{r4, r5, r6}
  402630:	4770      	bx	lr
  402632:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  402636:	4603      	mov	r3, r0
  402638:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40263c:	4618      	mov	r0, r3
  40263e:	3304      	adds	r3, #4
  402640:	6802      	ldr	r2, [r0, #0]
  402642:	4072      	eors	r2, r6
  402644:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  402648:	ea25 0202 	bic.w	r2, r5, r2
  40264c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402650:	d1da      	bne.n	402608 <memchr+0x34>
  402652:	3c04      	subs	r4, #4
  402654:	2c03      	cmp	r4, #3
  402656:	4618      	mov	r0, r3
  402658:	d8f0      	bhi.n	40263c <memchr+0x68>
  40265a:	e7d5      	b.n	402608 <memchr+0x34>
  40265c:	4614      	mov	r4, r2
  40265e:	e7d1      	b.n	402604 <memchr+0x30>
  402660:	4620      	mov	r0, r4
  402662:	e7e4      	b.n	40262e <memchr+0x5a>

00402664 <memcpy>:
  402664:	4684      	mov	ip, r0
  402666:	ea41 0300 	orr.w	r3, r1, r0
  40266a:	f013 0303 	ands.w	r3, r3, #3
  40266e:	d16d      	bne.n	40274c <memcpy+0xe8>
  402670:	3a40      	subs	r2, #64	; 0x40
  402672:	d341      	bcc.n	4026f8 <memcpy+0x94>
  402674:	f851 3b04 	ldr.w	r3, [r1], #4
  402678:	f840 3b04 	str.w	r3, [r0], #4
  40267c:	f851 3b04 	ldr.w	r3, [r1], #4
  402680:	f840 3b04 	str.w	r3, [r0], #4
  402684:	f851 3b04 	ldr.w	r3, [r1], #4
  402688:	f840 3b04 	str.w	r3, [r0], #4
  40268c:	f851 3b04 	ldr.w	r3, [r1], #4
  402690:	f840 3b04 	str.w	r3, [r0], #4
  402694:	f851 3b04 	ldr.w	r3, [r1], #4
  402698:	f840 3b04 	str.w	r3, [r0], #4
  40269c:	f851 3b04 	ldr.w	r3, [r1], #4
  4026a0:	f840 3b04 	str.w	r3, [r0], #4
  4026a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4026a8:	f840 3b04 	str.w	r3, [r0], #4
  4026ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4026b0:	f840 3b04 	str.w	r3, [r0], #4
  4026b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4026b8:	f840 3b04 	str.w	r3, [r0], #4
  4026bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4026c0:	f840 3b04 	str.w	r3, [r0], #4
  4026c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4026c8:	f840 3b04 	str.w	r3, [r0], #4
  4026cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4026d0:	f840 3b04 	str.w	r3, [r0], #4
  4026d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4026d8:	f840 3b04 	str.w	r3, [r0], #4
  4026dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4026e0:	f840 3b04 	str.w	r3, [r0], #4
  4026e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4026e8:	f840 3b04 	str.w	r3, [r0], #4
  4026ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4026f0:	f840 3b04 	str.w	r3, [r0], #4
  4026f4:	3a40      	subs	r2, #64	; 0x40
  4026f6:	d2bd      	bcs.n	402674 <memcpy+0x10>
  4026f8:	3230      	adds	r2, #48	; 0x30
  4026fa:	d311      	bcc.n	402720 <memcpy+0xbc>
  4026fc:	f851 3b04 	ldr.w	r3, [r1], #4
  402700:	f840 3b04 	str.w	r3, [r0], #4
  402704:	f851 3b04 	ldr.w	r3, [r1], #4
  402708:	f840 3b04 	str.w	r3, [r0], #4
  40270c:	f851 3b04 	ldr.w	r3, [r1], #4
  402710:	f840 3b04 	str.w	r3, [r0], #4
  402714:	f851 3b04 	ldr.w	r3, [r1], #4
  402718:	f840 3b04 	str.w	r3, [r0], #4
  40271c:	3a10      	subs	r2, #16
  40271e:	d2ed      	bcs.n	4026fc <memcpy+0x98>
  402720:	320c      	adds	r2, #12
  402722:	d305      	bcc.n	402730 <memcpy+0xcc>
  402724:	f851 3b04 	ldr.w	r3, [r1], #4
  402728:	f840 3b04 	str.w	r3, [r0], #4
  40272c:	3a04      	subs	r2, #4
  40272e:	d2f9      	bcs.n	402724 <memcpy+0xc0>
  402730:	3204      	adds	r2, #4
  402732:	d008      	beq.n	402746 <memcpy+0xe2>
  402734:	07d2      	lsls	r2, r2, #31
  402736:	bf1c      	itt	ne
  402738:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40273c:	f800 3b01 	strbne.w	r3, [r0], #1
  402740:	d301      	bcc.n	402746 <memcpy+0xe2>
  402742:	880b      	ldrh	r3, [r1, #0]
  402744:	8003      	strh	r3, [r0, #0]
  402746:	4660      	mov	r0, ip
  402748:	4770      	bx	lr
  40274a:	bf00      	nop
  40274c:	2a08      	cmp	r2, #8
  40274e:	d313      	bcc.n	402778 <memcpy+0x114>
  402750:	078b      	lsls	r3, r1, #30
  402752:	d08d      	beq.n	402670 <memcpy+0xc>
  402754:	f010 0303 	ands.w	r3, r0, #3
  402758:	d08a      	beq.n	402670 <memcpy+0xc>
  40275a:	f1c3 0304 	rsb	r3, r3, #4
  40275e:	1ad2      	subs	r2, r2, r3
  402760:	07db      	lsls	r3, r3, #31
  402762:	bf1c      	itt	ne
  402764:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402768:	f800 3b01 	strbne.w	r3, [r0], #1
  40276c:	d380      	bcc.n	402670 <memcpy+0xc>
  40276e:	f831 3b02 	ldrh.w	r3, [r1], #2
  402772:	f820 3b02 	strh.w	r3, [r0], #2
  402776:	e77b      	b.n	402670 <memcpy+0xc>
  402778:	3a04      	subs	r2, #4
  40277a:	d3d9      	bcc.n	402730 <memcpy+0xcc>
  40277c:	3a01      	subs	r2, #1
  40277e:	f811 3b01 	ldrb.w	r3, [r1], #1
  402782:	f800 3b01 	strb.w	r3, [r0], #1
  402786:	d2f9      	bcs.n	40277c <memcpy+0x118>
  402788:	780b      	ldrb	r3, [r1, #0]
  40278a:	7003      	strb	r3, [r0, #0]
  40278c:	784b      	ldrb	r3, [r1, #1]
  40278e:	7043      	strb	r3, [r0, #1]
  402790:	788b      	ldrb	r3, [r1, #2]
  402792:	7083      	strb	r3, [r0, #2]
  402794:	4660      	mov	r0, ip
  402796:	4770      	bx	lr

00402798 <memmove>:
  402798:	4288      	cmp	r0, r1
  40279a:	b4f0      	push	{r4, r5, r6, r7}
  40279c:	d910      	bls.n	4027c0 <memmove+0x28>
  40279e:	188c      	adds	r4, r1, r2
  4027a0:	42a0      	cmp	r0, r4
  4027a2:	d20d      	bcs.n	4027c0 <memmove+0x28>
  4027a4:	1885      	adds	r5, r0, r2
  4027a6:	1e53      	subs	r3, r2, #1
  4027a8:	b142      	cbz	r2, 4027bc <memmove+0x24>
  4027aa:	4621      	mov	r1, r4
  4027ac:	462a      	mov	r2, r5
  4027ae:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  4027b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4027b6:	3b01      	subs	r3, #1
  4027b8:	1c5c      	adds	r4, r3, #1
  4027ba:	d1f8      	bne.n	4027ae <memmove+0x16>
  4027bc:	bcf0      	pop	{r4, r5, r6, r7}
  4027be:	4770      	bx	lr
  4027c0:	2a0f      	cmp	r2, #15
  4027c2:	d93f      	bls.n	402844 <memmove+0xac>
  4027c4:	ea40 0301 	orr.w	r3, r0, r1
  4027c8:	079b      	lsls	r3, r3, #30
  4027ca:	d13f      	bne.n	40284c <memmove+0xb4>
  4027cc:	f1a2 0710 	sub.w	r7, r2, #16
  4027d0:	093f      	lsrs	r7, r7, #4
  4027d2:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  4027d6:	3610      	adds	r6, #16
  4027d8:	460c      	mov	r4, r1
  4027da:	4603      	mov	r3, r0
  4027dc:	6825      	ldr	r5, [r4, #0]
  4027de:	601d      	str	r5, [r3, #0]
  4027e0:	6865      	ldr	r5, [r4, #4]
  4027e2:	605d      	str	r5, [r3, #4]
  4027e4:	68a5      	ldr	r5, [r4, #8]
  4027e6:	609d      	str	r5, [r3, #8]
  4027e8:	68e5      	ldr	r5, [r4, #12]
  4027ea:	60dd      	str	r5, [r3, #12]
  4027ec:	3310      	adds	r3, #16
  4027ee:	42b3      	cmp	r3, r6
  4027f0:	f104 0410 	add.w	r4, r4, #16
  4027f4:	d1f2      	bne.n	4027dc <memmove+0x44>
  4027f6:	1c7b      	adds	r3, r7, #1
  4027f8:	f002 0c0f 	and.w	ip, r2, #15
  4027fc:	011b      	lsls	r3, r3, #4
  4027fe:	f1bc 0f03 	cmp.w	ip, #3
  402802:	4419      	add	r1, r3
  402804:	4403      	add	r3, r0
  402806:	d923      	bls.n	402850 <memmove+0xb8>
  402808:	460e      	mov	r6, r1
  40280a:	461d      	mov	r5, r3
  40280c:	4664      	mov	r4, ip
  40280e:	3c04      	subs	r4, #4
  402810:	f856 7b04 	ldr.w	r7, [r6], #4
  402814:	f845 7b04 	str.w	r7, [r5], #4
  402818:	2c03      	cmp	r4, #3
  40281a:	d8f8      	bhi.n	40280e <memmove+0x76>
  40281c:	f1ac 0404 	sub.w	r4, ip, #4
  402820:	f024 0403 	bic.w	r4, r4, #3
  402824:	3404      	adds	r4, #4
  402826:	f002 0203 	and.w	r2, r2, #3
  40282a:	4423      	add	r3, r4
  40282c:	4421      	add	r1, r4
  40282e:	2a00      	cmp	r2, #0
  402830:	d0c4      	beq.n	4027bc <memmove+0x24>
  402832:	441a      	add	r2, r3
  402834:	f811 4b01 	ldrb.w	r4, [r1], #1
  402838:	f803 4b01 	strb.w	r4, [r3], #1
  40283c:	4293      	cmp	r3, r2
  40283e:	d1f9      	bne.n	402834 <memmove+0x9c>
  402840:	bcf0      	pop	{r4, r5, r6, r7}
  402842:	4770      	bx	lr
  402844:	4603      	mov	r3, r0
  402846:	2a00      	cmp	r2, #0
  402848:	d1f3      	bne.n	402832 <memmove+0x9a>
  40284a:	e7b7      	b.n	4027bc <memmove+0x24>
  40284c:	4603      	mov	r3, r0
  40284e:	e7f0      	b.n	402832 <memmove+0x9a>
  402850:	4662      	mov	r2, ip
  402852:	2a00      	cmp	r2, #0
  402854:	d1ed      	bne.n	402832 <memmove+0x9a>
  402856:	e7b1      	b.n	4027bc <memmove+0x24>

00402858 <__malloc_lock>:
  402858:	4770      	bx	lr
  40285a:	bf00      	nop

0040285c <__malloc_unlock>:
  40285c:	4770      	bx	lr
  40285e:	bf00      	nop

00402860 <_realloc_r>:
  402860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402864:	460c      	mov	r4, r1
  402866:	b083      	sub	sp, #12
  402868:	4690      	mov	r8, r2
  40286a:	4681      	mov	r9, r0
  40286c:	2900      	cmp	r1, #0
  40286e:	f000 80e2 	beq.w	402a36 <_realloc_r+0x1d6>
  402872:	f7ff fff1 	bl	402858 <__malloc_lock>
  402876:	f108 060b 	add.w	r6, r8, #11
  40287a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40287e:	2e16      	cmp	r6, #22
  402880:	f023 0503 	bic.w	r5, r3, #3
  402884:	f1a4 0708 	sub.w	r7, r4, #8
  402888:	d84b      	bhi.n	402922 <_realloc_r+0xc2>
  40288a:	2110      	movs	r1, #16
  40288c:	460e      	mov	r6, r1
  40288e:	45b0      	cmp	r8, r6
  402890:	d84c      	bhi.n	40292c <_realloc_r+0xcc>
  402892:	428d      	cmp	r5, r1
  402894:	da78      	bge.n	402988 <_realloc_r+0x128>
  402896:	f8df b390 	ldr.w	fp, [pc, #912]	; 402c28 <_realloc_r+0x3c8>
  40289a:	f8db e008 	ldr.w	lr, [fp, #8]
  40289e:	1978      	adds	r0, r7, r5
  4028a0:	4586      	cmp	lr, r0
  4028a2:	f000 80ce 	beq.w	402a42 <_realloc_r+0x1e2>
  4028a6:	6842      	ldr	r2, [r0, #4]
  4028a8:	f022 0c01 	bic.w	ip, r2, #1
  4028ac:	4484      	add	ip, r0
  4028ae:	f8dc c004 	ldr.w	ip, [ip, #4]
  4028b2:	f01c 0f01 	tst.w	ip, #1
  4028b6:	d07a      	beq.n	4029ae <_realloc_r+0x14e>
  4028b8:	2200      	movs	r2, #0
  4028ba:	4610      	mov	r0, r2
  4028bc:	07db      	lsls	r3, r3, #31
  4028be:	f100 8092 	bmi.w	4029e6 <_realloc_r+0x186>
  4028c2:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4028c6:	ebc3 0a07 	rsb	sl, r3, r7
  4028ca:	f8da 3004 	ldr.w	r3, [sl, #4]
  4028ce:	f023 0303 	bic.w	r3, r3, #3
  4028d2:	442b      	add	r3, r5
  4028d4:	b388      	cbz	r0, 40293a <_realloc_r+0xda>
  4028d6:	4570      	cmp	r0, lr
  4028d8:	f000 80ed 	beq.w	402ab6 <_realloc_r+0x256>
  4028dc:	eb02 0e03 	add.w	lr, r2, r3
  4028e0:	458e      	cmp	lr, r1
  4028e2:	db2a      	blt.n	40293a <_realloc_r+0xda>
  4028e4:	68c3      	ldr	r3, [r0, #12]
  4028e6:	6882      	ldr	r2, [r0, #8]
  4028e8:	4657      	mov	r7, sl
  4028ea:	60d3      	str	r3, [r2, #12]
  4028ec:	609a      	str	r2, [r3, #8]
  4028ee:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4028f2:	f8da 300c 	ldr.w	r3, [sl, #12]
  4028f6:	60cb      	str	r3, [r1, #12]
  4028f8:	1f2a      	subs	r2, r5, #4
  4028fa:	2a24      	cmp	r2, #36	; 0x24
  4028fc:	6099      	str	r1, [r3, #8]
  4028fe:	f200 8126 	bhi.w	402b4e <_realloc_r+0x2ee>
  402902:	2a13      	cmp	r2, #19
  402904:	f240 80b3 	bls.w	402a6e <_realloc_r+0x20e>
  402908:	6823      	ldr	r3, [r4, #0]
  40290a:	f8ca 3008 	str.w	r3, [sl, #8]
  40290e:	6863      	ldr	r3, [r4, #4]
  402910:	f8ca 300c 	str.w	r3, [sl, #12]
  402914:	2a1b      	cmp	r2, #27
  402916:	f200 8130 	bhi.w	402b7a <_realloc_r+0x31a>
  40291a:	3408      	adds	r4, #8
  40291c:	f10a 0310 	add.w	r3, sl, #16
  402920:	e0a6      	b.n	402a70 <_realloc_r+0x210>
  402922:	f026 0607 	bic.w	r6, r6, #7
  402926:	2e00      	cmp	r6, #0
  402928:	4631      	mov	r1, r6
  40292a:	dab0      	bge.n	40288e <_realloc_r+0x2e>
  40292c:	230c      	movs	r3, #12
  40292e:	2000      	movs	r0, #0
  402930:	f8c9 3000 	str.w	r3, [r9]
  402934:	b003      	add	sp, #12
  402936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40293a:	428b      	cmp	r3, r1
  40293c:	db53      	blt.n	4029e6 <_realloc_r+0x186>
  40293e:	4657      	mov	r7, sl
  402940:	f8da 100c 	ldr.w	r1, [sl, #12]
  402944:	f857 0f08 	ldr.w	r0, [r7, #8]!
  402948:	1f2a      	subs	r2, r5, #4
  40294a:	2a24      	cmp	r2, #36	; 0x24
  40294c:	60c1      	str	r1, [r0, #12]
  40294e:	6088      	str	r0, [r1, #8]
  402950:	f200 8109 	bhi.w	402b66 <_realloc_r+0x306>
  402954:	2a13      	cmp	r2, #19
  402956:	f240 8104 	bls.w	402b62 <_realloc_r+0x302>
  40295a:	6821      	ldr	r1, [r4, #0]
  40295c:	f8ca 1008 	str.w	r1, [sl, #8]
  402960:	6861      	ldr	r1, [r4, #4]
  402962:	f8ca 100c 	str.w	r1, [sl, #12]
  402966:	2a1b      	cmp	r2, #27
  402968:	f200 811c 	bhi.w	402ba4 <_realloc_r+0x344>
  40296c:	3408      	adds	r4, #8
  40296e:	f10a 0210 	add.w	r2, sl, #16
  402972:	6821      	ldr	r1, [r4, #0]
  402974:	6011      	str	r1, [r2, #0]
  402976:	6861      	ldr	r1, [r4, #4]
  402978:	6051      	str	r1, [r2, #4]
  40297a:	68a1      	ldr	r1, [r4, #8]
  40297c:	6091      	str	r1, [r2, #8]
  40297e:	461d      	mov	r5, r3
  402980:	f8da 3004 	ldr.w	r3, [sl, #4]
  402984:	463c      	mov	r4, r7
  402986:	4657      	mov	r7, sl
  402988:	1baa      	subs	r2, r5, r6
  40298a:	2a0f      	cmp	r2, #15
  40298c:	f003 0301 	and.w	r3, r3, #1
  402990:	d819      	bhi.n	4029c6 <_realloc_r+0x166>
  402992:	432b      	orrs	r3, r5
  402994:	443d      	add	r5, r7
  402996:	607b      	str	r3, [r7, #4]
  402998:	686b      	ldr	r3, [r5, #4]
  40299a:	f043 0301 	orr.w	r3, r3, #1
  40299e:	606b      	str	r3, [r5, #4]
  4029a0:	4648      	mov	r0, r9
  4029a2:	f7ff ff5b 	bl	40285c <__malloc_unlock>
  4029a6:	4620      	mov	r0, r4
  4029a8:	b003      	add	sp, #12
  4029aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029ae:	f022 0203 	bic.w	r2, r2, #3
  4029b2:	eb02 0c05 	add.w	ip, r2, r5
  4029b6:	458c      	cmp	ip, r1
  4029b8:	db80      	blt.n	4028bc <_realloc_r+0x5c>
  4029ba:	68c2      	ldr	r2, [r0, #12]
  4029bc:	6881      	ldr	r1, [r0, #8]
  4029be:	4665      	mov	r5, ip
  4029c0:	60ca      	str	r2, [r1, #12]
  4029c2:	6091      	str	r1, [r2, #8]
  4029c4:	e7e0      	b.n	402988 <_realloc_r+0x128>
  4029c6:	19b9      	adds	r1, r7, r6
  4029c8:	f042 0001 	orr.w	r0, r2, #1
  4029cc:	431e      	orrs	r6, r3
  4029ce:	440a      	add	r2, r1
  4029d0:	607e      	str	r6, [r7, #4]
  4029d2:	6048      	str	r0, [r1, #4]
  4029d4:	6853      	ldr	r3, [r2, #4]
  4029d6:	f043 0301 	orr.w	r3, r3, #1
  4029da:	3108      	adds	r1, #8
  4029dc:	6053      	str	r3, [r2, #4]
  4029de:	4648      	mov	r0, r9
  4029e0:	f7ff f83c 	bl	401a5c <_free_r>
  4029e4:	e7dc      	b.n	4029a0 <_realloc_r+0x140>
  4029e6:	4641      	mov	r1, r8
  4029e8:	4648      	mov	r0, r9
  4029ea:	f7ff fb57 	bl	40209c <_malloc_r>
  4029ee:	4680      	mov	r8, r0
  4029f0:	b1d0      	cbz	r0, 402a28 <_realloc_r+0x1c8>
  4029f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4029f6:	f023 0201 	bic.w	r2, r3, #1
  4029fa:	443a      	add	r2, r7
  4029fc:	f1a0 0108 	sub.w	r1, r0, #8
  402a00:	4291      	cmp	r1, r2
  402a02:	f000 809e 	beq.w	402b42 <_realloc_r+0x2e2>
  402a06:	1f2a      	subs	r2, r5, #4
  402a08:	2a24      	cmp	r2, #36	; 0x24
  402a0a:	d850      	bhi.n	402aae <_realloc_r+0x24e>
  402a0c:	2a13      	cmp	r2, #19
  402a0e:	d823      	bhi.n	402a58 <_realloc_r+0x1f8>
  402a10:	4603      	mov	r3, r0
  402a12:	4622      	mov	r2, r4
  402a14:	6811      	ldr	r1, [r2, #0]
  402a16:	6019      	str	r1, [r3, #0]
  402a18:	6851      	ldr	r1, [r2, #4]
  402a1a:	6059      	str	r1, [r3, #4]
  402a1c:	6892      	ldr	r2, [r2, #8]
  402a1e:	609a      	str	r2, [r3, #8]
  402a20:	4621      	mov	r1, r4
  402a22:	4648      	mov	r0, r9
  402a24:	f7ff f81a 	bl	401a5c <_free_r>
  402a28:	4648      	mov	r0, r9
  402a2a:	f7ff ff17 	bl	40285c <__malloc_unlock>
  402a2e:	4640      	mov	r0, r8
  402a30:	b003      	add	sp, #12
  402a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a36:	4611      	mov	r1, r2
  402a38:	b003      	add	sp, #12
  402a3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a3e:	f7ff bb2d 	b.w	40209c <_malloc_r>
  402a42:	f8de 2004 	ldr.w	r2, [lr, #4]
  402a46:	f022 0203 	bic.w	r2, r2, #3
  402a4a:	1950      	adds	r0, r2, r5
  402a4c:	f106 0c10 	add.w	ip, r6, #16
  402a50:	4560      	cmp	r0, ip
  402a52:	da19      	bge.n	402a88 <_realloc_r+0x228>
  402a54:	4670      	mov	r0, lr
  402a56:	e731      	b.n	4028bc <_realloc_r+0x5c>
  402a58:	6823      	ldr	r3, [r4, #0]
  402a5a:	6003      	str	r3, [r0, #0]
  402a5c:	6863      	ldr	r3, [r4, #4]
  402a5e:	6043      	str	r3, [r0, #4]
  402a60:	2a1b      	cmp	r2, #27
  402a62:	d863      	bhi.n	402b2c <_realloc_r+0x2cc>
  402a64:	f100 0308 	add.w	r3, r0, #8
  402a68:	f104 0208 	add.w	r2, r4, #8
  402a6c:	e7d2      	b.n	402a14 <_realloc_r+0x1b4>
  402a6e:	463b      	mov	r3, r7
  402a70:	6822      	ldr	r2, [r4, #0]
  402a72:	601a      	str	r2, [r3, #0]
  402a74:	6862      	ldr	r2, [r4, #4]
  402a76:	605a      	str	r2, [r3, #4]
  402a78:	68a2      	ldr	r2, [r4, #8]
  402a7a:	609a      	str	r2, [r3, #8]
  402a7c:	463c      	mov	r4, r7
  402a7e:	4675      	mov	r5, lr
  402a80:	f8da 3004 	ldr.w	r3, [sl, #4]
  402a84:	4657      	mov	r7, sl
  402a86:	e77f      	b.n	402988 <_realloc_r+0x128>
  402a88:	4437      	add	r7, r6
  402a8a:	1b83      	subs	r3, r0, r6
  402a8c:	f043 0301 	orr.w	r3, r3, #1
  402a90:	f8cb 7008 	str.w	r7, [fp, #8]
  402a94:	607b      	str	r3, [r7, #4]
  402a96:	f854 3c04 	ldr.w	r3, [r4, #-4]
  402a9a:	f003 0301 	and.w	r3, r3, #1
  402a9e:	431e      	orrs	r6, r3
  402aa0:	4648      	mov	r0, r9
  402aa2:	f844 6c04 	str.w	r6, [r4, #-4]
  402aa6:	f7ff fed9 	bl	40285c <__malloc_unlock>
  402aaa:	4620      	mov	r0, r4
  402aac:	e77c      	b.n	4029a8 <_realloc_r+0x148>
  402aae:	4621      	mov	r1, r4
  402ab0:	f7ff fe72 	bl	402798 <memmove>
  402ab4:	e7b4      	b.n	402a20 <_realloc_r+0x1c0>
  402ab6:	eb02 0c03 	add.w	ip, r2, r3
  402aba:	f106 0210 	add.w	r2, r6, #16
  402abe:	4594      	cmp	ip, r2
  402ac0:	f6ff af3b 	blt.w	40293a <_realloc_r+0xda>
  402ac4:	4657      	mov	r7, sl
  402ac6:	f8da 300c 	ldr.w	r3, [sl, #12]
  402aca:	f857 1f08 	ldr.w	r1, [r7, #8]!
  402ace:	1f2a      	subs	r2, r5, #4
  402ad0:	2a24      	cmp	r2, #36	; 0x24
  402ad2:	60cb      	str	r3, [r1, #12]
  402ad4:	6099      	str	r1, [r3, #8]
  402ad6:	f200 8087 	bhi.w	402be8 <_realloc_r+0x388>
  402ada:	2a13      	cmp	r2, #19
  402adc:	d978      	bls.n	402bd0 <_realloc_r+0x370>
  402ade:	6823      	ldr	r3, [r4, #0]
  402ae0:	f8ca 3008 	str.w	r3, [sl, #8]
  402ae4:	6863      	ldr	r3, [r4, #4]
  402ae6:	f8ca 300c 	str.w	r3, [sl, #12]
  402aea:	2a1b      	cmp	r2, #27
  402aec:	f200 8085 	bhi.w	402bfa <_realloc_r+0x39a>
  402af0:	3408      	adds	r4, #8
  402af2:	f10a 0310 	add.w	r3, sl, #16
  402af6:	6822      	ldr	r2, [r4, #0]
  402af8:	601a      	str	r2, [r3, #0]
  402afa:	6862      	ldr	r2, [r4, #4]
  402afc:	605a      	str	r2, [r3, #4]
  402afe:	68a2      	ldr	r2, [r4, #8]
  402b00:	609a      	str	r2, [r3, #8]
  402b02:	eb0a 0306 	add.w	r3, sl, r6
  402b06:	ebc6 020c 	rsb	r2, r6, ip
  402b0a:	f042 0201 	orr.w	r2, r2, #1
  402b0e:	f8cb 3008 	str.w	r3, [fp, #8]
  402b12:	605a      	str	r2, [r3, #4]
  402b14:	f8da 3004 	ldr.w	r3, [sl, #4]
  402b18:	f003 0301 	and.w	r3, r3, #1
  402b1c:	431e      	orrs	r6, r3
  402b1e:	4648      	mov	r0, r9
  402b20:	f8ca 6004 	str.w	r6, [sl, #4]
  402b24:	f7ff fe9a 	bl	40285c <__malloc_unlock>
  402b28:	4638      	mov	r0, r7
  402b2a:	e73d      	b.n	4029a8 <_realloc_r+0x148>
  402b2c:	68a3      	ldr	r3, [r4, #8]
  402b2e:	6083      	str	r3, [r0, #8]
  402b30:	68e3      	ldr	r3, [r4, #12]
  402b32:	60c3      	str	r3, [r0, #12]
  402b34:	2a24      	cmp	r2, #36	; 0x24
  402b36:	d02c      	beq.n	402b92 <_realloc_r+0x332>
  402b38:	f100 0310 	add.w	r3, r0, #16
  402b3c:	f104 0210 	add.w	r2, r4, #16
  402b40:	e768      	b.n	402a14 <_realloc_r+0x1b4>
  402b42:	f850 2c04 	ldr.w	r2, [r0, #-4]
  402b46:	f022 0203 	bic.w	r2, r2, #3
  402b4a:	4415      	add	r5, r2
  402b4c:	e71c      	b.n	402988 <_realloc_r+0x128>
  402b4e:	4621      	mov	r1, r4
  402b50:	4638      	mov	r0, r7
  402b52:	4675      	mov	r5, lr
  402b54:	463c      	mov	r4, r7
  402b56:	f7ff fe1f 	bl	402798 <memmove>
  402b5a:	4657      	mov	r7, sl
  402b5c:	f8da 3004 	ldr.w	r3, [sl, #4]
  402b60:	e712      	b.n	402988 <_realloc_r+0x128>
  402b62:	463a      	mov	r2, r7
  402b64:	e705      	b.n	402972 <_realloc_r+0x112>
  402b66:	4621      	mov	r1, r4
  402b68:	4638      	mov	r0, r7
  402b6a:	461d      	mov	r5, r3
  402b6c:	463c      	mov	r4, r7
  402b6e:	f7ff fe13 	bl	402798 <memmove>
  402b72:	4657      	mov	r7, sl
  402b74:	f8da 3004 	ldr.w	r3, [sl, #4]
  402b78:	e706      	b.n	402988 <_realloc_r+0x128>
  402b7a:	68a3      	ldr	r3, [r4, #8]
  402b7c:	f8ca 3010 	str.w	r3, [sl, #16]
  402b80:	68e3      	ldr	r3, [r4, #12]
  402b82:	f8ca 3014 	str.w	r3, [sl, #20]
  402b86:	2a24      	cmp	r2, #36	; 0x24
  402b88:	d018      	beq.n	402bbc <_realloc_r+0x35c>
  402b8a:	3410      	adds	r4, #16
  402b8c:	f10a 0318 	add.w	r3, sl, #24
  402b90:	e76e      	b.n	402a70 <_realloc_r+0x210>
  402b92:	6923      	ldr	r3, [r4, #16]
  402b94:	6103      	str	r3, [r0, #16]
  402b96:	6963      	ldr	r3, [r4, #20]
  402b98:	6143      	str	r3, [r0, #20]
  402b9a:	f104 0218 	add.w	r2, r4, #24
  402b9e:	f100 0318 	add.w	r3, r0, #24
  402ba2:	e737      	b.n	402a14 <_realloc_r+0x1b4>
  402ba4:	68a1      	ldr	r1, [r4, #8]
  402ba6:	f8ca 1010 	str.w	r1, [sl, #16]
  402baa:	68e1      	ldr	r1, [r4, #12]
  402bac:	f8ca 1014 	str.w	r1, [sl, #20]
  402bb0:	2a24      	cmp	r2, #36	; 0x24
  402bb2:	d00f      	beq.n	402bd4 <_realloc_r+0x374>
  402bb4:	3410      	adds	r4, #16
  402bb6:	f10a 0218 	add.w	r2, sl, #24
  402bba:	e6da      	b.n	402972 <_realloc_r+0x112>
  402bbc:	6923      	ldr	r3, [r4, #16]
  402bbe:	f8ca 3018 	str.w	r3, [sl, #24]
  402bc2:	6963      	ldr	r3, [r4, #20]
  402bc4:	f8ca 301c 	str.w	r3, [sl, #28]
  402bc8:	3418      	adds	r4, #24
  402bca:	f10a 0320 	add.w	r3, sl, #32
  402bce:	e74f      	b.n	402a70 <_realloc_r+0x210>
  402bd0:	463b      	mov	r3, r7
  402bd2:	e790      	b.n	402af6 <_realloc_r+0x296>
  402bd4:	6922      	ldr	r2, [r4, #16]
  402bd6:	f8ca 2018 	str.w	r2, [sl, #24]
  402bda:	6962      	ldr	r2, [r4, #20]
  402bdc:	f8ca 201c 	str.w	r2, [sl, #28]
  402be0:	3418      	adds	r4, #24
  402be2:	f10a 0220 	add.w	r2, sl, #32
  402be6:	e6c4      	b.n	402972 <_realloc_r+0x112>
  402be8:	4621      	mov	r1, r4
  402bea:	4638      	mov	r0, r7
  402bec:	f8cd c004 	str.w	ip, [sp, #4]
  402bf0:	f7ff fdd2 	bl	402798 <memmove>
  402bf4:	f8dd c004 	ldr.w	ip, [sp, #4]
  402bf8:	e783      	b.n	402b02 <_realloc_r+0x2a2>
  402bfa:	68a3      	ldr	r3, [r4, #8]
  402bfc:	f8ca 3010 	str.w	r3, [sl, #16]
  402c00:	68e3      	ldr	r3, [r4, #12]
  402c02:	f8ca 3014 	str.w	r3, [sl, #20]
  402c06:	2a24      	cmp	r2, #36	; 0x24
  402c08:	d003      	beq.n	402c12 <_realloc_r+0x3b2>
  402c0a:	3410      	adds	r4, #16
  402c0c:	f10a 0318 	add.w	r3, sl, #24
  402c10:	e771      	b.n	402af6 <_realloc_r+0x296>
  402c12:	6923      	ldr	r3, [r4, #16]
  402c14:	f8ca 3018 	str.w	r3, [sl, #24]
  402c18:	6963      	ldr	r3, [r4, #20]
  402c1a:	f8ca 301c 	str.w	r3, [sl, #28]
  402c1e:	3418      	adds	r4, #24
  402c20:	f10a 0320 	add.w	r3, sl, #32
  402c24:	e767      	b.n	402af6 <_realloc_r+0x296>
  402c26:	bf00      	nop
  402c28:	20000444 	.word	0x20000444

00402c2c <lflush>:
  402c2c:	8983      	ldrh	r3, [r0, #12]
  402c2e:	f003 0309 	and.w	r3, r3, #9
  402c32:	2b09      	cmp	r3, #9
  402c34:	d001      	beq.n	402c3a <lflush+0xe>
  402c36:	2000      	movs	r0, #0
  402c38:	4770      	bx	lr
  402c3a:	f7fe be13 	b.w	401864 <fflush>
  402c3e:	bf00      	nop

00402c40 <__srefill_r>:
  402c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402c42:	460c      	mov	r4, r1
  402c44:	4605      	mov	r5, r0
  402c46:	b110      	cbz	r0, 402c4e <__srefill_r+0xe>
  402c48:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402c4a:	2b00      	cmp	r3, #0
  402c4c:	d043      	beq.n	402cd6 <__srefill_r+0x96>
  402c4e:	89a2      	ldrh	r2, [r4, #12]
  402c50:	b293      	uxth	r3, r2
  402c52:	0499      	lsls	r1, r3, #18
  402c54:	d407      	bmi.n	402c66 <__srefill_r+0x26>
  402c56:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402c60:	6663      	str	r3, [r4, #100]	; 0x64
  402c62:	81a2      	strh	r2, [r4, #12]
  402c64:	b293      	uxth	r3, r2
  402c66:	2100      	movs	r1, #0
  402c68:	069f      	lsls	r7, r3, #26
  402c6a:	6061      	str	r1, [r4, #4]
  402c6c:	d430      	bmi.n	402cd0 <__srefill_r+0x90>
  402c6e:	075e      	lsls	r6, r3, #29
  402c70:	d521      	bpl.n	402cb6 <__srefill_r+0x76>
  402c72:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402c74:	b161      	cbz	r1, 402c90 <__srefill_r+0x50>
  402c76:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402c7a:	4299      	cmp	r1, r3
  402c7c:	d002      	beq.n	402c84 <__srefill_r+0x44>
  402c7e:	4628      	mov	r0, r5
  402c80:	f7fe feec 	bl	401a5c <_free_r>
  402c84:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402c86:	6063      	str	r3, [r4, #4]
  402c88:	2000      	movs	r0, #0
  402c8a:	6320      	str	r0, [r4, #48]	; 0x30
  402c8c:	2b00      	cmp	r3, #0
  402c8e:	d13f      	bne.n	402d10 <__srefill_r+0xd0>
  402c90:	6923      	ldr	r3, [r4, #16]
  402c92:	2b00      	cmp	r3, #0
  402c94:	d04c      	beq.n	402d30 <__srefill_r+0xf0>
  402c96:	89a6      	ldrh	r6, [r4, #12]
  402c98:	b2b7      	uxth	r7, r6
  402c9a:	07bb      	lsls	r3, r7, #30
  402c9c:	d11e      	bne.n	402cdc <__srefill_r+0x9c>
  402c9e:	6922      	ldr	r2, [r4, #16]
  402ca0:	6022      	str	r2, [r4, #0]
  402ca2:	4628      	mov	r0, r5
  402ca4:	69e1      	ldr	r1, [r4, #28]
  402ca6:	6a25      	ldr	r5, [r4, #32]
  402ca8:	6963      	ldr	r3, [r4, #20]
  402caa:	47a8      	blx	r5
  402cac:	2800      	cmp	r0, #0
  402cae:	6060      	str	r0, [r4, #4]
  402cb0:	dd09      	ble.n	402cc6 <__srefill_r+0x86>
  402cb2:	2000      	movs	r0, #0
  402cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cb6:	06d8      	lsls	r0, r3, #27
  402cb8:	d53f      	bpl.n	402d3a <__srefill_r+0xfa>
  402cba:	0719      	lsls	r1, r3, #28
  402cbc:	d42b      	bmi.n	402d16 <__srefill_r+0xd6>
  402cbe:	f042 0204 	orr.w	r2, r2, #4
  402cc2:	81a2      	strh	r2, [r4, #12]
  402cc4:	e7e4      	b.n	402c90 <__srefill_r+0x50>
  402cc6:	d11a      	bne.n	402cfe <__srefill_r+0xbe>
  402cc8:	89a3      	ldrh	r3, [r4, #12]
  402cca:	f043 0320 	orr.w	r3, r3, #32
  402cce:	81a3      	strh	r3, [r4, #12]
  402cd0:	f04f 30ff 	mov.w	r0, #4294967295
  402cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402cd6:	f7fe fddd 	bl	401894 <__sinit>
  402cda:	e7b8      	b.n	402c4e <__srefill_r+0xe>
  402cdc:	4b1b      	ldr	r3, [pc, #108]	; (402d4c <__srefill_r+0x10c>)
  402cde:	491c      	ldr	r1, [pc, #112]	; (402d50 <__srefill_r+0x110>)
  402ce0:	6818      	ldr	r0, [r3, #0]
  402ce2:	2301      	movs	r3, #1
  402ce4:	81a3      	strh	r3, [r4, #12]
  402ce6:	f007 0709 	and.w	r7, r7, #9
  402cea:	f7ff f911 	bl	401f10 <_fwalk>
  402cee:	2f09      	cmp	r7, #9
  402cf0:	81a6      	strh	r6, [r4, #12]
  402cf2:	d1d4      	bne.n	402c9e <__srefill_r+0x5e>
  402cf4:	4628      	mov	r0, r5
  402cf6:	4621      	mov	r1, r4
  402cf8:	f7fe fcf4 	bl	4016e4 <__sflush_r>
  402cfc:	e7cf      	b.n	402c9e <__srefill_r+0x5e>
  402cfe:	89a2      	ldrh	r2, [r4, #12]
  402d00:	2300      	movs	r3, #0
  402d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402d06:	81a2      	strh	r2, [r4, #12]
  402d08:	6063      	str	r3, [r4, #4]
  402d0a:	f04f 30ff 	mov.w	r0, #4294967295
  402d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402d12:	6023      	str	r3, [r4, #0]
  402d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d16:	4628      	mov	r0, r5
  402d18:	4621      	mov	r1, r4
  402d1a:	f7fe fd8d 	bl	401838 <_fflush_r>
  402d1e:	2800      	cmp	r0, #0
  402d20:	d1d6      	bne.n	402cd0 <__srefill_r+0x90>
  402d22:	89a2      	ldrh	r2, [r4, #12]
  402d24:	60a0      	str	r0, [r4, #8]
  402d26:	f022 0208 	bic.w	r2, r2, #8
  402d2a:	61a0      	str	r0, [r4, #24]
  402d2c:	b292      	uxth	r2, r2
  402d2e:	e7c6      	b.n	402cbe <__srefill_r+0x7e>
  402d30:	4628      	mov	r0, r5
  402d32:	4621      	mov	r1, r4
  402d34:	f7ff f93a 	bl	401fac <__smakebuf_r>
  402d38:	e7ad      	b.n	402c96 <__srefill_r+0x56>
  402d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402d3e:	2309      	movs	r3, #9
  402d40:	602b      	str	r3, [r5, #0]
  402d42:	f04f 30ff 	mov.w	r0, #4294967295
  402d46:	81a2      	strh	r2, [r4, #12]
  402d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d4a:	bf00      	nop
  402d4c:	00403170 	.word	0x00403170
  402d50:	00402c2d 	.word	0x00402c2d

00402d54 <_sbrk_r>:
  402d54:	b538      	push	{r3, r4, r5, lr}
  402d56:	4c07      	ldr	r4, [pc, #28]	; (402d74 <_sbrk_r+0x20>)
  402d58:	2300      	movs	r3, #0
  402d5a:	4605      	mov	r5, r0
  402d5c:	4608      	mov	r0, r1
  402d5e:	6023      	str	r3, [r4, #0]
  402d60:	f7fe fa12 	bl	401188 <_sbrk>
  402d64:	1c43      	adds	r3, r0, #1
  402d66:	d000      	beq.n	402d6a <_sbrk_r+0x16>
  402d68:	bd38      	pop	{r3, r4, r5, pc}
  402d6a:	6823      	ldr	r3, [r4, #0]
  402d6c:	2b00      	cmp	r3, #0
  402d6e:	d0fb      	beq.n	402d68 <_sbrk_r+0x14>
  402d70:	602b      	str	r3, [r5, #0]
  402d72:	bd38      	pop	{r3, r4, r5, pc}
  402d74:	20000930 	.word	0x20000930

00402d78 <__sread>:
  402d78:	b510      	push	{r4, lr}
  402d7a:	460c      	mov	r4, r1
  402d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402d80:	f000 f938 	bl	402ff4 <_read_r>
  402d84:	2800      	cmp	r0, #0
  402d86:	db03      	blt.n	402d90 <__sread+0x18>
  402d88:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402d8a:	4403      	add	r3, r0
  402d8c:	6523      	str	r3, [r4, #80]	; 0x50
  402d8e:	bd10      	pop	{r4, pc}
  402d90:	89a3      	ldrh	r3, [r4, #12]
  402d92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402d96:	81a3      	strh	r3, [r4, #12]
  402d98:	bd10      	pop	{r4, pc}
  402d9a:	bf00      	nop

00402d9c <__swrite>:
  402d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402da0:	460c      	mov	r4, r1
  402da2:	8989      	ldrh	r1, [r1, #12]
  402da4:	461d      	mov	r5, r3
  402da6:	05cb      	lsls	r3, r1, #23
  402da8:	4616      	mov	r6, r2
  402daa:	4607      	mov	r7, r0
  402dac:	d506      	bpl.n	402dbc <__swrite+0x20>
  402dae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402db2:	2200      	movs	r2, #0
  402db4:	2302      	movs	r3, #2
  402db6:	f000 f909 	bl	402fcc <_lseek_r>
  402dba:	89a1      	ldrh	r1, [r4, #12]
  402dbc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  402dc0:	81a1      	strh	r1, [r4, #12]
  402dc2:	4638      	mov	r0, r7
  402dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402dc8:	4632      	mov	r2, r6
  402dca:	462b      	mov	r3, r5
  402dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  402dd0:	f000 b814 	b.w	402dfc <_write_r>

00402dd4 <__sseek>:
  402dd4:	b510      	push	{r4, lr}
  402dd6:	460c      	mov	r4, r1
  402dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402ddc:	f000 f8f6 	bl	402fcc <_lseek_r>
  402de0:	89a3      	ldrh	r3, [r4, #12]
  402de2:	1c42      	adds	r2, r0, #1
  402de4:	bf0e      	itee	eq
  402de6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  402dea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  402dee:	6520      	strne	r0, [r4, #80]	; 0x50
  402df0:	81a3      	strh	r3, [r4, #12]
  402df2:	bd10      	pop	{r4, pc}

00402df4 <__sclose>:
  402df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402df8:	f000 b868 	b.w	402ecc <_close_r>

00402dfc <_write_r>:
  402dfc:	b570      	push	{r4, r5, r6, lr}
  402dfe:	4c08      	ldr	r4, [pc, #32]	; (402e20 <_write_r+0x24>)
  402e00:	4606      	mov	r6, r0
  402e02:	2500      	movs	r5, #0
  402e04:	4608      	mov	r0, r1
  402e06:	4611      	mov	r1, r2
  402e08:	461a      	mov	r2, r3
  402e0a:	6025      	str	r5, [r4, #0]
  402e0c:	f7fd fd66 	bl	4008dc <_write>
  402e10:	1c43      	adds	r3, r0, #1
  402e12:	d000      	beq.n	402e16 <_write_r+0x1a>
  402e14:	bd70      	pop	{r4, r5, r6, pc}
  402e16:	6823      	ldr	r3, [r4, #0]
  402e18:	2b00      	cmp	r3, #0
  402e1a:	d0fb      	beq.n	402e14 <_write_r+0x18>
  402e1c:	6033      	str	r3, [r6, #0]
  402e1e:	bd70      	pop	{r4, r5, r6, pc}
  402e20:	20000930 	.word	0x20000930

00402e24 <__register_exitproc>:
  402e24:	b5f0      	push	{r4, r5, r6, r7, lr}
  402e26:	4c27      	ldr	r4, [pc, #156]	; (402ec4 <__register_exitproc+0xa0>)
  402e28:	6826      	ldr	r6, [r4, #0]
  402e2a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  402e2e:	b085      	sub	sp, #20
  402e30:	4607      	mov	r7, r0
  402e32:	2c00      	cmp	r4, #0
  402e34:	d041      	beq.n	402eba <__register_exitproc+0x96>
  402e36:	6865      	ldr	r5, [r4, #4]
  402e38:	2d1f      	cmp	r5, #31
  402e3a:	dd1e      	ble.n	402e7a <__register_exitproc+0x56>
  402e3c:	4822      	ldr	r0, [pc, #136]	; (402ec8 <__register_exitproc+0xa4>)
  402e3e:	b918      	cbnz	r0, 402e48 <__register_exitproc+0x24>
  402e40:	f04f 30ff 	mov.w	r0, #4294967295
  402e44:	b005      	add	sp, #20
  402e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402e48:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402e4c:	9103      	str	r1, [sp, #12]
  402e4e:	9202      	str	r2, [sp, #8]
  402e50:	9301      	str	r3, [sp, #4]
  402e52:	f7ff f91b 	bl	40208c <malloc>
  402e56:	9903      	ldr	r1, [sp, #12]
  402e58:	9a02      	ldr	r2, [sp, #8]
  402e5a:	9b01      	ldr	r3, [sp, #4]
  402e5c:	4604      	mov	r4, r0
  402e5e:	2800      	cmp	r0, #0
  402e60:	d0ee      	beq.n	402e40 <__register_exitproc+0x1c>
  402e62:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  402e66:	6025      	str	r5, [r4, #0]
  402e68:	2000      	movs	r0, #0
  402e6a:	6060      	str	r0, [r4, #4]
  402e6c:	4605      	mov	r5, r0
  402e6e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  402e72:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  402e76:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  402e7a:	b93f      	cbnz	r7, 402e8c <__register_exitproc+0x68>
  402e7c:	1cab      	adds	r3, r5, #2
  402e7e:	2000      	movs	r0, #0
  402e80:	3501      	adds	r5, #1
  402e82:	6065      	str	r5, [r4, #4]
  402e84:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  402e88:	b005      	add	sp, #20
  402e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402e8c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  402e90:	f04f 0c01 	mov.w	ip, #1
  402e94:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  402e98:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  402e9c:	fa0c f205 	lsl.w	r2, ip, r5
  402ea0:	4316      	orrs	r6, r2
  402ea2:	2f02      	cmp	r7, #2
  402ea4:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  402ea8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  402eac:	d1e6      	bne.n	402e7c <__register_exitproc+0x58>
  402eae:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  402eb2:	431a      	orrs	r2, r3
  402eb4:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402eb8:	e7e0      	b.n	402e7c <__register_exitproc+0x58>
  402eba:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  402ebe:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  402ec2:	e7b8      	b.n	402e36 <__register_exitproc+0x12>
  402ec4:	00403170 	.word	0x00403170
  402ec8:	0040208d 	.word	0x0040208d

00402ecc <_close_r>:
  402ecc:	b538      	push	{r3, r4, r5, lr}
  402ece:	4c07      	ldr	r4, [pc, #28]	; (402eec <_close_r+0x20>)
  402ed0:	2300      	movs	r3, #0
  402ed2:	4605      	mov	r5, r0
  402ed4:	4608      	mov	r0, r1
  402ed6:	6023      	str	r3, [r4, #0]
  402ed8:	f7fe f970 	bl	4011bc <_close>
  402edc:	1c43      	adds	r3, r0, #1
  402ede:	d000      	beq.n	402ee2 <_close_r+0x16>
  402ee0:	bd38      	pop	{r3, r4, r5, pc}
  402ee2:	6823      	ldr	r3, [r4, #0]
  402ee4:	2b00      	cmp	r3, #0
  402ee6:	d0fb      	beq.n	402ee0 <_close_r+0x14>
  402ee8:	602b      	str	r3, [r5, #0]
  402eea:	bd38      	pop	{r3, r4, r5, pc}
  402eec:	20000930 	.word	0x20000930

00402ef0 <_fclose_r>:
  402ef0:	b570      	push	{r4, r5, r6, lr}
  402ef2:	460c      	mov	r4, r1
  402ef4:	4605      	mov	r5, r0
  402ef6:	b131      	cbz	r1, 402f06 <_fclose_r+0x16>
  402ef8:	b110      	cbz	r0, 402f00 <_fclose_r+0x10>
  402efa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402efc:	2b00      	cmp	r3, #0
  402efe:	d02f      	beq.n	402f60 <_fclose_r+0x70>
  402f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402f04:	b90b      	cbnz	r3, 402f0a <_fclose_r+0x1a>
  402f06:	2000      	movs	r0, #0
  402f08:	bd70      	pop	{r4, r5, r6, pc}
  402f0a:	4628      	mov	r0, r5
  402f0c:	4621      	mov	r1, r4
  402f0e:	f7fe fc93 	bl	401838 <_fflush_r>
  402f12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402f14:	4606      	mov	r6, r0
  402f16:	b133      	cbz	r3, 402f26 <_fclose_r+0x36>
  402f18:	4628      	mov	r0, r5
  402f1a:	69e1      	ldr	r1, [r4, #28]
  402f1c:	4798      	blx	r3
  402f1e:	2800      	cmp	r0, #0
  402f20:	bfb8      	it	lt
  402f22:	f04f 36ff 	movlt.w	r6, #4294967295
  402f26:	89a3      	ldrh	r3, [r4, #12]
  402f28:	061b      	lsls	r3, r3, #24
  402f2a:	d41c      	bmi.n	402f66 <_fclose_r+0x76>
  402f2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402f2e:	b141      	cbz	r1, 402f42 <_fclose_r+0x52>
  402f30:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402f34:	4299      	cmp	r1, r3
  402f36:	d002      	beq.n	402f3e <_fclose_r+0x4e>
  402f38:	4628      	mov	r0, r5
  402f3a:	f7fe fd8f 	bl	401a5c <_free_r>
  402f3e:	2300      	movs	r3, #0
  402f40:	6323      	str	r3, [r4, #48]	; 0x30
  402f42:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402f44:	b121      	cbz	r1, 402f50 <_fclose_r+0x60>
  402f46:	4628      	mov	r0, r5
  402f48:	f7fe fd88 	bl	401a5c <_free_r>
  402f4c:	2300      	movs	r3, #0
  402f4e:	6463      	str	r3, [r4, #68]	; 0x44
  402f50:	f7fe fd1a 	bl	401988 <__sfp_lock_acquire>
  402f54:	2300      	movs	r3, #0
  402f56:	81a3      	strh	r3, [r4, #12]
  402f58:	f7fe fd18 	bl	40198c <__sfp_lock_release>
  402f5c:	4630      	mov	r0, r6
  402f5e:	bd70      	pop	{r4, r5, r6, pc}
  402f60:	f7fe fc98 	bl	401894 <__sinit>
  402f64:	e7cc      	b.n	402f00 <_fclose_r+0x10>
  402f66:	4628      	mov	r0, r5
  402f68:	6921      	ldr	r1, [r4, #16]
  402f6a:	f7fe fd77 	bl	401a5c <_free_r>
  402f6e:	e7dd      	b.n	402f2c <_fclose_r+0x3c>

00402f70 <fclose>:
  402f70:	4b02      	ldr	r3, [pc, #8]	; (402f7c <fclose+0xc>)
  402f72:	4601      	mov	r1, r0
  402f74:	6818      	ldr	r0, [r3, #0]
  402f76:	f7ff bfbb 	b.w	402ef0 <_fclose_r>
  402f7a:	bf00      	nop
  402f7c:	20000440 	.word	0x20000440

00402f80 <_fstat_r>:
  402f80:	b538      	push	{r3, r4, r5, lr}
  402f82:	4c08      	ldr	r4, [pc, #32]	; (402fa4 <_fstat_r+0x24>)
  402f84:	2300      	movs	r3, #0
  402f86:	4605      	mov	r5, r0
  402f88:	4608      	mov	r0, r1
  402f8a:	4611      	mov	r1, r2
  402f8c:	6023      	str	r3, [r4, #0]
  402f8e:	f7fe f919 	bl	4011c4 <_fstat>
  402f92:	1c43      	adds	r3, r0, #1
  402f94:	d000      	beq.n	402f98 <_fstat_r+0x18>
  402f96:	bd38      	pop	{r3, r4, r5, pc}
  402f98:	6823      	ldr	r3, [r4, #0]
  402f9a:	2b00      	cmp	r3, #0
  402f9c:	d0fb      	beq.n	402f96 <_fstat_r+0x16>
  402f9e:	602b      	str	r3, [r5, #0]
  402fa0:	bd38      	pop	{r3, r4, r5, pc}
  402fa2:	bf00      	nop
  402fa4:	20000930 	.word	0x20000930

00402fa8 <_isatty_r>:
  402fa8:	b538      	push	{r3, r4, r5, lr}
  402faa:	4c07      	ldr	r4, [pc, #28]	; (402fc8 <_isatty_r+0x20>)
  402fac:	2300      	movs	r3, #0
  402fae:	4605      	mov	r5, r0
  402fb0:	4608      	mov	r0, r1
  402fb2:	6023      	str	r3, [r4, #0]
  402fb4:	f7fe f90c 	bl	4011d0 <_isatty>
  402fb8:	1c43      	adds	r3, r0, #1
  402fba:	d000      	beq.n	402fbe <_isatty_r+0x16>
  402fbc:	bd38      	pop	{r3, r4, r5, pc}
  402fbe:	6823      	ldr	r3, [r4, #0]
  402fc0:	2b00      	cmp	r3, #0
  402fc2:	d0fb      	beq.n	402fbc <_isatty_r+0x14>
  402fc4:	602b      	str	r3, [r5, #0]
  402fc6:	bd38      	pop	{r3, r4, r5, pc}
  402fc8:	20000930 	.word	0x20000930

00402fcc <_lseek_r>:
  402fcc:	b570      	push	{r4, r5, r6, lr}
  402fce:	4c08      	ldr	r4, [pc, #32]	; (402ff0 <_lseek_r+0x24>)
  402fd0:	4606      	mov	r6, r0
  402fd2:	2500      	movs	r5, #0
  402fd4:	4608      	mov	r0, r1
  402fd6:	4611      	mov	r1, r2
  402fd8:	461a      	mov	r2, r3
  402fda:	6025      	str	r5, [r4, #0]
  402fdc:	f7fe f8fa 	bl	4011d4 <_lseek>
  402fe0:	1c43      	adds	r3, r0, #1
  402fe2:	d000      	beq.n	402fe6 <_lseek_r+0x1a>
  402fe4:	bd70      	pop	{r4, r5, r6, pc}
  402fe6:	6823      	ldr	r3, [r4, #0]
  402fe8:	2b00      	cmp	r3, #0
  402fea:	d0fb      	beq.n	402fe4 <_lseek_r+0x18>
  402fec:	6033      	str	r3, [r6, #0]
  402fee:	bd70      	pop	{r4, r5, r6, pc}
  402ff0:	20000930 	.word	0x20000930

00402ff4 <_read_r>:
  402ff4:	b570      	push	{r4, r5, r6, lr}
  402ff6:	4c08      	ldr	r4, [pc, #32]	; (403018 <_read_r+0x24>)
  402ff8:	4606      	mov	r6, r0
  402ffa:	2500      	movs	r5, #0
  402ffc:	4608      	mov	r0, r1
  402ffe:	4611      	mov	r1, r2
  403000:	461a      	mov	r2, r3
  403002:	6025      	str	r5, [r4, #0]
  403004:	f7fd fc4a 	bl	40089c <_read>
  403008:	1c43      	adds	r3, r0, #1
  40300a:	d000      	beq.n	40300e <_read_r+0x1a>
  40300c:	bd70      	pop	{r4, r5, r6, pc}
  40300e:	6823      	ldr	r3, [r4, #0]
  403010:	2b00      	cmp	r3, #0
  403012:	d0fb      	beq.n	40300c <_read_r+0x18>
  403014:	6033      	str	r3, [r6, #0]
  403016:	bd70      	pop	{r4, r5, r6, pc}
  403018:	20000930 	.word	0x20000930
  40301c:	01000000 	.word	0x01000000
  403020:	00000000 	.word	0x00000000
  403024:	69726553 	.word	0x69726553
  403028:	65206c61 	.word	0x65206c61
  40302c:	726f7272 	.word	0x726f7272
  403030:	00000d21 	.word	0x00000d21
  403034:	66667542 	.word	0x66667542
  403038:	6f207265 	.word	0x6f207265
  40303c:	66726576 	.word	0x66726576
  403040:	21776f6c 	.word	0x21776f6c
  403044:	0000000d 	.word	0x0000000d
  403048:	202d492d 	.word	0x202d492d
  40304c:	74696e49 	.word	0x74696e49
  403050:	696c6169 	.word	0x696c6169
  403054:	5320657a 	.word	0x5320657a
  403058:	61204950 	.word	0x61204950
  40305c:	616d2073 	.word	0x616d2073
  403060:	72657473 	.word	0x72657473
  403064:	0000000d 	.word	0x0000000d

00403068 <_ctype_>:
  403068:	20202000 20202020 28282020 20282828     .         ((((( 
  403078:	20202020 20202020 20202020 20202020                     
  403088:	10108820 10101010 10101010 10101010      ...............
  403098:	04040410 04040404 10040404 10101010     ................
  4030a8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4030b8:	01010101 01010101 01010101 10101010     ................
  4030c8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4030d8:	02020202 02020202 02020202 10101010     ................
  4030e8:	00000020 00000000 00000000 00000000      ...............
	...
  40316c:	00000043                                C...

00403170 <_global_impure_ptr>:
  403170:	20000018 0000000a                       ... ....

00403178 <_init>:
  403178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40317a:	bf00      	nop
  40317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40317e:	bc08      	pop	{r3}
  403180:	469e      	mov	lr, r3
  403182:	4770      	bx	lr

00403184 <__init_array_start>:
  403184:	004016c5 	.word	0x004016c5

00403188 <__frame_dummy_init_array_entry>:
  403188:	004000f1                                ..@.

0040318c <_fini>:
  40318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40318e:	bf00      	nop
  403190:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403192:	bc08      	pop	{r3}
  403194:	469e      	mov	lr, r3
  403196:	4770      	bx	lr

00403198 <__fini_array_start>:
  403198:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <__ctype_ptr__>:
20000010:	3068 0040 0000 0000                         h0@.....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
2000004c:	316c 0040 0000 0000 0000 0000 0000 0000     l1@.............
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000440 <_impure_ptr>:
20000440:	0018 2000                                   ... 

20000444 <__malloc_av_>:
	...
2000044c:	0444 2000 0444 2000 044c 2000 044c 2000     D.. D.. L.. L.. 
2000045c:	0454 2000 0454 2000 045c 2000 045c 2000     T.. T.. \.. \.. 
2000046c:	0464 2000 0464 2000 046c 2000 046c 2000     d.. d.. l.. l.. 
2000047c:	0474 2000 0474 2000 047c 2000 047c 2000     t.. t.. |.. |.. 
2000048c:	0484 2000 0484 2000 048c 2000 048c 2000     ... ... ... ... 
2000049c:	0494 2000 0494 2000 049c 2000 049c 2000     ... ... ... ... 
200004ac:	04a4 2000 04a4 2000 04ac 2000 04ac 2000     ... ... ... ... 
200004bc:	04b4 2000 04b4 2000 04bc 2000 04bc 2000     ... ... ... ... 
200004cc:	04c4 2000 04c4 2000 04cc 2000 04cc 2000     ... ... ... ... 
200004dc:	04d4 2000 04d4 2000 04dc 2000 04dc 2000     ... ... ... ... 
200004ec:	04e4 2000 04e4 2000 04ec 2000 04ec 2000     ... ... ... ... 
200004fc:	04f4 2000 04f4 2000 04fc 2000 04fc 2000     ... ... ... ... 
2000050c:	0504 2000 0504 2000 050c 2000 050c 2000     ... ... ... ... 
2000051c:	0514 2000 0514 2000 051c 2000 051c 2000     ... ... ... ... 
2000052c:	0524 2000 0524 2000 052c 2000 052c 2000     $.. $.. ,.. ,.. 
2000053c:	0534 2000 0534 2000 053c 2000 053c 2000     4.. 4.. <.. <.. 
2000054c:	0544 2000 0544 2000 054c 2000 054c 2000     D.. D.. L.. L.. 
2000055c:	0554 2000 0554 2000 055c 2000 055c 2000     T.. T.. \.. \.. 
2000056c:	0564 2000 0564 2000 056c 2000 056c 2000     d.. d.. l.. l.. 
2000057c:	0574 2000 0574 2000 057c 2000 057c 2000     t.. t.. |.. |.. 
2000058c:	0584 2000 0584 2000 058c 2000 058c 2000     ... ... ... ... 
2000059c:	0594 2000 0594 2000 059c 2000 059c 2000     ... ... ... ... 
200005ac:	05a4 2000 05a4 2000 05ac 2000 05ac 2000     ... ... ... ... 
200005bc:	05b4 2000 05b4 2000 05bc 2000 05bc 2000     ... ... ... ... 
200005cc:	05c4 2000 05c4 2000 05cc 2000 05cc 2000     ... ... ... ... 
200005dc:	05d4 2000 05d4 2000 05dc 2000 05dc 2000     ... ... ... ... 
200005ec:	05e4 2000 05e4 2000 05ec 2000 05ec 2000     ... ... ... ... 
200005fc:	05f4 2000 05f4 2000 05fc 2000 05fc 2000     ... ... ... ... 
2000060c:	0604 2000 0604 2000 060c 2000 060c 2000     ... ... ... ... 
2000061c:	0614 2000 0614 2000 061c 2000 061c 2000     ... ... ... ... 
2000062c:	0624 2000 0624 2000 062c 2000 062c 2000     $.. $.. ,.. ,.. 
2000063c:	0634 2000 0634 2000 063c 2000 063c 2000     4.. 4.. <.. <.. 
2000064c:	0644 2000 0644 2000 064c 2000 064c 2000     D.. D.. L.. L.. 
2000065c:	0654 2000 0654 2000 065c 2000 065c 2000     T.. T.. \.. \.. 
2000066c:	0664 2000 0664 2000 066c 2000 066c 2000     d.. d.. l.. l.. 
2000067c:	0674 2000 0674 2000 067c 2000 067c 2000     t.. t.. |.. |.. 
2000068c:	0684 2000 0684 2000 068c 2000 068c 2000     ... ... ... ... 
2000069c:	0694 2000 0694 2000 069c 2000 069c 2000     ... ... ... ... 
200006ac:	06a4 2000 06a4 2000 06ac 2000 06ac 2000     ... ... ... ... 
200006bc:	06b4 2000 06b4 2000 06bc 2000 06bc 2000     ... ... ... ... 
200006cc:	06c4 2000 06c4 2000 06cc 2000 06cc 2000     ... ... ... ... 
200006dc:	06d4 2000 06d4 2000 06dc 2000 06dc 2000     ... ... ... ... 
200006ec:	06e4 2000 06e4 2000 06ec 2000 06ec 2000     ... ... ... ... 
200006fc:	06f4 2000 06f4 2000 06fc 2000 06fc 2000     ... ... ... ... 
2000070c:	0704 2000 0704 2000 070c 2000 070c 2000     ... ... ... ... 
2000071c:	0714 2000 0714 2000 071c 2000 071c 2000     ... ... ... ... 
2000072c:	0724 2000 0724 2000 072c 2000 072c 2000     $.. $.. ,.. ,.. 
2000073c:	0734 2000 0734 2000 073c 2000 073c 2000     4.. 4.. <.. <.. 
2000074c:	0744 2000 0744 2000 074c 2000 074c 2000     D.. D.. L.. L.. 
2000075c:	0754 2000 0754 2000 075c 2000 075c 2000     T.. T.. \.. \.. 
2000076c:	0764 2000 0764 2000 076c 2000 076c 2000     d.. d.. l.. l.. 
2000077c:	0774 2000 0774 2000 077c 2000 077c 2000     t.. t.. |.. |.. 
2000078c:	0784 2000 0784 2000 078c 2000 078c 2000     ... ... ... ... 
2000079c:	0794 2000 0794 2000 079c 2000 079c 2000     ... ... ... ... 
200007ac:	07a4 2000 07a4 2000 07ac 2000 07ac 2000     ... ... ... ... 
200007bc:	07b4 2000 07b4 2000 07bc 2000 07bc 2000     ... ... ... ... 
200007cc:	07c4 2000 07c4 2000 07cc 2000 07cc 2000     ... ... ... ... 
200007dc:	07d4 2000 07d4 2000 07dc 2000 07dc 2000     ... ... ... ... 
200007ec:	07e4 2000 07e4 2000 07ec 2000 07ec 2000     ... ... ... ... 
200007fc:	07f4 2000 07f4 2000 07fc 2000 07fc 2000     ... ... ... ... 
2000080c:	0804 2000 0804 2000 080c 2000 080c 2000     ... ... ... ... 
2000081c:	0814 2000 0814 2000 081c 2000 081c 2000     ... ... ... ... 
2000082c:	0824 2000 0824 2000 082c 2000 082c 2000     $.. $.. ,.. ,.. 
2000083c:	0834 2000 0834 2000 083c 2000 083c 2000     4.. 4.. <.. <.. 

2000084c <__malloc_trim_threshold>:
2000084c:	0000 0002                                   ....

20000850 <__malloc_sbrk_base>:
20000850:	ffff ffff                                   ....
