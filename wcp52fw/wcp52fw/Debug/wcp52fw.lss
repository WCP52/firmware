
wcp52fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b94  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20000000  00402b94  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dc  20000844  004033d8  00010844  2**2
                  ALLOC
  3 .stack        00003000  20000920  004034b4  00010844  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001086e  2**0
                  CONTENTS, READONLY
  6 .debug_info   00009472  00000000  00000000  000108c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001997  00000000  00000000  00019d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000039d3  00000000  00000000  0001b6d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000880  00000000  00000000  0001f0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007e0  00000000  00000000  0001f925  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001216d  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000092f9  00000000  00000000  00032272  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0004dfd2  00000000  00000000  0003b56b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001998  00000000  00000000  00089540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003920 	.word	0x20003920
  400004:	00400aa1 	.word	0x00400aa1
  400008:	00400a9d 	.word	0x00400a9d
  40000c:	00400a9d 	.word	0x00400a9d
  400010:	00400a9d 	.word	0x00400a9d
  400014:	00400a9d 	.word	0x00400a9d
  400018:	00400a9d 	.word	0x00400a9d
	...
  40002c:	00400a9d 	.word	0x00400a9d
  400030:	00400a9d 	.word	0x00400a9d
  400034:	00000000 	.word	0x00000000
  400038:	00400a9d 	.word	0x00400a9d
  40003c:	00400231 	.word	0x00400231
  400040:	00400a9d 	.word	0x00400a9d
  400044:	00400a9d 	.word	0x00400a9d
  400048:	00400a9d 	.word	0x00400a9d
  40004c:	00400a9d 	.word	0x00400a9d
  400050:	00400a9d 	.word	0x00400a9d
  400054:	00400a9d 	.word	0x00400a9d
  400058:	00400a9d 	.word	0x00400a9d
  40005c:	00000000 	.word	0x00000000
  400060:	00400a9d 	.word	0x00400a9d
  400064:	00400a9d 	.word	0x00400a9d
  400068:	00000000 	.word	0x00000000
  40006c:	00400899 	.word	0x00400899
  400070:	004008ad 	.word	0x004008ad
  400074:	004008c1 	.word	0x004008c1
  400078:	00400a9d 	.word	0x00400a9d
  40007c:	00400a9d 	.word	0x00400a9d
	...
  400088:	00400a9d 	.word	0x00400a9d
  40008c:	00400a9d 	.word	0x00400a9d
  400090:	00400a9d 	.word	0x00400a9d
  400094:	00400a9d 	.word	0x00400a9d
  400098:	00400a9d 	.word	0x00400a9d
  40009c:	00400a9d 	.word	0x00400a9d
  4000a0:	00400a9d 	.word	0x00400a9d
  4000a4:	00400a9d 	.word	0x00400a9d
  4000a8:	00400a9d 	.word	0x00400a9d
  4000ac:	00400a9d 	.word	0x00400a9d
  4000b0:	00400a9d 	.word	0x00400a9d
  4000b4:	00400a9d 	.word	0x00400a9d
  4000b8:	00400a9d 	.word	0x00400a9d
  4000bc:	00400a9d 	.word	0x00400a9d
  4000c0:	00400a9d 	.word	0x00400a9d
  4000c4:	00400a9d 	.word	0x00400a9d
  4000c8:	00400a9d 	.word	0x00400a9d

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000844 	.word	0x20000844
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402b94 	.word	0x00402b94

004000f0 <frame_dummy>:
  4000f0:	b508      	push	{r3, lr}
  4000f2:	4b06      	ldr	r3, [pc, #24]	; (40010c <frame_dummy+0x1c>)
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4806      	ldr	r0, [pc, #24]	; (400110 <frame_dummy+0x20>)
  4000f8:	4906      	ldr	r1, [pc, #24]	; (400114 <frame_dummy+0x24>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4806      	ldr	r0, [pc, #24]	; (400118 <frame_dummy+0x28>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b113      	cbz	r3, 40010a <frame_dummy+0x1a>
  400104:	4b05      	ldr	r3, [pc, #20]	; (40011c <frame_dummy+0x2c>)
  400106:	b103      	cbz	r3, 40010a <frame_dummy+0x1a>
  400108:	4798      	blx	r3
  40010a:	bd08      	pop	{r3, pc}
  40010c:	00000000 	.word	0x00000000
  400110:	00402b94 	.word	0x00402b94
  400114:	20000848 	.word	0x20000848
  400118:	00402b94 	.word	0x00402b94
  40011c:	00000000 	.word	0x00000000

00400120 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400120:	b5f0      	push	{r4, r5, r6, r7, lr}
  400122:	b083      	sub	sp, #12
  400124:	4605      	mov	r5, r0
  400126:	460c      	mov	r4, r1
	uint32_t val = 0;
  400128:	2300      	movs	r3, #0
  40012a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40012c:	4b18      	ldr	r3, [pc, #96]	; (400190 <usart_serial_getchar+0x70>)
  40012e:	4298      	cmp	r0, r3
  400130:	d107      	bne.n	400142 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400132:	461f      	mov	r7, r3
  400134:	4e17      	ldr	r6, [pc, #92]	; (400194 <usart_serial_getchar+0x74>)
  400136:	4638      	mov	r0, r7
  400138:	4621      	mov	r1, r4
  40013a:	47b0      	blx	r6
  40013c:	2800      	cmp	r0, #0
  40013e:	d1fa      	bne.n	400136 <usart_serial_getchar+0x16>
  400140:	e017      	b.n	400172 <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400142:	4b15      	ldr	r3, [pc, #84]	; (400198 <usart_serial_getchar+0x78>)
  400144:	4298      	cmp	r0, r3
  400146:	d107      	bne.n	400158 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400148:	461e      	mov	r6, r3
  40014a:	4d12      	ldr	r5, [pc, #72]	; (400194 <usart_serial_getchar+0x74>)
  40014c:	4630      	mov	r0, r6
  40014e:	4621      	mov	r1, r4
  400150:	47a8      	blx	r5
  400152:	2800      	cmp	r0, #0
  400154:	d1fa      	bne.n	40014c <usart_serial_getchar+0x2c>
  400156:	e018      	b.n	40018a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400158:	4b10      	ldr	r3, [pc, #64]	; (40019c <usart_serial_getchar+0x7c>)
  40015a:	4298      	cmp	r0, r3
  40015c:	d109      	bne.n	400172 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  40015e:	461e      	mov	r6, r3
  400160:	4d0f      	ldr	r5, [pc, #60]	; (4001a0 <usart_serial_getchar+0x80>)
  400162:	4630      	mov	r0, r6
  400164:	a901      	add	r1, sp, #4
  400166:	47a8      	blx	r5
  400168:	2800      	cmp	r0, #0
  40016a:	d1fa      	bne.n	400162 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  40016c:	9b01      	ldr	r3, [sp, #4]
  40016e:	7023      	strb	r3, [r4, #0]
  400170:	e00b      	b.n	40018a <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400172:	4b0c      	ldr	r3, [pc, #48]	; (4001a4 <usart_serial_getchar+0x84>)
  400174:	429d      	cmp	r5, r3
  400176:	d108      	bne.n	40018a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400178:	461e      	mov	r6, r3
  40017a:	4d09      	ldr	r5, [pc, #36]	; (4001a0 <usart_serial_getchar+0x80>)
  40017c:	4630      	mov	r0, r6
  40017e:	a901      	add	r1, sp, #4
  400180:	47a8      	blx	r5
  400182:	2800      	cmp	r0, #0
  400184:	d1fa      	bne.n	40017c <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400186:	9b01      	ldr	r3, [sp, #4]
  400188:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40018a:	b003      	add	sp, #12
  40018c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40018e:	bf00      	nop
  400190:	400e0600 	.word	0x400e0600
  400194:	00400a5d 	.word	0x00400a5d
  400198:	400e0800 	.word	0x400e0800
  40019c:	40024000 	.word	0x40024000
  4001a0:	00400a85 	.word	0x00400a85
  4001a4:	40028000 	.word	0x40028000

004001a8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4001a8:	b570      	push	{r4, r5, r6, lr}
  4001aa:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4001ac:	4b1a      	ldr	r3, [pc, #104]	; (400218 <usart_serial_putchar+0x70>)
  4001ae:	4298      	cmp	r0, r3
  4001b0:	d107      	bne.n	4001c2 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001b2:	461e      	mov	r6, r3
  4001b4:	4d19      	ldr	r5, [pc, #100]	; (40021c <usart_serial_putchar+0x74>)
  4001b6:	4630      	mov	r0, r6
  4001b8:	4621      	mov	r1, r4
  4001ba:	47a8      	blx	r5
  4001bc:	2800      	cmp	r0, #0
  4001be:	d1fa      	bne.n	4001b6 <usart_serial_putchar+0xe>
  4001c0:	e020      	b.n	400204 <usart_serial_putchar+0x5c>
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4001c2:	4b17      	ldr	r3, [pc, #92]	; (400220 <usart_serial_putchar+0x78>)
  4001c4:	4298      	cmp	r0, r3
  4001c6:	d107      	bne.n	4001d8 <usart_serial_putchar+0x30>
		while (uart_write((Uart*)p_usart, c)!=0);
  4001c8:	461e      	mov	r6, r3
  4001ca:	4d14      	ldr	r5, [pc, #80]	; (40021c <usart_serial_putchar+0x74>)
  4001cc:	4630      	mov	r0, r6
  4001ce:	4621      	mov	r1, r4
  4001d0:	47a8      	blx	r5
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d1fa      	bne.n	4001cc <usart_serial_putchar+0x24>
  4001d6:	e017      	b.n	400208 <usart_serial_putchar+0x60>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4001d8:	4b12      	ldr	r3, [pc, #72]	; (400224 <usart_serial_putchar+0x7c>)
  4001da:	4298      	cmp	r0, r3
  4001dc:	d107      	bne.n	4001ee <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
  4001de:	461e      	mov	r6, r3
  4001e0:	4d11      	ldr	r5, [pc, #68]	; (400228 <usart_serial_putchar+0x80>)
  4001e2:	4630      	mov	r0, r6
  4001e4:	4621      	mov	r1, r4
  4001e6:	47a8      	blx	r5
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d1fa      	bne.n	4001e2 <usart_serial_putchar+0x3a>
  4001ec:	e00e      	b.n	40020c <usart_serial_putchar+0x64>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4001ee:	4b0f      	ldr	r3, [pc, #60]	; (40022c <usart_serial_putchar+0x84>)
  4001f0:	4298      	cmp	r0, r3
  4001f2:	d10d      	bne.n	400210 <usart_serial_putchar+0x68>
		while (usart_write(p_usart, c)!=0);
  4001f4:	461e      	mov	r6, r3
  4001f6:	4d0c      	ldr	r5, [pc, #48]	; (400228 <usart_serial_putchar+0x80>)
  4001f8:	4630      	mov	r0, r6
  4001fa:	4621      	mov	r1, r4
  4001fc:	47a8      	blx	r5
  4001fe:	2800      	cmp	r0, #0
  400200:	d1fa      	bne.n	4001f8 <usart_serial_putchar+0x50>
  400202:	e007      	b.n	400214 <usart_serial_putchar+0x6c>
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
  400204:	2001      	movs	r0, #1
  400206:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
  400208:	2001      	movs	r0, #1
  40020a:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
  40020c:	2001      	movs	r0, #1
  40020e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400210:	2000      	movs	r0, #0
  400212:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
  400214:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
  400216:	bd70      	pop	{r4, r5, r6, pc}
  400218:	400e0600 	.word	0x400e0600
  40021c:	00400a4d 	.word	0x00400a4d
  400220:	400e0800 	.word	0x400e0800
  400224:	40024000 	.word	0x40024000
  400228:	00400a71 	.word	0x00400a71
  40022c:	40028000 	.word	0x40028000

00400230 <SysTick_Handler>:

/**
 * \brief Systick handler, start new conversion.
 */
void SysTick_Handler(void)
{
  400230:	4770      	bx	lr
  400232:	bf00      	nop

00400234 <get_line_from_serial>:
 * \param buflen	Length of buffer
 * \return 0 on success, 1 on error
 */
int get_line_from_serial (char *buffer, size_t buflen);
int get_line_from_serial (char *buffer, size_t buflen)
{
  400234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400238:	4607      	mov	r7, r0
	/* Implement our own getline so we can easily complain if the length goes
	 * over. */
	size_t i;
	for (i = 0; i < buflen - 1; ++i) {
  40023a:	1e4e      	subs	r6, r1, #1
  40023c:	d02d      	beq.n	40029a <get_line_from_serial+0x66>
  40023e:	2400      	movs	r4, #0
		int char_from_serial = getchar ();
  400240:	4d19      	ldr	r5, [pc, #100]	; (4002a8 <get_line_from_serial+0x74>)
  400242:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4002b8 <get_line_from_serial+0x84>
  400246:	682b      	ldr	r3, [r5, #0]
  400248:	6859      	ldr	r1, [r3, #4]
  40024a:	684a      	ldr	r2, [r1, #4]
  40024c:	3a01      	subs	r2, #1
  40024e:	604a      	str	r2, [r1, #4]
  400250:	2a00      	cmp	r2, #0
  400252:	da03      	bge.n	40025c <get_line_from_serial+0x28>
  400254:	4618      	mov	r0, r3
  400256:	6859      	ldr	r1, [r3, #4]
  400258:	47c0      	blx	r8
  40025a:	e004      	b.n	400266 <get_line_from_serial+0x32>
  40025c:	685a      	ldr	r2, [r3, #4]
  40025e:	6813      	ldr	r3, [r2, #0]
  400260:	1c59      	adds	r1, r3, #1
  400262:	6011      	str	r1, [r2, #0]
  400264:	7818      	ldrb	r0, [r3, #0]
		if (char_from_serial < 0 || char_from_serial == EOF) {
  400266:	2800      	cmp	r0, #0
  400268:	da05      	bge.n	400276 <get_line_from_serial+0x42>
			puts ("Serial error!\r");
  40026a:	4810      	ldr	r0, [pc, #64]	; (4002ac <get_line_from_serial+0x78>)
  40026c:	4b10      	ldr	r3, [pc, #64]	; (4002b0 <get_line_from_serial+0x7c>)
  40026e:	4798      	blx	r3
			return 1;
  400270:	2001      	movs	r0, #1
  400272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (char_from_serial == '\r' || char_from_serial == '\n') {
  400276:	280d      	cmp	r0, #13
  400278:	d003      	beq.n	400282 <get_line_from_serial+0x4e>
  40027a:	280a      	cmp	r0, #10
  40027c:	d109      	bne.n	400292 <get_line_from_serial+0x5e>
  40027e:	4623      	mov	r3, r4
  400280:	e000      	b.n	400284 <get_line_from_serial+0x50>
  400282:	4623      	mov	r3, r4
			/* End of line */
			buffer[i] = 0;
  400284:	2200      	movs	r2, #0
  400286:	54fa      	strb	r2, [r7, r3]
			break;
		}
		buffer[i] = (char) char_from_serial;
	}
	
	if (i == buflen - 1) {
  400288:	42a6      	cmp	r6, r4
  40028a:	d006      	beq.n	40029a <get_line_from_serial+0x66>
		/* Reached the end without getting a newline. */
		puts ("Buffer overflow!\r");
		return 1;
	} else {
		return 0;
  40028c:	4610      	mov	r0, r2
  40028e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (char_from_serial == '\r' || char_from_serial == '\n') {
			/* End of line */
			buffer[i] = 0;
			break;
		}
		buffer[i] = (char) char_from_serial;
  400292:	5538      	strb	r0, [r7, r4]
int get_line_from_serial (char *buffer, size_t buflen)
{
	/* Implement our own getline so we can easily complain if the length goes
	 * over. */
	size_t i;
	for (i = 0; i < buflen - 1; ++i) {
  400294:	3401      	adds	r4, #1
  400296:	42b4      	cmp	r4, r6
  400298:	d1d5      	bne.n	400246 <get_line_from_serial+0x12>
		buffer[i] = (char) char_from_serial;
	}
	
	if (i == buflen - 1) {
		/* Reached the end without getting a newline. */
		puts ("Buffer overflow!\r");
  40029a:	4806      	ldr	r0, [pc, #24]	; (4002b4 <get_line_from_serial+0x80>)
  40029c:	4b04      	ldr	r3, [pc, #16]	; (4002b0 <get_line_from_serial+0x7c>)
  40029e:	4798      	blx	r3
		return 1;
  4002a0:	2001      	movs	r0, #1
	} else {
		return 0;
	}
}
  4002a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002a6:	bf00      	nop
  4002a8:	20000430 	.word	0x20000430
  4002ac:	00402a3c 	.word	0x00402a3c
  4002b0:	00400e6d 	.word	0x00400e6d
  4002b4:	00402a4c 	.word	0x00402a4c
  4002b8:	00400e7d 	.word	0x00400e7d

004002bc <cmd_process>:
/**
 * \brief Read a line from stdin and interpret it.
 */
void cmd_process (void);
void cmd_process (void)
{
  4002bc:	b510      	push	{r4, lr}
  4002be:	b0c0      	sub	sp, #256	; 0x100
	char serial_buffer[256];
	
	if (get_line_from_serial (serial_buffer, sizeof serial_buffer)) {
  4002c0:	4668      	mov	r0, sp
  4002c2:	f44f 7180 	mov.w	r1, #256	; 0x100
  4002c6:	4b16      	ldr	r3, [pc, #88]	; (400320 <cmd_process+0x64>)
  4002c8:	4798      	blx	r3
  4002ca:	bb30      	cbnz	r0, 40031a <cmd_process+0x5e>
		return;
	}
	
	/* First character is the command */
	char cmd = serial_buffer [0];
  4002cc:	f89d 4000 	ldrb.w	r4, [sp]
	
	/* Rest is the argument */
	char *arg = serial_buffer + 1;
	
	/* Advance the argument until no more spaces exist */
	while (*arg) {
  4002d0:	f89d 3001 	ldrb.w	r3, [sp, #1]
  4002d4:	b1a3      	cbz	r3, 400300 <cmd_process+0x44>
		if (!isspace ((int) arg[0])) break;
  4002d6:	4a13      	ldr	r2, [pc, #76]	; (400324 <cmd_process+0x68>)
  4002d8:	6811      	ldr	r1, [r2, #0]
  4002da:	440b      	add	r3, r1
  4002dc:	785b      	ldrb	r3, [r3, #1]
  4002de:	f013 0f08 	tst.w	r3, #8
  4002e2:	d010      	beq.n	400306 <cmd_process+0x4a>
  4002e4:	f10d 0302 	add.w	r3, sp, #2
  4002e8:	e004      	b.n	4002f4 <cmd_process+0x38>
  4002ea:	440a      	add	r2, r1
  4002ec:	7852      	ldrb	r2, [r2, #1]
  4002ee:	f012 0f08 	tst.w	r2, #8
  4002f2:	d00a      	beq.n	40030a <cmd_process+0x4e>
		++arg;
  4002f4:	4618      	mov	r0, r3
	
	/* Rest is the argument */
	char *arg = serial_buffer + 1;
	
	/* Advance the argument until no more spaces exist */
	while (*arg) {
  4002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
  4002fa:	2a00      	cmp	r2, #0
  4002fc:	d1f5      	bne.n	4002ea <cmd_process+0x2e>
  4002fe:	e004      	b.n	40030a <cmd_process+0x4e>
	
	/* First character is the command */
	char cmd = serial_buffer [0];
	
	/* Rest is the argument */
	char *arg = serial_buffer + 1;
  400300:	f10d 0001 	add.w	r0, sp, #1
  400304:	e001      	b.n	40030a <cmd_process+0x4e>
  400306:	f10d 0001 	add.w	r0, sp, #1
		if (!isspace ((int) arg[0])) break;
		++arg;
	}
	
	/* Branch! */
	switch (cmd) {
  40030a:	2c45      	cmp	r4, #69	; 0x45
  40030c:	d001      	beq.n	400312 <cmd_process+0x56>
  40030e:	2c65      	cmp	r4, #101	; 0x65
  400310:	d103      	bne.n	40031a <cmd_process+0x5e>
		case 'e':
		case 'E':
			/* Echo */
			puts (arg);
  400312:	4c05      	ldr	r4, [pc, #20]	; (400328 <cmd_process+0x6c>)
  400314:	47a0      	blx	r4
			puts ("\r");
  400316:	4805      	ldr	r0, [pc, #20]	; (40032c <cmd_process+0x70>)
  400318:	47a0      	blx	r4
	}
}
  40031a:	b040      	add	sp, #256	; 0x100
  40031c:	bd10      	pop	{r4, pc}
  40031e:	bf00      	nop
  400320:	00400235 	.word	0x00400235
  400324:	20000004 	.word	0x20000004
  400328:	00400e6d 	.word	0x00400e6d
  40032c:	00402a5c 	.word	0x00402a5c

00400330 <main>:
 * and start conversion.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  400330:	b500      	push	{lr}
  400332:	b085      	sub	sp, #20
	/* Initialize the SAM system. */
	sysclk_init();
  400334:	4b1a      	ldr	r3, [pc, #104]	; (4003a0 <main+0x70>)
  400336:	4798      	blx	r3
	board_init();
  400338:	4b1a      	ldr	r3, [pc, #104]	; (4003a4 <main+0x74>)
  40033a:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40033c:	2008      	movs	r0, #8
  40033e:	4d1a      	ldr	r5, [pc, #104]	; (4003a8 <main+0x78>)
  400340:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400342:	4c1a      	ldr	r4, [pc, #104]	; (4003ac <main+0x7c>)
  400344:	4b1a      	ldr	r3, [pc, #104]	; (4003b0 <main+0x80>)
  400346:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400348:	4a1a      	ldr	r2, [pc, #104]	; (4003b4 <main+0x84>)
  40034a:	4b1b      	ldr	r3, [pc, #108]	; (4003b8 <main+0x88>)
  40034c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40034e:	4a1b      	ldr	r2, [pc, #108]	; (4003bc <main+0x8c>)
  400350:	4b1b      	ldr	r3, [pc, #108]	; (4003c0 <main+0x90>)
  400352:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400354:	4b1b      	ldr	r3, [pc, #108]	; (4003c4 <main+0x94>)
  400356:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400358:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40035c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  40035e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400362:	9303      	str	r3, [sp, #12]
  400364:	2008      	movs	r0, #8
  400366:	47a8      	blx	r5
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400368:	4620      	mov	r0, r4
  40036a:	a901      	add	r1, sp, #4
  40036c:	4b16      	ldr	r3, [pc, #88]	; (4003c8 <main+0x98>)
  40036e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400370:	4d16      	ldr	r5, [pc, #88]	; (4003cc <main+0x9c>)
  400372:	682b      	ldr	r3, [r5, #0]
  400374:	6898      	ldr	r0, [r3, #8]
  400376:	2100      	movs	r1, #0
  400378:	4c15      	ldr	r4, [pc, #84]	; (4003d0 <main+0xa0>)
  40037a:	47a0      	blx	r4
	setbuf(stdin, NULL);
  40037c:	682b      	ldr	r3, [r5, #0]
  40037e:	6858      	ldr	r0, [r3, #4]
  400380:	2100      	movs	r1, #0
  400382:	47a0      	blx	r4
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  400384:	4b13      	ldr	r3, [pc, #76]	; (4003d4 <main+0xa4>)
  400386:	4a14      	ldr	r2, [pc, #80]	; (4003d8 <main+0xa8>)
  400388:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40038a:	21f0      	movs	r1, #240	; 0xf0
  40038c:	4a13      	ldr	r2, [pc, #76]	; (4003dc <main+0xac>)
  40038e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400392:	2200      	movs	r2, #0
  400394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400396:	2207      	movs	r2, #7
  400398:	601a      	str	r2, [r3, #0]
			puts("-F- Systick configuration error\r");
		}
	}

	for (;;) {
		cmd_process ();
  40039a:	4c11      	ldr	r4, [pc, #68]	; (4003e0 <main+0xb0>)
  40039c:	47a0      	blx	r4
  40039e:	e7fd      	b.n	40039c <main+0x6c>
  4003a0:	004003e5 	.word	0x004003e5
  4003a4:	004004dd 	.word	0x004004dd
  4003a8:	004009bd 	.word	0x004009bd
  4003ac:	400e0600 	.word	0x400e0600
  4003b0:	20000914 	.word	0x20000914
  4003b4:	004001a9 	.word	0x004001a9
  4003b8:	20000910 	.word	0x20000910
  4003bc:	00400121 	.word	0x00400121
  4003c0:	2000090c 	.word	0x2000090c
  4003c4:	07270e00 	.word	0x07270e00
  4003c8:	00400a15 	.word	0x00400a15
  4003cc:	20000430 	.word	0x20000430
  4003d0:	00400eb1 	.word	0x00400eb1
  4003d4:	e000e010 	.word	0xe000e010
  4003d8:	00124f7f 	.word	0x00124f7f
  4003dc:	e000ed00 	.word	0xe000ed00
  4003e0:	004002bd 	.word	0x004002bd

004003e4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4003e4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4003e6:	480e      	ldr	r0, [pc, #56]	; (400420 <sysclk_init+0x3c>)
  4003e8:	4b0e      	ldr	r3, [pc, #56]	; (400424 <sysclk_init+0x40>)
  4003ea:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4003ec:	2000      	movs	r0, #0
  4003ee:	213e      	movs	r1, #62	; 0x3e
  4003f0:	4b0d      	ldr	r3, [pc, #52]	; (400428 <sysclk_init+0x44>)
  4003f2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4003f4:	4c0d      	ldr	r4, [pc, #52]	; (40042c <sysclk_init+0x48>)
  4003f6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4003f8:	2800      	cmp	r0, #0
  4003fa:	d0fc      	beq.n	4003f6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4003fc:	4b0c      	ldr	r3, [pc, #48]	; (400430 <sysclk_init+0x4c>)
  4003fe:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400400:	4a0c      	ldr	r2, [pc, #48]	; (400434 <sysclk_init+0x50>)
  400402:	4b0d      	ldr	r3, [pc, #52]	; (400438 <sysclk_init+0x54>)
  400404:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400406:	4c0d      	ldr	r4, [pc, #52]	; (40043c <sysclk_init+0x58>)
  400408:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40040a:	2800      	cmp	r0, #0
  40040c:	d0fc      	beq.n	400408 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40040e:	2010      	movs	r0, #16
  400410:	4b0b      	ldr	r3, [pc, #44]	; (400440 <sysclk_init+0x5c>)
  400412:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400414:	4b0b      	ldr	r3, [pc, #44]	; (400444 <sysclk_init+0x60>)
  400416:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400418:	4801      	ldr	r0, [pc, #4]	; (400420 <sysclk_init+0x3c>)
  40041a:	4b02      	ldr	r3, [pc, #8]	; (400424 <sysclk_init+0x40>)
  40041c:	4798      	blx	r3
  40041e:	bd10      	pop	{r4, pc}
  400420:	07270e00 	.word	0x07270e00
  400424:	00400c69 	.word	0x00400c69
  400428:	00400939 	.word	0x00400939
  40042c:	0040098d 	.word	0x0040098d
  400430:	0040099d 	.word	0x0040099d
  400434:	20133f01 	.word	0x20133f01
  400438:	400e0400 	.word	0x400e0400
  40043c:	004009ad 	.word	0x004009ad
  400440:	004008d5 	.word	0x004008d5
  400444:	00400b55 	.word	0x00400b55

00400448 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40044c:	460c      	mov	r4, r1
  40044e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
  400450:	b960      	cbnz	r0, 40046c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
  400452:	2a00      	cmp	r2, #0
  400454:	dd0e      	ble.n	400474 <_read+0x2c>
  400456:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400458:	4e09      	ldr	r6, [pc, #36]	; (400480 <_read+0x38>)
  40045a:	4d0a      	ldr	r5, [pc, #40]	; (400484 <_read+0x3c>)
  40045c:	6830      	ldr	r0, [r6, #0]
  40045e:	4621      	mov	r1, r4
  400460:	682b      	ldr	r3, [r5, #0]
  400462:	4798      	blx	r3
		ptr++;
  400464:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400466:	42bc      	cmp	r4, r7
  400468:	d1f8      	bne.n	40045c <_read+0x14>
  40046a:	e006      	b.n	40047a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  40046c:	f04f 30ff 	mov.w	r0, #4294967295
  400470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
  400474:	2000      	movs	r0, #0
  400476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40047a:	4640      	mov	r0, r8
	}
	return nChars;
}
  40047c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400480:	20000914 	.word	0x20000914
  400484:	2000090c 	.word	0x2000090c

00400488 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40048c:	460e      	mov	r6, r1
  40048e:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400490:	3801      	subs	r0, #1
  400492:	2802      	cmp	r0, #2
  400494:	d80f      	bhi.n	4004b6 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
  400496:	b192      	cbz	r2, 4004be <_write+0x36>
  400498:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40049a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4004d8 <_write+0x50>
  40049e:	4f0d      	ldr	r7, [pc, #52]	; (4004d4 <_write+0x4c>)
  4004a0:	f8d8 0000 	ldr.w	r0, [r8]
  4004a4:	5d31      	ldrb	r1, [r6, r4]
  4004a6:	683b      	ldr	r3, [r7, #0]
  4004a8:	4798      	blx	r3
  4004aa:	2800      	cmp	r0, #0
  4004ac:	db0a      	blt.n	4004c4 <_write+0x3c>
			return -1;
		}
		++nChars;
  4004ae:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4004b0:	42a5      	cmp	r5, r4
  4004b2:	d1f5      	bne.n	4004a0 <_write+0x18>
  4004b4:	e00a      	b.n	4004cc <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4004b6:	f04f 30ff 	mov.w	r0, #4294967295
  4004ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
  4004be:	2000      	movs	r0, #0
  4004c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4004c4:	f04f 30ff 	mov.w	r0, #4294967295
  4004c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
  4004cc:	4620      	mov	r0, r4
	}
	return nChars;
}
  4004ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004d2:	bf00      	nop
  4004d4:	20000910 	.word	0x20000910
  4004d8:	20000914 	.word	0x20000914

004004dc <board_init>:
#include "ioport.h"
#include "pmc.h"
#include "ioport.h"

void board_init(void)
{
  4004dc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT 
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4004de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4004e2:	4b0e      	ldr	r3, [pc, #56]	; (40051c <board_init+0x40>)
  4004e4:	605a      	str	r2, [r3, #4]
  4004e6:	200b      	movs	r0, #11
  4004e8:	4c0d      	ldr	r4, [pc, #52]	; (400520 <board_init+0x44>)
  4004ea:	47a0      	blx	r4
  4004ec:	200c      	movs	r0, #12
  4004ee:	47a0      	blx	r4
  4004f0:	200d      	movs	r0, #13
  4004f2:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4004f4:	204a      	movs	r0, #74	; 0x4a
  4004f6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4004fa:	4c0a      	ldr	r4, [pc, #40]	; (400524 <board_init+0x48>)
  4004fc:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  4004fe:	2051      	movs	r0, #81	; 0x51
  400500:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400504:	47a0      	blx	r4
	
	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  400506:	2005      	movs	r0, #5
  400508:	4907      	ldr	r1, [pc, #28]	; (400528 <board_init+0x4c>)
  40050a:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  40050c:	4807      	ldr	r0, [pc, #28]	; (40052c <board_init+0x50>)
  40050e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400512:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400516:	4b06      	ldr	r3, [pc, #24]	; (400530 <board_init+0x54>)
  400518:	4798      	blx	r3
  40051a:	bd10      	pop	{r4, pc}
  40051c:	400e1450 	.word	0x400e1450
  400520:	004009bd 	.word	0x004009bd
  400524:	00400629 	.word	0x00400629
  400528:	28000079 	.word	0x28000079
  40052c:	400e0e00 	.word	0x400e0e00
  400530:	0040074d 	.word	0x0040074d

00400534 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  400534:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400536:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  400538:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40053c:	d02e      	beq.n	40059c <pio_set_peripheral+0x68>
  40053e:	d808      	bhi.n	400552 <pio_set_peripheral+0x1e>
  400540:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400544:	d014      	beq.n	400570 <pio_set_peripheral+0x3c>
  400546:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40054a:	d01d      	beq.n	400588 <pio_set_peripheral+0x54>
  40054c:	2900      	cmp	r1, #0
  40054e:	d135      	bne.n	4005bc <pio_set_peripheral+0x88>
  400550:	e035      	b.n	4005be <pio_set_peripheral+0x8a>
  400552:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400556:	d032      	beq.n	4005be <pio_set_peripheral+0x8a>
  400558:	d803      	bhi.n	400562 <pio_set_peripheral+0x2e>
  40055a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40055e:	d027      	beq.n	4005b0 <pio_set_peripheral+0x7c>
  400560:	e02c      	b.n	4005bc <pio_set_peripheral+0x88>
  400562:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400566:	d02a      	beq.n	4005be <pio_set_peripheral+0x8a>
  400568:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40056c:	d027      	beq.n	4005be <pio_set_peripheral+0x8a>
  40056e:	e025      	b.n	4005bc <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400570:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400572:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400574:	43d3      	mvns	r3, r2
  400576:	4021      	ands	r1, r4
  400578:	4019      	ands	r1, r3
  40057a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40057c:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40057e:	6f44      	ldr	r4, [r0, #116]	; 0x74
  400580:	4021      	ands	r1, r4
  400582:	400b      	ands	r3, r1
  400584:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400586:	e019      	b.n	4005bc <pio_set_peripheral+0x88>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400588:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40058a:	4313      	orrs	r3, r2
  40058c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40058e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400590:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400592:	400b      	ands	r3, r1
  400594:	ea23 0302 	bic.w	r3, r3, r2
  400598:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40059a:	e00f      	b.n	4005bc <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40059c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40059e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4005a0:	400b      	ands	r3, r1
  4005a2:	ea23 0302 	bic.w	r3, r3, r2
  4005a6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005a8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005aa:	4313      	orrs	r3, r2
  4005ac:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4005ae:	e005      	b.n	4005bc <pio_set_peripheral+0x88>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005b2:	4313      	orrs	r3, r2
  4005b4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005b6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005b8:	4313      	orrs	r3, r2
  4005ba:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4005bc:	6042      	str	r2, [r0, #4]
}
  4005be:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005c2:	4770      	bx	lr

004005c4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4005c4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005c6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  4005ca:	bf14      	ite	ne
  4005cc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005ce:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4005d0:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  4005d4:	bf14      	ite	ne
  4005d6:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4005d8:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4005da:	f012 0f02 	tst.w	r2, #2
  4005de:	d002      	beq.n	4005e6 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  4005e0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4005e4:	e004      	b.n	4005f0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4005e6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  4005ea:	bf18      	it	ne
  4005ec:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4005f0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4005f2:	6001      	str	r1, [r0, #0]
  4005f4:	4770      	bx	lr
  4005f6:	bf00      	nop

004005f8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4005f8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4005fa:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005fc:	9c01      	ldr	r4, [sp, #4]
  4005fe:	b10c      	cbz	r4, 400604 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400600:	6641      	str	r1, [r0, #100]	; 0x64
  400602:	e000      	b.n	400606 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400604:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400606:	b10b      	cbz	r3, 40060c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400608:	6501      	str	r1, [r0, #80]	; 0x50
  40060a:	e000      	b.n	40060e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40060c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40060e:	b10a      	cbz	r2, 400614 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400610:	6301      	str	r1, [r0, #48]	; 0x30
  400612:	e000      	b.n	400616 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400614:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400616:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400618:	6001      	str	r1, [r0, #0]
}
  40061a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40061e:	4770      	bx	lr

00400620 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400620:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400622:	4770      	bx	lr

00400624 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400624:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400626:	4770      	bx	lr

00400628 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400628:	b570      	push	{r4, r5, r6, lr}
  40062a:	b082      	sub	sp, #8
  40062c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40062e:	0944      	lsrs	r4, r0, #5
  400630:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
  400634:	f204 7407 	addw	r4, r4, #1799	; 0x707
  400638:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40063a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
  40063e:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  400642:	d047      	beq.n	4006d4 <pio_configure_pin+0xac>
  400644:	d809      	bhi.n	40065a <pio_configure_pin+0x32>
  400646:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  40064a:	d021      	beq.n	400690 <pio_configure_pin+0x68>
  40064c:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  400650:	d02f      	beq.n	4006b2 <pio_configure_pin+0x8a>
  400652:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  400656:	d16f      	bne.n	400738 <pio_configure_pin+0x110>
  400658:	e009      	b.n	40066e <pio_configure_pin+0x46>
  40065a:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  40065e:	d055      	beq.n	40070c <pio_configure_pin+0xe4>
  400660:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  400664:	d052      	beq.n	40070c <pio_configure_pin+0xe4>
  400666:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  40066a:	d044      	beq.n	4006f6 <pio_configure_pin+0xce>
  40066c:	e064      	b.n	400738 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40066e:	f000 001f 	and.w	r0, r0, #31
  400672:	2401      	movs	r4, #1
  400674:	4084      	lsls	r4, r0
  400676:	4630      	mov	r0, r6
  400678:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40067c:	4622      	mov	r2, r4
  40067e:	4b30      	ldr	r3, [pc, #192]	; (400740 <pio_configure_pin+0x118>)
  400680:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400682:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400686:	bf14      	ite	ne
  400688:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40068a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40068c:	2001      	movs	r0, #1
  40068e:	e054      	b.n	40073a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400690:	f000 001f 	and.w	r0, r0, #31
  400694:	2401      	movs	r4, #1
  400696:	4084      	lsls	r4, r0
  400698:	4630      	mov	r0, r6
  40069a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40069e:	4622      	mov	r2, r4
  4006a0:	4b27      	ldr	r3, [pc, #156]	; (400740 <pio_configure_pin+0x118>)
  4006a2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4006a4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4006a8:	bf14      	ite	ne
  4006aa:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4006ac:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4006ae:	2001      	movs	r0, #1
  4006b0:	e043      	b.n	40073a <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4006b2:	f000 001f 	and.w	r0, r0, #31
  4006b6:	2401      	movs	r4, #1
  4006b8:	4084      	lsls	r4, r0
  4006ba:	4630      	mov	r0, r6
  4006bc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4006c0:	4622      	mov	r2, r4
  4006c2:	4b1f      	ldr	r3, [pc, #124]	; (400740 <pio_configure_pin+0x118>)
  4006c4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4006c6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4006ca:	bf14      	ite	ne
  4006cc:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4006ce:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4006d0:	2001      	movs	r0, #1
  4006d2:	e032      	b.n	40073a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4006d4:	f000 001f 	and.w	r0, r0, #31
  4006d8:	2401      	movs	r4, #1
  4006da:	4084      	lsls	r4, r0
  4006dc:	4630      	mov	r0, r6
  4006de:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4006e2:	4622      	mov	r2, r4
  4006e4:	4b16      	ldr	r3, [pc, #88]	; (400740 <pio_configure_pin+0x118>)
  4006e6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4006e8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4006ec:	bf14      	ite	ne
  4006ee:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4006f0:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4006f2:	2001      	movs	r0, #1
  4006f4:	e021      	b.n	40073a <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4006f6:	f000 011f 	and.w	r1, r0, #31
  4006fa:	2401      	movs	r4, #1
  4006fc:	4630      	mov	r0, r6
  4006fe:	fa04 f101 	lsl.w	r1, r4, r1
  400702:	462a      	mov	r2, r5
  400704:	4b0f      	ldr	r3, [pc, #60]	; (400744 <pio_configure_pin+0x11c>)
  400706:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400708:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  40070a:	e016      	b.n	40073a <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40070c:	f000 011f 	and.w	r1, r0, #31
  400710:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400712:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  400716:	ea05 0304 	and.w	r3, r5, r4
  40071a:	9300      	str	r3, [sp, #0]
  40071c:	4630      	mov	r0, r6
  40071e:	fa04 f101 	lsl.w	r1, r4, r1
  400722:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400726:	bf14      	ite	ne
  400728:	2200      	movne	r2, #0
  40072a:	2201      	moveq	r2, #1
  40072c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400730:	4d05      	ldr	r5, [pc, #20]	; (400748 <pio_configure_pin+0x120>)
  400732:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
  400734:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400736:	e000      	b.n	40073a <pio_configure_pin+0x112>

	default:
		return 0;
  400738:	2000      	movs	r0, #0
	}

	return 1;
}
  40073a:	b002      	add	sp, #8
  40073c:	bd70      	pop	{r4, r5, r6, pc}
  40073e:	bf00      	nop
  400740:	00400535 	.word	0x00400535
  400744:	004005c5 	.word	0x004005c5
  400748:	004005f9 	.word	0x004005f9

0040074c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  40074c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40074e:	b083      	sub	sp, #12
  400750:	4607      	mov	r7, r0
  400752:	460e      	mov	r6, r1
  400754:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400756:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
  40075a:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
  40075e:	d038      	beq.n	4007d2 <pio_configure_pin_group+0x86>
  400760:	d809      	bhi.n	400776 <pio_configure_pin_group+0x2a>
  400762:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
  400766:	d01c      	beq.n	4007a2 <pio_configure_pin_group+0x56>
  400768:	f1b4 5fc0 	cmp.w	r4, #402653184	; 0x18000000
  40076c:	d025      	beq.n	4007ba <pio_configure_pin_group+0x6e>
  40076e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  400772:	d150      	bne.n	400816 <pio_configure_pin_group+0xca>
  400774:	e009      	b.n	40078a <pio_configure_pin_group+0x3e>
  400776:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
  40077a:	d03a      	beq.n	4007f2 <pio_configure_pin_group+0xa6>
  40077c:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  400780:	d037      	beq.n	4007f2 <pio_configure_pin_group+0xa6>
  400782:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
  400786:	d030      	beq.n	4007ea <pio_configure_pin_group+0x9e>
  400788:	e045      	b.n	400816 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40078a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40078e:	4632      	mov	r2, r6
  400790:	4b22      	ldr	r3, [pc, #136]	; (40081c <pio_configure_pin_group+0xd0>)
  400792:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400794:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400798:	bf14      	ite	ne
  40079a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40079c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40079e:	2001      	movs	r0, #1
  4007a0:	e03a      	b.n	400818 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4007a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007a6:	4632      	mov	r2, r6
  4007a8:	4b1c      	ldr	r3, [pc, #112]	; (40081c <pio_configure_pin_group+0xd0>)
  4007aa:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4007ac:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4007b0:	bf14      	ite	ne
  4007b2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4007b4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4007b6:	2001      	movs	r0, #1
  4007b8:	e02e      	b.n	400818 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4007ba:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4007be:	4632      	mov	r2, r6
  4007c0:	4b16      	ldr	r3, [pc, #88]	; (40081c <pio_configure_pin_group+0xd0>)
  4007c2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4007c4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4007c8:	bf14      	ite	ne
  4007ca:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4007cc:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4007ce:	2001      	movs	r0, #1
  4007d0:	e022      	b.n	400818 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4007d2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4007d6:	4632      	mov	r2, r6
  4007d8:	4b10      	ldr	r3, [pc, #64]	; (40081c <pio_configure_pin_group+0xd0>)
  4007da:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4007dc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4007e0:	bf14      	ite	ne
  4007e2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4007e4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4007e6:	2001      	movs	r0, #1
  4007e8:	e016      	b.n	400818 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4007ea:	4b0d      	ldr	r3, [pc, #52]	; (400820 <pio_configure_pin_group+0xd4>)
  4007ec:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4007ee:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4007f0:	e012      	b.n	400818 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4007f2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4007f6:	f005 0301 	and.w	r3, r5, #1
  4007fa:	9300      	str	r3, [sp, #0]
  4007fc:	4638      	mov	r0, r7
  4007fe:	4631      	mov	r1, r6
  400800:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400804:	bf14      	ite	ne
  400806:	2200      	movne	r2, #0
  400808:	2201      	moveq	r2, #1
  40080a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40080e:	4c05      	ldr	r4, [pc, #20]	; (400824 <pio_configure_pin_group+0xd8>)
  400810:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400812:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400814:	e000      	b.n	400818 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400816:	2000      	movs	r0, #0
	}

	return 1;
}
  400818:	b003      	add	sp, #12
  40081a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40081c:	00400535 	.word	0x00400535
  400820:	004005c5 	.word	0x004005c5
  400824:	004005f9 	.word	0x004005f9

00400828 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40082c:	4681      	mov	r9, r0
  40082e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400830:	4b14      	ldr	r3, [pc, #80]	; (400884 <pio_handler_process+0x5c>)
  400832:	4798      	blx	r3
  400834:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400836:	4648      	mov	r0, r9
  400838:	4b13      	ldr	r3, [pc, #76]	; (400888 <pio_handler_process+0x60>)
  40083a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40083c:	4005      	ands	r5, r0
  40083e:	d017      	beq.n	400870 <pio_handler_process+0x48>
  400840:	4f12      	ldr	r7, [pc, #72]	; (40088c <pio_handler_process+0x64>)
  400842:	f107 040c 	add.w	r4, r7, #12
  400846:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400848:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  40084c:	42b3      	cmp	r3, r6
  40084e:	d10a      	bne.n	400866 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400850:	f854 1c08 	ldr.w	r1, [r4, #-8]
  400854:	4229      	tst	r1, r5
  400856:	d006      	beq.n	400866 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400858:	6823      	ldr	r3, [r4, #0]
  40085a:	4630      	mov	r0, r6
  40085c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40085e:	f854 3c08 	ldr.w	r3, [r4, #-8]
  400862:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400866:	42bc      	cmp	r4, r7
  400868:	d002      	beq.n	400870 <pio_handler_process+0x48>
  40086a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40086c:	2d00      	cmp	r5, #0
  40086e:	d1eb      	bne.n	400848 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400870:	4b07      	ldr	r3, [pc, #28]	; (400890 <pio_handler_process+0x68>)
  400872:	681b      	ldr	r3, [r3, #0]
  400874:	b123      	cbz	r3, 400880 <pio_handler_process+0x58>
		if (pio_capture_handler) {
  400876:	4b07      	ldr	r3, [pc, #28]	; (400894 <pio_handler_process+0x6c>)
  400878:	681b      	ldr	r3, [r3, #0]
  40087a:	b10b      	cbz	r3, 400880 <pio_handler_process+0x58>
			pio_capture_handler(p_pio);
  40087c:	4648      	mov	r0, r9
  40087e:	4798      	blx	r3
  400880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400884:	00400621 	.word	0x00400621
  400888:	00400625 	.word	0x00400625
  40088c:	20000864 	.word	0x20000864
  400890:	20000918 	.word	0x20000918
  400894:	20000860 	.word	0x20000860

00400898 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400898:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40089a:	4802      	ldr	r0, [pc, #8]	; (4008a4 <PIOA_Handler+0xc>)
  40089c:	210b      	movs	r1, #11
  40089e:	4b02      	ldr	r3, [pc, #8]	; (4008a8 <PIOA_Handler+0x10>)
  4008a0:	4798      	blx	r3
  4008a2:	bd08      	pop	{r3, pc}
  4008a4:	400e0e00 	.word	0x400e0e00
  4008a8:	00400829 	.word	0x00400829

004008ac <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4008ac:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4008ae:	4802      	ldr	r0, [pc, #8]	; (4008b8 <PIOB_Handler+0xc>)
  4008b0:	210c      	movs	r1, #12
  4008b2:	4b02      	ldr	r3, [pc, #8]	; (4008bc <PIOB_Handler+0x10>)
  4008b4:	4798      	blx	r3
  4008b6:	bd08      	pop	{r3, pc}
  4008b8:	400e1000 	.word	0x400e1000
  4008bc:	00400829 	.word	0x00400829

004008c0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4008c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4008c2:	4802      	ldr	r0, [pc, #8]	; (4008cc <PIOC_Handler+0xc>)
  4008c4:	210d      	movs	r1, #13
  4008c6:	4b02      	ldr	r3, [pc, #8]	; (4008d0 <PIOC_Handler+0x10>)
  4008c8:	4798      	blx	r3
  4008ca:	bd08      	pop	{r3, pc}
  4008cc:	400e1200 	.word	0x400e1200
  4008d0:	00400829 	.word	0x00400829

004008d4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4008d4:	4b17      	ldr	r3, [pc, #92]	; (400934 <pmc_switch_mck_to_pllack+0x60>)
  4008d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4008d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  4008dc:	4310      	orrs	r0, r2
  4008de:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4008e2:	f013 0f08 	tst.w	r3, #8
  4008e6:	d109      	bne.n	4008fc <pmc_switch_mck_to_pllack+0x28>
  4008e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4008ec:	4911      	ldr	r1, [pc, #68]	; (400934 <pmc_switch_mck_to_pllack+0x60>)
  4008ee:	e001      	b.n	4008f4 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008f0:	3b01      	subs	r3, #1
  4008f2:	d019      	beq.n	400928 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008f4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4008f6:	f012 0f08 	tst.w	r2, #8
  4008fa:	d0f9      	beq.n	4008f0 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4008fc:	4b0d      	ldr	r3, [pc, #52]	; (400934 <pmc_switch_mck_to_pllack+0x60>)
  4008fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400900:	f022 0203 	bic.w	r2, r2, #3
  400904:	f042 0202 	orr.w	r2, r2, #2
  400908:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40090a:	6e98      	ldr	r0, [r3, #104]	; 0x68
  40090c:	f010 0008 	ands.w	r0, r0, #8
  400910:	d10c      	bne.n	40092c <pmc_switch_mck_to_pllack+0x58>
  400912:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400916:	4907      	ldr	r1, [pc, #28]	; (400934 <pmc_switch_mck_to_pllack+0x60>)
  400918:	e001      	b.n	40091e <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40091a:	3b01      	subs	r3, #1
  40091c:	d008      	beq.n	400930 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40091e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400920:	f012 0f08 	tst.w	r2, #8
  400924:	d0f9      	beq.n	40091a <pmc_switch_mck_to_pllack+0x46>
  400926:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400928:	2001      	movs	r0, #1
  40092a:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40092c:	2000      	movs	r0, #0
  40092e:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400930:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400932:	4770      	bx	lr
  400934:	400e0400 	.word	0x400e0400

00400938 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400938:	b138      	cbz	r0, 40094a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40093a:	4911      	ldr	r1, [pc, #68]	; (400980 <pmc_switch_mainck_to_xtal+0x48>)
  40093c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40093e:	4a11      	ldr	r2, [pc, #68]	; (400984 <pmc_switch_mainck_to_xtal+0x4c>)
  400940:	401a      	ands	r2, r3
  400942:	4b11      	ldr	r3, [pc, #68]	; (400988 <pmc_switch_mainck_to_xtal+0x50>)
  400944:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400946:	620b      	str	r3, [r1, #32]
  400948:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40094a:	4a0d      	ldr	r2, [pc, #52]	; (400980 <pmc_switch_mainck_to_xtal+0x48>)
  40094c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40094e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400952:	f023 0303 	bic.w	r3, r3, #3
  400956:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40095a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40095e:	0209      	lsls	r1, r1, #8
  400960:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400962:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400964:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400966:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400968:	f013 0f01 	tst.w	r3, #1
  40096c:	d0fb      	beq.n	400966 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40096e:	4a04      	ldr	r2, [pc, #16]	; (400980 <pmc_switch_mainck_to_xtal+0x48>)
  400970:	6a13      	ldr	r3, [r2, #32]
  400972:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40097a:	6213      	str	r3, [r2, #32]
  40097c:	4770      	bx	lr
  40097e:	bf00      	nop
  400980:	400e0400 	.word	0x400e0400
  400984:	fec8fffc 	.word	0xfec8fffc
  400988:	01370002 	.word	0x01370002

0040098c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40098c:	4b02      	ldr	r3, [pc, #8]	; (400998 <pmc_osc_is_ready_mainck+0xc>)
  40098e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400990:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400994:	4770      	bx	lr
  400996:	bf00      	nop
  400998:	400e0400 	.word	0x400e0400

0040099c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40099c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4009a0:	4b01      	ldr	r3, [pc, #4]	; (4009a8 <pmc_disable_pllack+0xc>)
  4009a2:	629a      	str	r2, [r3, #40]	; 0x28
  4009a4:	4770      	bx	lr
  4009a6:	bf00      	nop
  4009a8:	400e0400 	.word	0x400e0400

004009ac <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4009ac:	4b02      	ldr	r3, [pc, #8]	; (4009b8 <pmc_is_locked_pllack+0xc>)
  4009ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4009b0:	f000 0002 	and.w	r0, r0, #2
  4009b4:	4770      	bx	lr
  4009b6:	bf00      	nop
  4009b8:	400e0400 	.word	0x400e0400

004009bc <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4009bc:	2822      	cmp	r0, #34	; 0x22
  4009be:	d820      	bhi.n	400a02 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  4009c0:	281f      	cmp	r0, #31
  4009c2:	d80d      	bhi.n	4009e0 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4009c4:	4b12      	ldr	r3, [pc, #72]	; (400a10 <pmc_enable_periph_clk+0x54>)
  4009c6:	699a      	ldr	r2, [r3, #24]
  4009c8:	2301      	movs	r3, #1
  4009ca:	4083      	lsls	r3, r0
  4009cc:	401a      	ands	r2, r3
  4009ce:	4293      	cmp	r3, r2
  4009d0:	d019      	beq.n	400a06 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  4009d2:	2301      	movs	r3, #1
  4009d4:	fa03 f000 	lsl.w	r0, r3, r0
  4009d8:	4b0d      	ldr	r3, [pc, #52]	; (400a10 <pmc_enable_periph_clk+0x54>)
  4009da:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4009dc:	2000      	movs	r0, #0
  4009de:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4009e0:	4b0b      	ldr	r3, [pc, #44]	; (400a10 <pmc_enable_periph_clk+0x54>)
  4009e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  4009e6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4009e8:	2301      	movs	r3, #1
  4009ea:	4083      	lsls	r3, r0
  4009ec:	401a      	ands	r2, r3
  4009ee:	4293      	cmp	r3, r2
  4009f0:	d00b      	beq.n	400a0a <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  4009f2:	2301      	movs	r3, #1
  4009f4:	fa03 f000 	lsl.w	r0, r3, r0
  4009f8:	4b05      	ldr	r3, [pc, #20]	; (400a10 <pmc_enable_periph_clk+0x54>)
  4009fa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4009fe:	2000      	movs	r0, #0
  400a00:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400a02:	2001      	movs	r0, #1
  400a04:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400a06:	2000      	movs	r0, #0
  400a08:	4770      	bx	lr
  400a0a:	2000      	movs	r0, #0
}
  400a0c:	4770      	bx	lr
  400a0e:	bf00      	nop
  400a10:	400e0400 	.word	0x400e0400

00400a14 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  400a14:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  400a16:	23ac      	movs	r3, #172	; 0xac
  400a18:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400a1a:	680a      	ldr	r2, [r1, #0]
  400a1c:	684b      	ldr	r3, [r1, #4]
  400a1e:	fbb2 f3f3 	udiv	r3, r2, r3
  400a22:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  400a24:	1e5c      	subs	r4, r3, #1
  400a26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400a2a:	4294      	cmp	r4, r2
  400a2c:	d80a      	bhi.n	400a44 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400a2e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400a30:	688b      	ldr	r3, [r1, #8]
  400a32:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400a34:	f240 2302 	movw	r3, #514	; 0x202
  400a38:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400a3c:	2350      	movs	r3, #80	; 0x50
  400a3e:	6003      	str	r3, [r0, #0]

	return 0;
  400a40:	2000      	movs	r0, #0
  400a42:	e000      	b.n	400a46 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400a44:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400a46:	f85d 4b04 	ldr.w	r4, [sp], #4
  400a4a:	4770      	bx	lr

00400a4c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400a4c:	6943      	ldr	r3, [r0, #20]
  400a4e:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400a52:	bf1a      	itte	ne
  400a54:	61c1      	strne	r1, [r0, #28]
	return 0;
  400a56:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400a58:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400a5a:	4770      	bx	lr

00400a5c <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400a5c:	6943      	ldr	r3, [r0, #20]
  400a5e:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400a62:	bf1d      	ittte	ne
  400a64:	6983      	ldrne	r3, [r0, #24]
  400a66:	700b      	strbne	r3, [r1, #0]
	return 0;
  400a68:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400a6a:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400a6c:	4770      	bx	lr
  400a6e:	bf00      	nop

00400a70 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a70:	6943      	ldr	r3, [r0, #20]
  400a72:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400a76:	bf1d      	ittte	ne
  400a78:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400a7c:	61c1      	strne	r1, [r0, #28]
	return 0;
  400a7e:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400a80:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400a82:	4770      	bx	lr

00400a84 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a84:	6943      	ldr	r3, [r0, #20]
  400a86:	f013 0f01 	tst.w	r3, #1
  400a8a:	d005      	beq.n	400a98 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a8c:	6983      	ldr	r3, [r0, #24]
  400a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a92:	600b      	str	r3, [r1, #0]

	return 0;
  400a94:	2000      	movs	r0, #0
  400a96:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400a98:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400a9a:	4770      	bx	lr

00400a9c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400a9c:	e7fe      	b.n	400a9c <Dummy_Handler>
  400a9e:	bf00      	nop

00400aa0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400aa0:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400aa2:	4b20      	ldr	r3, [pc, #128]	; (400b24 <Reset_Handler+0x84>)
  400aa4:	4a20      	ldr	r2, [pc, #128]	; (400b28 <Reset_Handler+0x88>)
  400aa6:	429a      	cmp	r2, r3
  400aa8:	d912      	bls.n	400ad0 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400aaa:	4b20      	ldr	r3, [pc, #128]	; (400b2c <Reset_Handler+0x8c>)
  400aac:	4a1d      	ldr	r2, [pc, #116]	; (400b24 <Reset_Handler+0x84>)
  400aae:	429a      	cmp	r2, r3
  400ab0:	d21f      	bcs.n	400af2 <Reset_Handler+0x52>
  400ab2:	1d13      	adds	r3, r2, #4
  400ab4:	4c1e      	ldr	r4, [pc, #120]	; (400b30 <Reset_Handler+0x90>)
  400ab6:	1ae4      	subs	r4, r4, r3
  400ab8:	f024 0403 	bic.w	r4, r4, #3
  400abc:	3404      	adds	r4, #4
  400abe:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  400ac0:	4610      	mov	r0, r2
  400ac2:	4919      	ldr	r1, [pc, #100]	; (400b28 <Reset_Handler+0x88>)
  400ac4:	585a      	ldr	r2, [r3, r1]
  400ac6:	501a      	str	r2, [r3, r0]
  400ac8:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400aca:	42a3      	cmp	r3, r4
  400acc:	d1fa      	bne.n	400ac4 <Reset_Handler+0x24>
  400ace:	e010      	b.n	400af2 <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400ad0:	4b14      	ldr	r3, [pc, #80]	; (400b24 <Reset_Handler+0x84>)
  400ad2:	4a15      	ldr	r2, [pc, #84]	; (400b28 <Reset_Handler+0x88>)
  400ad4:	429a      	cmp	r2, r3
  400ad6:	d20c      	bcs.n	400af2 <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400ad8:	4a14      	ldr	r2, [pc, #80]	; (400b2c <Reset_Handler+0x8c>)
  400ada:	4619      	mov	r1, r3
  400adc:	1ad3      	subs	r3, r2, r3
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400ade:	4815      	ldr	r0, [pc, #84]	; (400b34 <Reset_Handler+0x94>)
  400ae0:	4418      	add	r0, r3
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400ae2:	b133      	cbz	r3, 400af2 <Reset_Handler+0x52>
  400ae4:	4613      	mov	r3, r2
  400ae6:	1a9c      	subs	r4, r3, r2
			*pDest-- = *pSrc--;
  400ae8:	5824      	ldr	r4, [r4, r0]
  400aea:	f843 4d04 	str.w	r4, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400aee:	4299      	cmp	r1, r3
  400af0:	d1f9      	bne.n	400ae6 <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400af2:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400af4:	4b10      	ldr	r3, [pc, #64]	; (400b38 <Reset_Handler+0x98>)
  400af6:	4a11      	ldr	r2, [pc, #68]	; (400b3c <Reset_Handler+0x9c>)
  400af8:	429a      	cmp	r2, r3
  400afa:	d20b      	bcs.n	400b14 <Reset_Handler+0x74>
  400afc:	1f13      	subs	r3, r2, #4
  400afe:	4910      	ldr	r1, [pc, #64]	; (400b40 <Reset_Handler+0xa0>)
  400b00:	1ac9      	subs	r1, r1, r3
  400b02:	f021 0103 	bic.w	r1, r1, #3
  400b06:	1d1a      	adds	r2, r3, #4
  400b08:	4411      	add	r1, r2
		*pDest++ = 0;
  400b0a:	2200      	movs	r2, #0
  400b0c:	f843 2f04 	str.w	r2, [r3, #4]!
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400b10:	428b      	cmp	r3, r1
  400b12:	d1fb      	bne.n	400b0c <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400b14:	4b0b      	ldr	r3, [pc, #44]	; (400b44 <Reset_Handler+0xa4>)
  400b16:	4a0c      	ldr	r2, [pc, #48]	; (400b48 <Reset_Handler+0xa8>)
  400b18:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400b1a:	4b0c      	ldr	r3, [pc, #48]	; (400b4c <Reset_Handler+0xac>)
  400b1c:	4798      	blx	r3

	/* Branch to main function */
	main();
  400b1e:	4b0c      	ldr	r3, [pc, #48]	; (400b50 <Reset_Handler+0xb0>)
  400b20:	4798      	blx	r3
  400b22:	e7fe      	b.n	400b22 <Reset_Handler+0x82>
  400b24:	20000000 	.word	0x20000000
  400b28:	00402b94 	.word	0x00402b94
  400b2c:	20000844 	.word	0x20000844
  400b30:	20000847 	.word	0x20000847
  400b34:	00402b90 	.word	0x00402b90
  400b38:	20000920 	.word	0x20000920
  400b3c:	20000844 	.word	0x20000844
  400b40:	2000091b 	.word	0x2000091b
  400b44:	e000ed00 	.word	0xe000ed00
  400b48:	00400000 	.word	0x00400000
  400b4c:	00400d2d 	.word	0x00400d2d
  400b50:	00400331 	.word	0x00400331

00400b54 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400b54:	4b3d      	ldr	r3, [pc, #244]	; (400c4c <SystemCoreClockUpdate+0xf8>)
  400b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b58:	f003 0303 	and.w	r3, r3, #3
  400b5c:	2b03      	cmp	r3, #3
  400b5e:	d85d      	bhi.n	400c1c <SystemCoreClockUpdate+0xc8>
  400b60:	e8df f003 	tbb	[pc, r3]
  400b64:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400b68:	4b39      	ldr	r3, [pc, #228]	; (400c50 <SystemCoreClockUpdate+0xfc>)
  400b6a:	695b      	ldr	r3, [r3, #20]
  400b6c:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b70:	bf14      	ite	ne
  400b72:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b76:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400b7a:	4b36      	ldr	r3, [pc, #216]	; (400c54 <SystemCoreClockUpdate+0x100>)
  400b7c:	601a      	str	r2, [r3, #0]
  400b7e:	e04d      	b.n	400c1c <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400b80:	4b32      	ldr	r3, [pc, #200]	; (400c4c <SystemCoreClockUpdate+0xf8>)
  400b82:	6a1b      	ldr	r3, [r3, #32]
  400b84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400b88:	d003      	beq.n	400b92 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400b8a:	4a33      	ldr	r2, [pc, #204]	; (400c58 <SystemCoreClockUpdate+0x104>)
  400b8c:	4b31      	ldr	r3, [pc, #196]	; (400c54 <SystemCoreClockUpdate+0x100>)
  400b8e:	601a      	str	r2, [r3, #0]
  400b90:	e044      	b.n	400c1c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400b92:	4a32      	ldr	r2, [pc, #200]	; (400c5c <SystemCoreClockUpdate+0x108>)
  400b94:	4b2f      	ldr	r3, [pc, #188]	; (400c54 <SystemCoreClockUpdate+0x100>)
  400b96:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400b98:	4b2c      	ldr	r3, [pc, #176]	; (400c4c <SystemCoreClockUpdate+0xf8>)
  400b9a:	6a1b      	ldr	r3, [r3, #32]
  400b9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ba0:	2b10      	cmp	r3, #16
  400ba2:	d002      	beq.n	400baa <SystemCoreClockUpdate+0x56>
  400ba4:	2b20      	cmp	r3, #32
  400ba6:	d004      	beq.n	400bb2 <SystemCoreClockUpdate+0x5e>
  400ba8:	e038      	b.n	400c1c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400baa:	4a2d      	ldr	r2, [pc, #180]	; (400c60 <SystemCoreClockUpdate+0x10c>)
  400bac:	4b29      	ldr	r3, [pc, #164]	; (400c54 <SystemCoreClockUpdate+0x100>)
  400bae:	601a      	str	r2, [r3, #0]
			break;
  400bb0:	e034      	b.n	400c1c <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400bb2:	4a29      	ldr	r2, [pc, #164]	; (400c58 <SystemCoreClockUpdate+0x104>)
  400bb4:	4b27      	ldr	r3, [pc, #156]	; (400c54 <SystemCoreClockUpdate+0x100>)
  400bb6:	601a      	str	r2, [r3, #0]
			break;
  400bb8:	e030      	b.n	400c1c <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400bba:	4b24      	ldr	r3, [pc, #144]	; (400c4c <SystemCoreClockUpdate+0xf8>)
  400bbc:	6a1b      	ldr	r3, [r3, #32]
  400bbe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400bc2:	d003      	beq.n	400bcc <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400bc4:	4a24      	ldr	r2, [pc, #144]	; (400c58 <SystemCoreClockUpdate+0x104>)
  400bc6:	4b23      	ldr	r3, [pc, #140]	; (400c54 <SystemCoreClockUpdate+0x100>)
  400bc8:	601a      	str	r2, [r3, #0]
  400bca:	e012      	b.n	400bf2 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400bcc:	4a23      	ldr	r2, [pc, #140]	; (400c5c <SystemCoreClockUpdate+0x108>)
  400bce:	4b21      	ldr	r3, [pc, #132]	; (400c54 <SystemCoreClockUpdate+0x100>)
  400bd0:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400bd2:	4b1e      	ldr	r3, [pc, #120]	; (400c4c <SystemCoreClockUpdate+0xf8>)
  400bd4:	6a1b      	ldr	r3, [r3, #32]
  400bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400bda:	2b10      	cmp	r3, #16
  400bdc:	d002      	beq.n	400be4 <SystemCoreClockUpdate+0x90>
  400bde:	2b20      	cmp	r3, #32
  400be0:	d004      	beq.n	400bec <SystemCoreClockUpdate+0x98>
  400be2:	e006      	b.n	400bf2 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400be4:	4a1e      	ldr	r2, [pc, #120]	; (400c60 <SystemCoreClockUpdate+0x10c>)
  400be6:	4b1b      	ldr	r3, [pc, #108]	; (400c54 <SystemCoreClockUpdate+0x100>)
  400be8:	601a      	str	r2, [r3, #0]
					break;
  400bea:	e002      	b.n	400bf2 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400bec:	4a1a      	ldr	r2, [pc, #104]	; (400c58 <SystemCoreClockUpdate+0x104>)
  400bee:	4b19      	ldr	r3, [pc, #100]	; (400c54 <SystemCoreClockUpdate+0x100>)
  400bf0:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400bf2:	4b16      	ldr	r3, [pc, #88]	; (400c4c <SystemCoreClockUpdate+0xf8>)
  400bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bf6:	f003 0303 	and.w	r3, r3, #3
  400bfa:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400bfc:	4b13      	ldr	r3, [pc, #76]	; (400c4c <SystemCoreClockUpdate+0xf8>)
  400bfe:	bf07      	ittee	eq
  400c00:	6a98      	ldreq	r0, [r3, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400c02:	6a99      	ldreq	r1, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400c04:	6ad8      	ldrne	r0, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400c06:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
  400c08:	4b12      	ldr	r3, [pc, #72]	; (400c54 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400c0a:	f3c0 400a 	ubfx	r0, r0, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400c0e:	681a      	ldr	r2, [r3, #0]
  400c10:	fb00 2202 	mla	r2, r0, r2, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  400c14:	b2c9      	uxtb	r1, r1
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400c16:	fbb2 f2f1 	udiv	r2, r2, r1
  400c1a:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400c1c:	4b0b      	ldr	r3, [pc, #44]	; (400c4c <SystemCoreClockUpdate+0xf8>)
  400c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c24:	2b70      	cmp	r3, #112	; 0x70
  400c26:	d107      	bne.n	400c38 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400c28:	4b0a      	ldr	r3, [pc, #40]	; (400c54 <SystemCoreClockUpdate+0x100>)
  400c2a:	681a      	ldr	r2, [r3, #0]
  400c2c:	490d      	ldr	r1, [pc, #52]	; (400c64 <SystemCoreClockUpdate+0x110>)
  400c2e:	fba1 0202 	umull	r0, r2, r1, r2
  400c32:	0852      	lsrs	r2, r2, #1
  400c34:	601a      	str	r2, [r3, #0]
  400c36:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c38:	4b04      	ldr	r3, [pc, #16]	; (400c4c <SystemCoreClockUpdate+0xf8>)
  400c3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400c3c:	4b05      	ldr	r3, [pc, #20]	; (400c54 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c3e:	f3c1 1102 	ubfx	r1, r1, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400c42:	681a      	ldr	r2, [r3, #0]
  400c44:	40ca      	lsrs	r2, r1
  400c46:	601a      	str	r2, [r3, #0]
  400c48:	4770      	bx	lr
  400c4a:	bf00      	nop
  400c4c:	400e0400 	.word	0x400e0400
  400c50:	400e1410 	.word	0x400e1410
  400c54:	20000000 	.word	0x20000000
  400c58:	00b71b00 	.word	0x00b71b00
  400c5c:	003d0900 	.word	0x003d0900
  400c60:	007a1200 	.word	0x007a1200
  400c64:	aaaaaaab 	.word	0xaaaaaaab

00400c68 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400c68:	4b12      	ldr	r3, [pc, #72]	; (400cb4 <system_init_flash+0x4c>)
  400c6a:	4298      	cmp	r0, r3
  400c6c:	d804      	bhi.n	400c78 <system_init_flash+0x10>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400c72:	4b11      	ldr	r3, [pc, #68]	; (400cb8 <system_init_flash+0x50>)
  400c74:	601a      	str	r2, [r3, #0]
  400c76:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400c78:	4b10      	ldr	r3, [pc, #64]	; (400cbc <system_init_flash+0x54>)
  400c7a:	4298      	cmp	r0, r3
  400c7c:	d803      	bhi.n	400c86 <system_init_flash+0x1e>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400c7e:	4a10      	ldr	r2, [pc, #64]	; (400cc0 <system_init_flash+0x58>)
  400c80:	4b0d      	ldr	r3, [pc, #52]	; (400cb8 <system_init_flash+0x50>)
  400c82:	601a      	str	r2, [r3, #0]
  400c84:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400c86:	4b0f      	ldr	r3, [pc, #60]	; (400cc4 <system_init_flash+0x5c>)
  400c88:	4298      	cmp	r0, r3
  400c8a:	d803      	bhi.n	400c94 <system_init_flash+0x2c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400c8c:	4a0e      	ldr	r2, [pc, #56]	; (400cc8 <system_init_flash+0x60>)
  400c8e:	4b0a      	ldr	r3, [pc, #40]	; (400cb8 <system_init_flash+0x50>)
  400c90:	601a      	str	r2, [r3, #0]
  400c92:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400c94:	4b0d      	ldr	r3, [pc, #52]	; (400ccc <system_init_flash+0x64>)
  400c96:	4298      	cmp	r0, r3
  400c98:	d803      	bhi.n	400ca2 <system_init_flash+0x3a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400c9a:	4a0d      	ldr	r2, [pc, #52]	; (400cd0 <system_init_flash+0x68>)
  400c9c:	4b06      	ldr	r3, [pc, #24]	; (400cb8 <system_init_flash+0x50>)
  400c9e:	601a      	str	r2, [r3, #0]
  400ca0:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400ca2:	4b0c      	ldr	r3, [pc, #48]	; (400cd4 <system_init_flash+0x6c>)
  400ca4:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400ca6:	bf94      	ite	ls
  400ca8:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400cac:	4a0a      	ldrhi	r2, [pc, #40]	; (400cd8 <system_init_flash+0x70>)
  400cae:	4b02      	ldr	r3, [pc, #8]	; (400cb8 <system_init_flash+0x50>)
  400cb0:	601a      	str	r2, [r3, #0]
  400cb2:	4770      	bx	lr
  400cb4:	01312cff 	.word	0x01312cff
  400cb8:	400e0a00 	.word	0x400e0a00
  400cbc:	026259ff 	.word	0x026259ff
  400cc0:	04000100 	.word	0x04000100
  400cc4:	039386ff 	.word	0x039386ff
  400cc8:	04000200 	.word	0x04000200
  400ccc:	04c4b3ff 	.word	0x04c4b3ff
  400cd0:	04000300 	.word	0x04000300
  400cd4:	05f5e0ff 	.word	0x05f5e0ff
  400cd8:	04000500 	.word	0x04000500

00400cdc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400cdc:	4b09      	ldr	r3, [pc, #36]	; (400d04 <_sbrk+0x28>)
  400cde:	681b      	ldr	r3, [r3, #0]
  400ce0:	b913      	cbnz	r3, 400ce8 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400ce2:	4a09      	ldr	r2, [pc, #36]	; (400d08 <_sbrk+0x2c>)
  400ce4:	4b07      	ldr	r3, [pc, #28]	; (400d04 <_sbrk+0x28>)
  400ce6:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400ce8:	4b06      	ldr	r3, [pc, #24]	; (400d04 <_sbrk+0x28>)
  400cea:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400cec:	181a      	adds	r2, r3, r0
  400cee:	4907      	ldr	r1, [pc, #28]	; (400d0c <_sbrk+0x30>)
  400cf0:	4291      	cmp	r1, r2
  400cf2:	db04      	blt.n	400cfe <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400cf4:	4610      	mov	r0, r2
  400cf6:	4a03      	ldr	r2, [pc, #12]	; (400d04 <_sbrk+0x28>)
  400cf8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400cfa:	4618      	mov	r0, r3
  400cfc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400cfe:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400d02:	4770      	bx	lr
  400d04:	200008d4 	.word	0x200008d4
  400d08:	20003920 	.word	0x20003920
  400d0c:	2001fffc 	.word	0x2001fffc

00400d10 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400d10:	f04f 30ff 	mov.w	r0, #4294967295
  400d14:	4770      	bx	lr
  400d16:	bf00      	nop

00400d18 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400d1c:	604b      	str	r3, [r1, #4]

	return 0;
}
  400d1e:	2000      	movs	r0, #0
  400d20:	4770      	bx	lr
  400d22:	bf00      	nop

00400d24 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400d24:	2001      	movs	r0, #1
  400d26:	4770      	bx	lr

00400d28 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400d28:	2000      	movs	r0, #0
  400d2a:	4770      	bx	lr

00400d2c <__libc_init_array>:
  400d2c:	b570      	push	{r4, r5, r6, lr}
  400d2e:	4e0f      	ldr	r6, [pc, #60]	; (400d6c <__libc_init_array+0x40>)
  400d30:	4d0f      	ldr	r5, [pc, #60]	; (400d70 <__libc_init_array+0x44>)
  400d32:	1b76      	subs	r6, r6, r5
  400d34:	10b6      	asrs	r6, r6, #2
  400d36:	d007      	beq.n	400d48 <__libc_init_array+0x1c>
  400d38:	3d04      	subs	r5, #4
  400d3a:	2400      	movs	r4, #0
  400d3c:	3401      	adds	r4, #1
  400d3e:	f855 3f04 	ldr.w	r3, [r5, #4]!
  400d42:	4798      	blx	r3
  400d44:	42a6      	cmp	r6, r4
  400d46:	d1f9      	bne.n	400d3c <__libc_init_array+0x10>
  400d48:	4e0a      	ldr	r6, [pc, #40]	; (400d74 <__libc_init_array+0x48>)
  400d4a:	4d0b      	ldr	r5, [pc, #44]	; (400d78 <__libc_init_array+0x4c>)
  400d4c:	1b76      	subs	r6, r6, r5
  400d4e:	f001 ff0f 	bl	402b70 <_init>
  400d52:	10b6      	asrs	r6, r6, #2
  400d54:	d008      	beq.n	400d68 <__libc_init_array+0x3c>
  400d56:	3d04      	subs	r5, #4
  400d58:	2400      	movs	r4, #0
  400d5a:	3401      	adds	r4, #1
  400d5c:	f855 3f04 	ldr.w	r3, [r5, #4]!
  400d60:	4798      	blx	r3
  400d62:	42a6      	cmp	r6, r4
  400d64:	d1f9      	bne.n	400d5a <__libc_init_array+0x2e>
  400d66:	bd70      	pop	{r4, r5, r6, pc}
  400d68:	bd70      	pop	{r4, r5, r6, pc}
  400d6a:	bf00      	nop
  400d6c:	00402b7c 	.word	0x00402b7c
  400d70:	00402b7c 	.word	0x00402b7c
  400d74:	00402b84 	.word	0x00402b84
  400d78:	00402b7c 	.word	0x00402b7c

00400d7c <memset>:
  400d7c:	b4f0      	push	{r4, r5, r6, r7}
  400d7e:	0784      	lsls	r4, r0, #30
  400d80:	d043      	beq.n	400e0a <memset+0x8e>
  400d82:	1e54      	subs	r4, r2, #1
  400d84:	2a00      	cmp	r2, #0
  400d86:	d03e      	beq.n	400e06 <memset+0x8a>
  400d88:	b2cd      	uxtb	r5, r1
  400d8a:	4603      	mov	r3, r0
  400d8c:	e003      	b.n	400d96 <memset+0x1a>
  400d8e:	1e62      	subs	r2, r4, #1
  400d90:	2c00      	cmp	r4, #0
  400d92:	d038      	beq.n	400e06 <memset+0x8a>
  400d94:	4614      	mov	r4, r2
  400d96:	f803 5b01 	strb.w	r5, [r3], #1
  400d9a:	079a      	lsls	r2, r3, #30
  400d9c:	d1f7      	bne.n	400d8e <memset+0x12>
  400d9e:	2c03      	cmp	r4, #3
  400da0:	d92a      	bls.n	400df8 <memset+0x7c>
  400da2:	b2cd      	uxtb	r5, r1
  400da4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400da8:	2c0f      	cmp	r4, #15
  400daa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400dae:	d915      	bls.n	400ddc <memset+0x60>
  400db0:	f1a4 0710 	sub.w	r7, r4, #16
  400db4:	093f      	lsrs	r7, r7, #4
  400db6:	f103 0610 	add.w	r6, r3, #16
  400dba:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  400dbe:	461a      	mov	r2, r3
  400dc0:	6015      	str	r5, [r2, #0]
  400dc2:	6055      	str	r5, [r2, #4]
  400dc4:	6095      	str	r5, [r2, #8]
  400dc6:	60d5      	str	r5, [r2, #12]
  400dc8:	3210      	adds	r2, #16
  400dca:	42b2      	cmp	r2, r6
  400dcc:	d1f8      	bne.n	400dc0 <memset+0x44>
  400dce:	f004 040f 	and.w	r4, r4, #15
  400dd2:	3701      	adds	r7, #1
  400dd4:	2c03      	cmp	r4, #3
  400dd6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  400dda:	d90d      	bls.n	400df8 <memset+0x7c>
  400ddc:	461e      	mov	r6, r3
  400dde:	4622      	mov	r2, r4
  400de0:	3a04      	subs	r2, #4
  400de2:	2a03      	cmp	r2, #3
  400de4:	f846 5b04 	str.w	r5, [r6], #4
  400de8:	d8fa      	bhi.n	400de0 <memset+0x64>
  400dea:	1f22      	subs	r2, r4, #4
  400dec:	f022 0203 	bic.w	r2, r2, #3
  400df0:	3204      	adds	r2, #4
  400df2:	4413      	add	r3, r2
  400df4:	f004 0403 	and.w	r4, r4, #3
  400df8:	b12c      	cbz	r4, 400e06 <memset+0x8a>
  400dfa:	b2c9      	uxtb	r1, r1
  400dfc:	441c      	add	r4, r3
  400dfe:	f803 1b01 	strb.w	r1, [r3], #1
  400e02:	42a3      	cmp	r3, r4
  400e04:	d1fb      	bne.n	400dfe <memset+0x82>
  400e06:	bcf0      	pop	{r4, r5, r6, r7}
  400e08:	4770      	bx	lr
  400e0a:	4614      	mov	r4, r2
  400e0c:	4603      	mov	r3, r0
  400e0e:	e7c6      	b.n	400d9e <memset+0x22>

00400e10 <_puts_r>:
  400e10:	b5f0      	push	{r4, r5, r6, r7, lr}
  400e12:	4604      	mov	r4, r0
  400e14:	b089      	sub	sp, #36	; 0x24
  400e16:	4608      	mov	r0, r1
  400e18:	460d      	mov	r5, r1
  400e1a:	f000 f8d1 	bl	400fc0 <strlen>
  400e1e:	68a3      	ldr	r3, [r4, #8]
  400e20:	4f11      	ldr	r7, [pc, #68]	; (400e68 <_puts_r+0x58>)
  400e22:	899a      	ldrh	r2, [r3, #12]
  400e24:	9504      	str	r5, [sp, #16]
  400e26:	2102      	movs	r1, #2
  400e28:	f100 0e01 	add.w	lr, r0, #1
  400e2c:	2601      	movs	r6, #1
  400e2e:	ad04      	add	r5, sp, #16
  400e30:	9102      	str	r1, [sp, #8]
  400e32:	0491      	lsls	r1, r2, #18
  400e34:	9005      	str	r0, [sp, #20]
  400e36:	f8cd e00c 	str.w	lr, [sp, #12]
  400e3a:	9706      	str	r7, [sp, #24]
  400e3c:	9607      	str	r6, [sp, #28]
  400e3e:	9501      	str	r5, [sp, #4]
  400e40:	d406      	bmi.n	400e50 <_puts_r+0x40>
  400e42:	6e59      	ldr	r1, [r3, #100]	; 0x64
  400e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400e48:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  400e4c:	819a      	strh	r2, [r3, #12]
  400e4e:	6659      	str	r1, [r3, #100]	; 0x64
  400e50:	4620      	mov	r0, r4
  400e52:	4619      	mov	r1, r3
  400e54:	aa01      	add	r2, sp, #4
  400e56:	f000 fbdf 	bl	401618 <__sfvwrite_r>
  400e5a:	2800      	cmp	r0, #0
  400e5c:	bf0c      	ite	eq
  400e5e:	200a      	moveq	r0, #10
  400e60:	f04f 30ff 	movne.w	r0, #4294967295
  400e64:	b009      	add	sp, #36	; 0x24
  400e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400e68:	00402b6c 	.word	0x00402b6c

00400e6c <puts>:
  400e6c:	4b02      	ldr	r3, [pc, #8]	; (400e78 <puts+0xc>)
  400e6e:	4601      	mov	r1, r0
  400e70:	6818      	ldr	r0, [r3, #0]
  400e72:	f7ff bfcd 	b.w	400e10 <_puts_r>
  400e76:	bf00      	nop
  400e78:	20000430 	.word	0x20000430

00400e7c <__srget_r>:
  400e7c:	b538      	push	{r3, r4, r5, lr}
  400e7e:	460c      	mov	r4, r1
  400e80:	4605      	mov	r5, r0
  400e82:	b108      	cbz	r0, 400e88 <__srget_r+0xc>
  400e84:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400e86:	b163      	cbz	r3, 400ea2 <__srget_r+0x26>
  400e88:	4628      	mov	r0, r5
  400e8a:	4621      	mov	r1, r4
  400e8c:	f001 fbe8 	bl	402660 <__srefill_r>
  400e90:	b950      	cbnz	r0, 400ea8 <__srget_r+0x2c>
  400e92:	6823      	ldr	r3, [r4, #0]
  400e94:	6862      	ldr	r2, [r4, #4]
  400e96:	1c59      	adds	r1, r3, #1
  400e98:	3a01      	subs	r2, #1
  400e9a:	e884 0006 	stmia.w	r4, {r1, r2}
  400e9e:	7818      	ldrb	r0, [r3, #0]
  400ea0:	bd38      	pop	{r3, r4, r5, pc}
  400ea2:	f000 fa07 	bl	4012b4 <__sinit>
  400ea6:	e7ef      	b.n	400e88 <__srget_r+0xc>
  400ea8:	f04f 30ff 	mov.w	r0, #4294967295
  400eac:	bd38      	pop	{r3, r4, r5, pc}
  400eae:	bf00      	nop

00400eb0 <setbuf>:
  400eb0:	2900      	cmp	r1, #0
  400eb2:	bf0c      	ite	eq
  400eb4:	2202      	moveq	r2, #2
  400eb6:	2200      	movne	r2, #0
  400eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400ebc:	f000 b800 	b.w	400ec0 <setvbuf>

00400ec0 <setvbuf>:
  400ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ec4:	4c3c      	ldr	r4, [pc, #240]	; (400fb8 <setvbuf+0xf8>)
  400ec6:	6825      	ldr	r5, [r4, #0]
  400ec8:	4688      	mov	r8, r1
  400eca:	4604      	mov	r4, r0
  400ecc:	4616      	mov	r6, r2
  400ece:	461f      	mov	r7, r3
  400ed0:	b115      	cbz	r5, 400ed8 <setvbuf+0x18>
  400ed2:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400ed4:	2b00      	cmp	r3, #0
  400ed6:	d04f      	beq.n	400f78 <setvbuf+0xb8>
  400ed8:	2e02      	cmp	r6, #2
  400eda:	d830      	bhi.n	400f3e <setvbuf+0x7e>
  400edc:	2f00      	cmp	r7, #0
  400ede:	db2e      	blt.n	400f3e <setvbuf+0x7e>
  400ee0:	4628      	mov	r0, r5
  400ee2:	4621      	mov	r1, r4
  400ee4:	f000 f9b8 	bl	401258 <_fflush_r>
  400ee8:	89a3      	ldrh	r3, [r4, #12]
  400eea:	2200      	movs	r2, #0
  400eec:	6062      	str	r2, [r4, #4]
  400eee:	61a2      	str	r2, [r4, #24]
  400ef0:	061a      	lsls	r2, r3, #24
  400ef2:	d428      	bmi.n	400f46 <setvbuf+0x86>
  400ef4:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  400ef8:	b29b      	uxth	r3, r3
  400efa:	2e02      	cmp	r6, #2
  400efc:	81a3      	strh	r3, [r4, #12]
  400efe:	d02d      	beq.n	400f5c <setvbuf+0x9c>
  400f00:	f1b8 0f00 	cmp.w	r8, #0
  400f04:	d03c      	beq.n	400f80 <setvbuf+0xc0>
  400f06:	2e01      	cmp	r6, #1
  400f08:	d013      	beq.n	400f32 <setvbuf+0x72>
  400f0a:	b29b      	uxth	r3, r3
  400f0c:	f003 0008 	and.w	r0, r3, #8
  400f10:	4a2a      	ldr	r2, [pc, #168]	; (400fbc <setvbuf+0xfc>)
  400f12:	63ea      	str	r2, [r5, #60]	; 0x3c
  400f14:	b280      	uxth	r0, r0
  400f16:	f8c4 8000 	str.w	r8, [r4]
  400f1a:	f8c4 8010 	str.w	r8, [r4, #16]
  400f1e:	6167      	str	r7, [r4, #20]
  400f20:	b178      	cbz	r0, 400f42 <setvbuf+0x82>
  400f22:	f013 0f03 	tst.w	r3, #3
  400f26:	bf18      	it	ne
  400f28:	2700      	movne	r7, #0
  400f2a:	60a7      	str	r7, [r4, #8]
  400f2c:	2000      	movs	r0, #0
  400f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f32:	f043 0301 	orr.w	r3, r3, #1
  400f36:	427a      	negs	r2, r7
  400f38:	81a3      	strh	r3, [r4, #12]
  400f3a:	61a2      	str	r2, [r4, #24]
  400f3c:	e7e5      	b.n	400f0a <setvbuf+0x4a>
  400f3e:	f04f 30ff 	mov.w	r0, #4294967295
  400f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f46:	4628      	mov	r0, r5
  400f48:	6921      	ldr	r1, [r4, #16]
  400f4a:	f000 fa97 	bl	40147c <_free_r>
  400f4e:	89a3      	ldrh	r3, [r4, #12]
  400f50:	f023 0383 	bic.w	r3, r3, #131	; 0x83
  400f54:	b29b      	uxth	r3, r3
  400f56:	2e02      	cmp	r6, #2
  400f58:	81a3      	strh	r3, [r4, #12]
  400f5a:	d1d1      	bne.n	400f00 <setvbuf+0x40>
  400f5c:	2000      	movs	r0, #0
  400f5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  400f62:	f043 0302 	orr.w	r3, r3, #2
  400f66:	2500      	movs	r5, #0
  400f68:	2101      	movs	r1, #1
  400f6a:	81a3      	strh	r3, [r4, #12]
  400f6c:	60a5      	str	r5, [r4, #8]
  400f6e:	6022      	str	r2, [r4, #0]
  400f70:	6122      	str	r2, [r4, #16]
  400f72:	6161      	str	r1, [r4, #20]
  400f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f78:	4628      	mov	r0, r5
  400f7a:	f000 f99b 	bl	4012b4 <__sinit>
  400f7e:	e7ab      	b.n	400ed8 <setvbuf+0x18>
  400f80:	2f00      	cmp	r7, #0
  400f82:	bf08      	it	eq
  400f84:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  400f88:	4638      	mov	r0, r7
  400f8a:	f000 fd8f 	bl	401aac <malloc>
  400f8e:	4680      	mov	r8, r0
  400f90:	b128      	cbz	r0, 400f9e <setvbuf+0xde>
  400f92:	89a3      	ldrh	r3, [r4, #12]
  400f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400f98:	b29b      	uxth	r3, r3
  400f9a:	81a3      	strh	r3, [r4, #12]
  400f9c:	e7b3      	b.n	400f06 <setvbuf+0x46>
  400f9e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  400fa2:	f000 fd83 	bl	401aac <malloc>
  400fa6:	4680      	mov	r8, r0
  400fa8:	b918      	cbnz	r0, 400fb2 <setvbuf+0xf2>
  400faa:	89a3      	ldrh	r3, [r4, #12]
  400fac:	f04f 30ff 	mov.w	r0, #4294967295
  400fb0:	e7d5      	b.n	400f5e <setvbuf+0x9e>
  400fb2:	f44f 6780 	mov.w	r7, #1024	; 0x400
  400fb6:	e7ec      	b.n	400f92 <setvbuf+0xd2>
  400fb8:	20000430 	.word	0x20000430
  400fbc:	004012a9 	.word	0x004012a9

00400fc0 <strlen>:
  400fc0:	f020 0103 	bic.w	r1, r0, #3
  400fc4:	f010 0003 	ands.w	r0, r0, #3
  400fc8:	f1c0 0000 	rsb	r0, r0, #0
  400fcc:	f851 3b04 	ldr.w	r3, [r1], #4
  400fd0:	f100 0c04 	add.w	ip, r0, #4
  400fd4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  400fd8:	f06f 0200 	mvn.w	r2, #0
  400fdc:	bf1c      	itt	ne
  400fde:	fa22 f20c 	lsrne.w	r2, r2, ip
  400fe2:	4313      	orrne	r3, r2
  400fe4:	f04f 0c01 	mov.w	ip, #1
  400fe8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  400fec:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  400ff0:	eba3 020c 	sub.w	r2, r3, ip
  400ff4:	ea22 0203 	bic.w	r2, r2, r3
  400ff8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  400ffc:	bf04      	itt	eq
  400ffe:	f851 3b04 	ldreq.w	r3, [r1], #4
  401002:	3004      	addeq	r0, #4
  401004:	d0f4      	beq.n	400ff0 <strlen+0x30>
  401006:	f013 0fff 	tst.w	r3, #255	; 0xff
  40100a:	bf1f      	itttt	ne
  40100c:	3001      	addne	r0, #1
  40100e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  401012:	3001      	addne	r0, #1
  401014:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  401018:	bf18      	it	ne
  40101a:	3001      	addne	r0, #1
  40101c:	4770      	bx	lr
  40101e:	bf00      	nop

00401020 <__swsetup_r>:
  401020:	4b2f      	ldr	r3, [pc, #188]	; (4010e0 <__swsetup_r+0xc0>)
  401022:	681b      	ldr	r3, [r3, #0]
  401024:	b570      	push	{r4, r5, r6, lr}
  401026:	4606      	mov	r6, r0
  401028:	460c      	mov	r4, r1
  40102a:	b113      	cbz	r3, 401032 <__swsetup_r+0x12>
  40102c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40102e:	2a00      	cmp	r2, #0
  401030:	d036      	beq.n	4010a0 <__swsetup_r+0x80>
  401032:	89a5      	ldrh	r5, [r4, #12]
  401034:	b2ab      	uxth	r3, r5
  401036:	0719      	lsls	r1, r3, #28
  401038:	d50c      	bpl.n	401054 <__swsetup_r+0x34>
  40103a:	6922      	ldr	r2, [r4, #16]
  40103c:	b1aa      	cbz	r2, 40106a <__swsetup_r+0x4a>
  40103e:	f013 0101 	ands.w	r1, r3, #1
  401042:	d01e      	beq.n	401082 <__swsetup_r+0x62>
  401044:	6963      	ldr	r3, [r4, #20]
  401046:	2100      	movs	r1, #0
  401048:	425b      	negs	r3, r3
  40104a:	61a3      	str	r3, [r4, #24]
  40104c:	60a1      	str	r1, [r4, #8]
  40104e:	b1f2      	cbz	r2, 40108e <__swsetup_r+0x6e>
  401050:	2000      	movs	r0, #0
  401052:	bd70      	pop	{r4, r5, r6, pc}
  401054:	06da      	lsls	r2, r3, #27
  401056:	d53b      	bpl.n	4010d0 <__swsetup_r+0xb0>
  401058:	075b      	lsls	r3, r3, #29
  40105a:	d425      	bmi.n	4010a8 <__swsetup_r+0x88>
  40105c:	6922      	ldr	r2, [r4, #16]
  40105e:	f045 0308 	orr.w	r3, r5, #8
  401062:	81a3      	strh	r3, [r4, #12]
  401064:	b29b      	uxth	r3, r3
  401066:	2a00      	cmp	r2, #0
  401068:	d1e9      	bne.n	40103e <__swsetup_r+0x1e>
  40106a:	f403 7120 	and.w	r1, r3, #640	; 0x280
  40106e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  401072:	d0e4      	beq.n	40103e <__swsetup_r+0x1e>
  401074:	4630      	mov	r0, r6
  401076:	4621      	mov	r1, r4
  401078:	f000 fca8 	bl	4019cc <__smakebuf_r>
  40107c:	89a3      	ldrh	r3, [r4, #12]
  40107e:	6922      	ldr	r2, [r4, #16]
  401080:	e7dd      	b.n	40103e <__swsetup_r+0x1e>
  401082:	0798      	lsls	r0, r3, #30
  401084:	bf58      	it	pl
  401086:	6961      	ldrpl	r1, [r4, #20]
  401088:	60a1      	str	r1, [r4, #8]
  40108a:	2a00      	cmp	r2, #0
  40108c:	d1e0      	bne.n	401050 <__swsetup_r+0x30>
  40108e:	89a3      	ldrh	r3, [r4, #12]
  401090:	061a      	lsls	r2, r3, #24
  401092:	d5dd      	bpl.n	401050 <__swsetup_r+0x30>
  401094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401098:	81a3      	strh	r3, [r4, #12]
  40109a:	f04f 30ff 	mov.w	r0, #4294967295
  40109e:	bd70      	pop	{r4, r5, r6, pc}
  4010a0:	4618      	mov	r0, r3
  4010a2:	f000 f907 	bl	4012b4 <__sinit>
  4010a6:	e7c4      	b.n	401032 <__swsetup_r+0x12>
  4010a8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4010aa:	b149      	cbz	r1, 4010c0 <__swsetup_r+0xa0>
  4010ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4010b0:	4299      	cmp	r1, r3
  4010b2:	d003      	beq.n	4010bc <__swsetup_r+0x9c>
  4010b4:	4630      	mov	r0, r6
  4010b6:	f000 f9e1 	bl	40147c <_free_r>
  4010ba:	89a5      	ldrh	r5, [r4, #12]
  4010bc:	2300      	movs	r3, #0
  4010be:	6323      	str	r3, [r4, #48]	; 0x30
  4010c0:	f025 0524 	bic.w	r5, r5, #36	; 0x24
  4010c4:	2300      	movs	r3, #0
  4010c6:	6922      	ldr	r2, [r4, #16]
  4010c8:	6063      	str	r3, [r4, #4]
  4010ca:	b2ad      	uxth	r5, r5
  4010cc:	6022      	str	r2, [r4, #0]
  4010ce:	e7c6      	b.n	40105e <__swsetup_r+0x3e>
  4010d0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  4010d4:	2309      	movs	r3, #9
  4010d6:	6033      	str	r3, [r6, #0]
  4010d8:	f04f 30ff 	mov.w	r0, #4294967295
  4010dc:	81a5      	strh	r5, [r4, #12]
  4010de:	bd70      	pop	{r4, r5, r6, pc}
  4010e0:	20000430 	.word	0x20000430

004010e4 <register_fini>:
  4010e4:	4b02      	ldr	r3, [pc, #8]	; (4010f0 <register_fini+0xc>)
  4010e6:	b113      	cbz	r3, 4010ee <register_fini+0xa>
  4010e8:	4802      	ldr	r0, [pc, #8]	; (4010f4 <register_fini+0x10>)
  4010ea:	f000 b805 	b.w	4010f8 <atexit>
  4010ee:	4770      	bx	lr
  4010f0:	00000000 	.word	0x00000000
  4010f4:	004013b1 	.word	0x004013b1

004010f8 <atexit>:
  4010f8:	4601      	mov	r1, r0
  4010fa:	2000      	movs	r0, #0
  4010fc:	4602      	mov	r2, r0
  4010fe:	4603      	mov	r3, r0
  401100:	f001 bba0 	b.w	402844 <__register_exitproc>

00401104 <__sflush_r>:
  401104:	898b      	ldrh	r3, [r1, #12]
  401106:	b29a      	uxth	r2, r3
  401108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40110c:	460d      	mov	r5, r1
  40110e:	0711      	lsls	r1, r2, #28
  401110:	4680      	mov	r8, r0
  401112:	d43c      	bmi.n	40118e <__sflush_r+0x8a>
  401114:	686a      	ldr	r2, [r5, #4]
  401116:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40111a:	2a00      	cmp	r2, #0
  40111c:	81ab      	strh	r3, [r5, #12]
  40111e:	dd59      	ble.n	4011d4 <__sflush_r+0xd0>
  401120:	6aac      	ldr	r4, [r5, #40]	; 0x28
  401122:	2c00      	cmp	r4, #0
  401124:	d04b      	beq.n	4011be <__sflush_r+0xba>
  401126:	b29b      	uxth	r3, r3
  401128:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  40112c:	2100      	movs	r1, #0
  40112e:	b292      	uxth	r2, r2
  401130:	f8d8 6000 	ldr.w	r6, [r8]
  401134:	f8c8 1000 	str.w	r1, [r8]
  401138:	2a00      	cmp	r2, #0
  40113a:	d04f      	beq.n	4011dc <__sflush_r+0xd8>
  40113c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40113e:	075f      	lsls	r7, r3, #29
  401140:	d505      	bpl.n	40114e <__sflush_r+0x4a>
  401142:	6869      	ldr	r1, [r5, #4]
  401144:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401146:	1a52      	subs	r2, r2, r1
  401148:	b10b      	cbz	r3, 40114e <__sflush_r+0x4a>
  40114a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40114c:	1ad2      	subs	r2, r2, r3
  40114e:	4640      	mov	r0, r8
  401150:	69e9      	ldr	r1, [r5, #28]
  401152:	2300      	movs	r3, #0
  401154:	47a0      	blx	r4
  401156:	1c44      	adds	r4, r0, #1
  401158:	d04a      	beq.n	4011f0 <__sflush_r+0xec>
  40115a:	89aa      	ldrh	r2, [r5, #12]
  40115c:	692b      	ldr	r3, [r5, #16]
  40115e:	602b      	str	r3, [r5, #0]
  401160:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  401164:	b29b      	uxth	r3, r3
  401166:	2200      	movs	r2, #0
  401168:	606a      	str	r2, [r5, #4]
  40116a:	04da      	lsls	r2, r3, #19
  40116c:	81ab      	strh	r3, [r5, #12]
  40116e:	d44c      	bmi.n	40120a <__sflush_r+0x106>
  401170:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401172:	f8c8 6000 	str.w	r6, [r8]
  401176:	b311      	cbz	r1, 4011be <__sflush_r+0xba>
  401178:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40117c:	4299      	cmp	r1, r3
  40117e:	d002      	beq.n	401186 <__sflush_r+0x82>
  401180:	4640      	mov	r0, r8
  401182:	f000 f97b 	bl	40147c <_free_r>
  401186:	2000      	movs	r0, #0
  401188:	6328      	str	r0, [r5, #48]	; 0x30
  40118a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40118e:	692e      	ldr	r6, [r5, #16]
  401190:	b1ae      	cbz	r6, 4011be <__sflush_r+0xba>
  401192:	682c      	ldr	r4, [r5, #0]
  401194:	602e      	str	r6, [r5, #0]
  401196:	0791      	lsls	r1, r2, #30
  401198:	bf0c      	ite	eq
  40119a:	696b      	ldreq	r3, [r5, #20]
  40119c:	2300      	movne	r3, #0
  40119e:	1ba4      	subs	r4, r4, r6
  4011a0:	60ab      	str	r3, [r5, #8]
  4011a2:	e00a      	b.n	4011ba <__sflush_r+0xb6>
  4011a4:	4632      	mov	r2, r6
  4011a6:	4623      	mov	r3, r4
  4011a8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4011aa:	69e9      	ldr	r1, [r5, #28]
  4011ac:	4640      	mov	r0, r8
  4011ae:	47b8      	blx	r7
  4011b0:	2800      	cmp	r0, #0
  4011b2:	ebc0 0404 	rsb	r4, r0, r4
  4011b6:	4406      	add	r6, r0
  4011b8:	dd04      	ble.n	4011c4 <__sflush_r+0xc0>
  4011ba:	2c00      	cmp	r4, #0
  4011bc:	dcf2      	bgt.n	4011a4 <__sflush_r+0xa0>
  4011be:	2000      	movs	r0, #0
  4011c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011c4:	89ab      	ldrh	r3, [r5, #12]
  4011c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4011ca:	81ab      	strh	r3, [r5, #12]
  4011cc:	f04f 30ff 	mov.w	r0, #4294967295
  4011d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4011d4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4011d6:	2a00      	cmp	r2, #0
  4011d8:	dca2      	bgt.n	401120 <__sflush_r+0x1c>
  4011da:	e7f0      	b.n	4011be <__sflush_r+0xba>
  4011dc:	2301      	movs	r3, #1
  4011de:	4640      	mov	r0, r8
  4011e0:	69e9      	ldr	r1, [r5, #28]
  4011e2:	47a0      	blx	r4
  4011e4:	1c43      	adds	r3, r0, #1
  4011e6:	4602      	mov	r2, r0
  4011e8:	d01e      	beq.n	401228 <__sflush_r+0x124>
  4011ea:	89ab      	ldrh	r3, [r5, #12]
  4011ec:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4011ee:	e7a6      	b.n	40113e <__sflush_r+0x3a>
  4011f0:	f8d8 3000 	ldr.w	r3, [r8]
  4011f4:	b95b      	cbnz	r3, 40120e <__sflush_r+0x10a>
  4011f6:	89a9      	ldrh	r1, [r5, #12]
  4011f8:	606b      	str	r3, [r5, #4]
  4011fa:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
  4011fe:	b29b      	uxth	r3, r3
  401200:	692a      	ldr	r2, [r5, #16]
  401202:	81ab      	strh	r3, [r5, #12]
  401204:	04db      	lsls	r3, r3, #19
  401206:	602a      	str	r2, [r5, #0]
  401208:	d5b2      	bpl.n	401170 <__sflush_r+0x6c>
  40120a:	6528      	str	r0, [r5, #80]	; 0x50
  40120c:	e7b0      	b.n	401170 <__sflush_r+0x6c>
  40120e:	2b1d      	cmp	r3, #29
  401210:	d001      	beq.n	401216 <__sflush_r+0x112>
  401212:	2b16      	cmp	r3, #22
  401214:	d119      	bne.n	40124a <__sflush_r+0x146>
  401216:	89aa      	ldrh	r2, [r5, #12]
  401218:	692b      	ldr	r3, [r5, #16]
  40121a:	602b      	str	r3, [r5, #0]
  40121c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  401220:	2300      	movs	r3, #0
  401222:	81aa      	strh	r2, [r5, #12]
  401224:	606b      	str	r3, [r5, #4]
  401226:	e7a3      	b.n	401170 <__sflush_r+0x6c>
  401228:	f8d8 3000 	ldr.w	r3, [r8]
  40122c:	2b00      	cmp	r3, #0
  40122e:	d0dc      	beq.n	4011ea <__sflush_r+0xe6>
  401230:	2b1d      	cmp	r3, #29
  401232:	d007      	beq.n	401244 <__sflush_r+0x140>
  401234:	2b16      	cmp	r3, #22
  401236:	d005      	beq.n	401244 <__sflush_r+0x140>
  401238:	89ab      	ldrh	r3, [r5, #12]
  40123a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40123e:	81ab      	strh	r3, [r5, #12]
  401240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401244:	f8c8 6000 	str.w	r6, [r8]
  401248:	e7b9      	b.n	4011be <__sflush_r+0xba>
  40124a:	89ab      	ldrh	r3, [r5, #12]
  40124c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401250:	81ab      	strh	r3, [r5, #12]
  401252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401256:	bf00      	nop

00401258 <_fflush_r>:
  401258:	b510      	push	{r4, lr}
  40125a:	4604      	mov	r4, r0
  40125c:	b082      	sub	sp, #8
  40125e:	b108      	cbz	r0, 401264 <_fflush_r+0xc>
  401260:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401262:	b153      	cbz	r3, 40127a <_fflush_r+0x22>
  401264:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  401268:	b908      	cbnz	r0, 40126e <_fflush_r+0x16>
  40126a:	b002      	add	sp, #8
  40126c:	bd10      	pop	{r4, pc}
  40126e:	4620      	mov	r0, r4
  401270:	b002      	add	sp, #8
  401272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  401276:	f7ff bf45 	b.w	401104 <__sflush_r>
  40127a:	9101      	str	r1, [sp, #4]
  40127c:	f000 f81a 	bl	4012b4 <__sinit>
  401280:	9901      	ldr	r1, [sp, #4]
  401282:	e7ef      	b.n	401264 <_fflush_r+0xc>

00401284 <fflush>:
  401284:	b120      	cbz	r0, 401290 <fflush+0xc>
  401286:	4b05      	ldr	r3, [pc, #20]	; (40129c <fflush+0x18>)
  401288:	4601      	mov	r1, r0
  40128a:	6818      	ldr	r0, [r3, #0]
  40128c:	f7ff bfe4 	b.w	401258 <_fflush_r>
  401290:	4b03      	ldr	r3, [pc, #12]	; (4012a0 <fflush+0x1c>)
  401292:	4904      	ldr	r1, [pc, #16]	; (4012a4 <fflush+0x20>)
  401294:	6818      	ldr	r0, [r3, #0]
  401296:	f000 bb71 	b.w	40197c <_fwalk_reent>
  40129a:	bf00      	nop
  40129c:	20000430 	.word	0x20000430
  4012a0:	00402b68 	.word	0x00402b68
  4012a4:	00401259 	.word	0x00401259

004012a8 <_cleanup_r>:
  4012a8:	4901      	ldr	r1, [pc, #4]	; (4012b0 <_cleanup_r+0x8>)
  4012aa:	f000 bb41 	b.w	401930 <_fwalk>
  4012ae:	bf00      	nop
  4012b0:	00402991 	.word	0x00402991

004012b4 <__sinit>:
  4012b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012b8:	6b84      	ldr	r4, [r0, #56]	; 0x38
  4012ba:	b083      	sub	sp, #12
  4012bc:	4607      	mov	r7, r0
  4012be:	2c00      	cmp	r4, #0
  4012c0:	d165      	bne.n	40138e <__sinit+0xda>
  4012c2:	6845      	ldr	r5, [r0, #4]
  4012c4:	4833      	ldr	r0, [pc, #204]	; (401394 <__sinit+0xe0>)
  4012c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  4012c8:	2304      	movs	r3, #4
  4012ca:	2103      	movs	r1, #3
  4012cc:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
  4012d0:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
  4012d4:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
  4012d8:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
  4012dc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4012e0:	81ab      	strh	r3, [r5, #12]
  4012e2:	602c      	str	r4, [r5, #0]
  4012e4:	606c      	str	r4, [r5, #4]
  4012e6:	60ac      	str	r4, [r5, #8]
  4012e8:	666c      	str	r4, [r5, #100]	; 0x64
  4012ea:	81ec      	strh	r4, [r5, #14]
  4012ec:	612c      	str	r4, [r5, #16]
  4012ee:	616c      	str	r4, [r5, #20]
  4012f0:	61ac      	str	r4, [r5, #24]
  4012f2:	4621      	mov	r1, r4
  4012f4:	2208      	movs	r2, #8
  4012f6:	f7ff fd41 	bl	400d7c <memset>
  4012fa:	68be      	ldr	r6, [r7, #8]
  4012fc:	f8df b098 	ldr.w	fp, [pc, #152]	; 401398 <__sinit+0xe4>
  401300:	f8df a098 	ldr.w	sl, [pc, #152]	; 40139c <__sinit+0xe8>
  401304:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4013a0 <__sinit+0xec>
  401308:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4013a4 <__sinit+0xf0>
  40130c:	61ed      	str	r5, [r5, #28]
  40130e:	2301      	movs	r3, #1
  401310:	2209      	movs	r2, #9
  401312:	f8c5 b020 	str.w	fp, [r5, #32]
  401316:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  40131a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  40131e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401322:	4621      	mov	r1, r4
  401324:	81f3      	strh	r3, [r6, #14]
  401326:	81b2      	strh	r2, [r6, #12]
  401328:	6034      	str	r4, [r6, #0]
  40132a:	6074      	str	r4, [r6, #4]
  40132c:	60b4      	str	r4, [r6, #8]
  40132e:	6674      	str	r4, [r6, #100]	; 0x64
  401330:	6134      	str	r4, [r6, #16]
  401332:	6174      	str	r4, [r6, #20]
  401334:	61b4      	str	r4, [r6, #24]
  401336:	2208      	movs	r2, #8
  401338:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  40133c:	9301      	str	r3, [sp, #4]
  40133e:	f7ff fd1d 	bl	400d7c <memset>
  401342:	68fd      	ldr	r5, [r7, #12]
  401344:	61f6      	str	r6, [r6, #28]
  401346:	2012      	movs	r0, #18
  401348:	2202      	movs	r2, #2
  40134a:	f8c6 b020 	str.w	fp, [r6, #32]
  40134e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  401352:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  401356:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  40135a:	4621      	mov	r1, r4
  40135c:	81a8      	strh	r0, [r5, #12]
  40135e:	81ea      	strh	r2, [r5, #14]
  401360:	602c      	str	r4, [r5, #0]
  401362:	606c      	str	r4, [r5, #4]
  401364:	60ac      	str	r4, [r5, #8]
  401366:	666c      	str	r4, [r5, #100]	; 0x64
  401368:	612c      	str	r4, [r5, #16]
  40136a:	616c      	str	r4, [r5, #20]
  40136c:	61ac      	str	r4, [r5, #24]
  40136e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  401372:	2208      	movs	r2, #8
  401374:	f7ff fd02 	bl	400d7c <memset>
  401378:	9b01      	ldr	r3, [sp, #4]
  40137a:	61ed      	str	r5, [r5, #28]
  40137c:	f8c5 b020 	str.w	fp, [r5, #32]
  401380:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401384:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401388:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  40138c:	63bb      	str	r3, [r7, #56]	; 0x38
  40138e:	b003      	add	sp, #12
  401390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401394:	004012a9 	.word	0x004012a9
  401398:	00402799 	.word	0x00402799
  40139c:	004027bd 	.word	0x004027bd
  4013a0:	004027f5 	.word	0x004027f5
  4013a4:	00402815 	.word	0x00402815

004013a8 <__sfp_lock_acquire>:
  4013a8:	4770      	bx	lr
  4013aa:	bf00      	nop

004013ac <__sfp_lock_release>:
  4013ac:	4770      	bx	lr
  4013ae:	bf00      	nop

004013b0 <__libc_fini_array>:
  4013b0:	b538      	push	{r3, r4, r5, lr}
  4013b2:	4d09      	ldr	r5, [pc, #36]	; (4013d8 <__libc_fini_array+0x28>)
  4013b4:	4c09      	ldr	r4, [pc, #36]	; (4013dc <__libc_fini_array+0x2c>)
  4013b6:	1b64      	subs	r4, r4, r5
  4013b8:	10a4      	asrs	r4, r4, #2
  4013ba:	bf18      	it	ne
  4013bc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  4013c0:	d005      	beq.n	4013ce <__libc_fini_array+0x1e>
  4013c2:	3c01      	subs	r4, #1
  4013c4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4013c8:	4798      	blx	r3
  4013ca:	2c00      	cmp	r4, #0
  4013cc:	d1f9      	bne.n	4013c2 <__libc_fini_array+0x12>
  4013ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4013d2:	f001 bbd7 	b.w	402b84 <_fini>
  4013d6:	bf00      	nop
  4013d8:	00402b90 	.word	0x00402b90
  4013dc:	00402b94 	.word	0x00402b94

004013e0 <_malloc_trim_r>:
  4013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4013e2:	4d23      	ldr	r5, [pc, #140]	; (401470 <_malloc_trim_r+0x90>)
  4013e4:	460f      	mov	r7, r1
  4013e6:	4604      	mov	r4, r0
  4013e8:	f000 ff46 	bl	402278 <__malloc_lock>
  4013ec:	68ab      	ldr	r3, [r5, #8]
  4013ee:	685e      	ldr	r6, [r3, #4]
  4013f0:	f026 0603 	bic.w	r6, r6, #3
  4013f4:	1bf1      	subs	r1, r6, r7
  4013f6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  4013fa:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4013fe:	f021 010f 	bic.w	r1, r1, #15
  401402:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  401406:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  40140a:	db07      	blt.n	40141c <_malloc_trim_r+0x3c>
  40140c:	4620      	mov	r0, r4
  40140e:	2100      	movs	r1, #0
  401410:	f001 f9b0 	bl	402774 <_sbrk_r>
  401414:	68ab      	ldr	r3, [r5, #8]
  401416:	4433      	add	r3, r6
  401418:	4298      	cmp	r0, r3
  40141a:	d004      	beq.n	401426 <_malloc_trim_r+0x46>
  40141c:	4620      	mov	r0, r4
  40141e:	f000 ff2d 	bl	40227c <__malloc_unlock>
  401422:	2000      	movs	r0, #0
  401424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401426:	4620      	mov	r0, r4
  401428:	4279      	negs	r1, r7
  40142a:	f001 f9a3 	bl	402774 <_sbrk_r>
  40142e:	3001      	adds	r0, #1
  401430:	d00d      	beq.n	40144e <_malloc_trim_r+0x6e>
  401432:	4b10      	ldr	r3, [pc, #64]	; (401474 <_malloc_trim_r+0x94>)
  401434:	68aa      	ldr	r2, [r5, #8]
  401436:	6819      	ldr	r1, [r3, #0]
  401438:	1bf6      	subs	r6, r6, r7
  40143a:	f046 0601 	orr.w	r6, r6, #1
  40143e:	4620      	mov	r0, r4
  401440:	1bc9      	subs	r1, r1, r7
  401442:	6056      	str	r6, [r2, #4]
  401444:	6019      	str	r1, [r3, #0]
  401446:	f000 ff19 	bl	40227c <__malloc_unlock>
  40144a:	2001      	movs	r0, #1
  40144c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40144e:	4620      	mov	r0, r4
  401450:	2100      	movs	r1, #0
  401452:	f001 f98f 	bl	402774 <_sbrk_r>
  401456:	68ab      	ldr	r3, [r5, #8]
  401458:	1ac2      	subs	r2, r0, r3
  40145a:	2a0f      	cmp	r2, #15
  40145c:	ddde      	ble.n	40141c <_malloc_trim_r+0x3c>
  40145e:	4d06      	ldr	r5, [pc, #24]	; (401478 <_malloc_trim_r+0x98>)
  401460:	4904      	ldr	r1, [pc, #16]	; (401474 <_malloc_trim_r+0x94>)
  401462:	682d      	ldr	r5, [r5, #0]
  401464:	f042 0201 	orr.w	r2, r2, #1
  401468:	1b40      	subs	r0, r0, r5
  40146a:	605a      	str	r2, [r3, #4]
  40146c:	6008      	str	r0, [r1, #0]
  40146e:	e7d5      	b.n	40141c <_malloc_trim_r+0x3c>
  401470:	20000434 	.word	0x20000434
  401474:	200008e4 	.word	0x200008e4
  401478:	20000840 	.word	0x20000840

0040147c <_free_r>:
  40147c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401480:	460d      	mov	r5, r1
  401482:	4606      	mov	r6, r0
  401484:	2900      	cmp	r1, #0
  401486:	d055      	beq.n	401534 <_free_r+0xb8>
  401488:	f000 fef6 	bl	402278 <__malloc_lock>
  40148c:	f855 1c04 	ldr.w	r1, [r5, #-4]
  401490:	f8df c174 	ldr.w	ip, [pc, #372]	; 401608 <_free_r+0x18c>
  401494:	f021 0301 	bic.w	r3, r1, #1
  401498:	f1a5 0408 	sub.w	r4, r5, #8
  40149c:	18e2      	adds	r2, r4, r3
  40149e:	f8dc 0008 	ldr.w	r0, [ip, #8]
  4014a2:	6857      	ldr	r7, [r2, #4]
  4014a4:	4290      	cmp	r0, r2
  4014a6:	f027 0703 	bic.w	r7, r7, #3
  4014aa:	d069      	beq.n	401580 <_free_r+0x104>
  4014ac:	f011 0101 	ands.w	r1, r1, #1
  4014b0:	6057      	str	r7, [r2, #4]
  4014b2:	d032      	beq.n	40151a <_free_r+0x9e>
  4014b4:	2100      	movs	r1, #0
  4014b6:	19d0      	adds	r0, r2, r7
  4014b8:	6840      	ldr	r0, [r0, #4]
  4014ba:	07c0      	lsls	r0, r0, #31
  4014bc:	d406      	bmi.n	4014cc <_free_r+0x50>
  4014be:	443b      	add	r3, r7
  4014c0:	6890      	ldr	r0, [r2, #8]
  4014c2:	2900      	cmp	r1, #0
  4014c4:	d04e      	beq.n	401564 <_free_r+0xe8>
  4014c6:	68d2      	ldr	r2, [r2, #12]
  4014c8:	60c2      	str	r2, [r0, #12]
  4014ca:	6090      	str	r0, [r2, #8]
  4014cc:	f043 0201 	orr.w	r2, r3, #1
  4014d0:	6062      	str	r2, [r4, #4]
  4014d2:	50e3      	str	r3, [r4, r3]
  4014d4:	b9e1      	cbnz	r1, 401510 <_free_r+0x94>
  4014d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4014da:	d32d      	bcc.n	401538 <_free_r+0xbc>
  4014dc:	0a5a      	lsrs	r2, r3, #9
  4014de:	2a04      	cmp	r2, #4
  4014e0:	d86a      	bhi.n	4015b8 <_free_r+0x13c>
  4014e2:	0998      	lsrs	r0, r3, #6
  4014e4:	3038      	adds	r0, #56	; 0x38
  4014e6:	0041      	lsls	r1, r0, #1
  4014e8:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  4014ec:	4946      	ldr	r1, [pc, #280]	; (401608 <_free_r+0x18c>)
  4014ee:	f8dc 2008 	ldr.w	r2, [ip, #8]
  4014f2:	4562      	cmp	r2, ip
  4014f4:	d066      	beq.n	4015c4 <_free_r+0x148>
  4014f6:	6851      	ldr	r1, [r2, #4]
  4014f8:	f021 0103 	bic.w	r1, r1, #3
  4014fc:	428b      	cmp	r3, r1
  4014fe:	d202      	bcs.n	401506 <_free_r+0x8a>
  401500:	6892      	ldr	r2, [r2, #8]
  401502:	4594      	cmp	ip, r2
  401504:	d1f7      	bne.n	4014f6 <_free_r+0x7a>
  401506:	68d3      	ldr	r3, [r2, #12]
  401508:	60e3      	str	r3, [r4, #12]
  40150a:	60a2      	str	r2, [r4, #8]
  40150c:	609c      	str	r4, [r3, #8]
  40150e:	60d4      	str	r4, [r2, #12]
  401510:	4630      	mov	r0, r6
  401512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401516:	f000 beb1 	b.w	40227c <__malloc_unlock>
  40151a:	f855 5c08 	ldr.w	r5, [r5, #-8]
  40151e:	1b64      	subs	r4, r4, r5
  401520:	f10c 0808 	add.w	r8, ip, #8
  401524:	68a0      	ldr	r0, [r4, #8]
  401526:	4540      	cmp	r0, r8
  401528:	442b      	add	r3, r5
  40152a:	d043      	beq.n	4015b4 <_free_r+0x138>
  40152c:	68e5      	ldr	r5, [r4, #12]
  40152e:	60c5      	str	r5, [r0, #12]
  401530:	60a8      	str	r0, [r5, #8]
  401532:	e7c0      	b.n	4014b6 <_free_r+0x3a>
  401534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401538:	08db      	lsrs	r3, r3, #3
  40153a:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
  40153e:	2501      	movs	r5, #1
  401540:	f8dc 0004 	ldr.w	r0, [ip, #4]
  401544:	6891      	ldr	r1, [r2, #8]
  401546:	60a1      	str	r1, [r4, #8]
  401548:	109b      	asrs	r3, r3, #2
  40154a:	fa05 f303 	lsl.w	r3, r5, r3
  40154e:	4318      	orrs	r0, r3
  401550:	60e2      	str	r2, [r4, #12]
  401552:	f8cc 0004 	str.w	r0, [ip, #4]
  401556:	6094      	str	r4, [r2, #8]
  401558:	4630      	mov	r0, r6
  40155a:	60cc      	str	r4, [r1, #12]
  40155c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401560:	f000 be8c 	b.w	40227c <__malloc_unlock>
  401564:	4d29      	ldr	r5, [pc, #164]	; (40160c <_free_r+0x190>)
  401566:	42a8      	cmp	r0, r5
  401568:	d1ad      	bne.n	4014c6 <_free_r+0x4a>
  40156a:	f043 0201 	orr.w	r2, r3, #1
  40156e:	f8cc 4014 	str.w	r4, [ip, #20]
  401572:	f8cc 4010 	str.w	r4, [ip, #16]
  401576:	60e0      	str	r0, [r4, #12]
  401578:	60a0      	str	r0, [r4, #8]
  40157a:	6062      	str	r2, [r4, #4]
  40157c:	50e3      	str	r3, [r4, r3]
  40157e:	e7c7      	b.n	401510 <_free_r+0x94>
  401580:	441f      	add	r7, r3
  401582:	07cb      	lsls	r3, r1, #31
  401584:	d407      	bmi.n	401596 <_free_r+0x11a>
  401586:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40158a:	1ae4      	subs	r4, r4, r3
  40158c:	441f      	add	r7, r3
  40158e:	68a2      	ldr	r2, [r4, #8]
  401590:	68e3      	ldr	r3, [r4, #12]
  401592:	60d3      	str	r3, [r2, #12]
  401594:	609a      	str	r2, [r3, #8]
  401596:	4b1e      	ldr	r3, [pc, #120]	; (401610 <_free_r+0x194>)
  401598:	681b      	ldr	r3, [r3, #0]
  40159a:	f047 0201 	orr.w	r2, r7, #1
  40159e:	429f      	cmp	r7, r3
  4015a0:	6062      	str	r2, [r4, #4]
  4015a2:	f8cc 4008 	str.w	r4, [ip, #8]
  4015a6:	d3b3      	bcc.n	401510 <_free_r+0x94>
  4015a8:	4b1a      	ldr	r3, [pc, #104]	; (401614 <_free_r+0x198>)
  4015aa:	4630      	mov	r0, r6
  4015ac:	6819      	ldr	r1, [r3, #0]
  4015ae:	f7ff ff17 	bl	4013e0 <_malloc_trim_r>
  4015b2:	e7ad      	b.n	401510 <_free_r+0x94>
  4015b4:	2101      	movs	r1, #1
  4015b6:	e77e      	b.n	4014b6 <_free_r+0x3a>
  4015b8:	2a14      	cmp	r2, #20
  4015ba:	d80c      	bhi.n	4015d6 <_free_r+0x15a>
  4015bc:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  4015c0:	0041      	lsls	r1, r0, #1
  4015c2:	e791      	b.n	4014e8 <_free_r+0x6c>
  4015c4:	684b      	ldr	r3, [r1, #4]
  4015c6:	1080      	asrs	r0, r0, #2
  4015c8:	2501      	movs	r5, #1
  4015ca:	fa05 f000 	lsl.w	r0, r5, r0
  4015ce:	4303      	orrs	r3, r0
  4015d0:	604b      	str	r3, [r1, #4]
  4015d2:	4613      	mov	r3, r2
  4015d4:	e798      	b.n	401508 <_free_r+0x8c>
  4015d6:	2a54      	cmp	r2, #84	; 0x54
  4015d8:	d803      	bhi.n	4015e2 <_free_r+0x166>
  4015da:	0b18      	lsrs	r0, r3, #12
  4015dc:	306e      	adds	r0, #110	; 0x6e
  4015de:	0041      	lsls	r1, r0, #1
  4015e0:	e782      	b.n	4014e8 <_free_r+0x6c>
  4015e2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4015e6:	d803      	bhi.n	4015f0 <_free_r+0x174>
  4015e8:	0bd8      	lsrs	r0, r3, #15
  4015ea:	3077      	adds	r0, #119	; 0x77
  4015ec:	0041      	lsls	r1, r0, #1
  4015ee:	e77b      	b.n	4014e8 <_free_r+0x6c>
  4015f0:	f240 5154 	movw	r1, #1364	; 0x554
  4015f4:	428a      	cmp	r2, r1
  4015f6:	d803      	bhi.n	401600 <_free_r+0x184>
  4015f8:	0c98      	lsrs	r0, r3, #18
  4015fa:	307c      	adds	r0, #124	; 0x7c
  4015fc:	0041      	lsls	r1, r0, #1
  4015fe:	e773      	b.n	4014e8 <_free_r+0x6c>
  401600:	21fc      	movs	r1, #252	; 0xfc
  401602:	207e      	movs	r0, #126	; 0x7e
  401604:	e770      	b.n	4014e8 <_free_r+0x6c>
  401606:	bf00      	nop
  401608:	20000434 	.word	0x20000434
  40160c:	2000043c 	.word	0x2000043c
  401610:	2000083c 	.word	0x2000083c
  401614:	200008e0 	.word	0x200008e0

00401618 <__sfvwrite_r>:
  401618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40161c:	6893      	ldr	r3, [r2, #8]
  40161e:	b083      	sub	sp, #12
  401620:	4616      	mov	r6, r2
  401622:	4681      	mov	r9, r0
  401624:	460c      	mov	r4, r1
  401626:	b32b      	cbz	r3, 401674 <__sfvwrite_r+0x5c>
  401628:	898b      	ldrh	r3, [r1, #12]
  40162a:	0719      	lsls	r1, r3, #28
  40162c:	d526      	bpl.n	40167c <__sfvwrite_r+0x64>
  40162e:	6922      	ldr	r2, [r4, #16]
  401630:	b322      	cbz	r2, 40167c <__sfvwrite_r+0x64>
  401632:	f003 0202 	and.w	r2, r3, #2
  401636:	b292      	uxth	r2, r2
  401638:	6835      	ldr	r5, [r6, #0]
  40163a:	2a00      	cmp	r2, #0
  40163c:	d02c      	beq.n	401698 <__sfvwrite_r+0x80>
  40163e:	f04f 0a00 	mov.w	sl, #0
  401642:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 40192c <__sfvwrite_r+0x314>
  401646:	46d0      	mov	r8, sl
  401648:	45d8      	cmp	r8, fp
  40164a:	bf34      	ite	cc
  40164c:	4643      	movcc	r3, r8
  40164e:	465b      	movcs	r3, fp
  401650:	4652      	mov	r2, sl
  401652:	4648      	mov	r0, r9
  401654:	f1b8 0f00 	cmp.w	r8, #0
  401658:	d04f      	beq.n	4016fa <__sfvwrite_r+0xe2>
  40165a:	69e1      	ldr	r1, [r4, #28]
  40165c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40165e:	47b8      	blx	r7
  401660:	2800      	cmp	r0, #0
  401662:	dd56      	ble.n	401712 <__sfvwrite_r+0xfa>
  401664:	68b3      	ldr	r3, [r6, #8]
  401666:	1a1b      	subs	r3, r3, r0
  401668:	4482      	add	sl, r0
  40166a:	ebc0 0808 	rsb	r8, r0, r8
  40166e:	60b3      	str	r3, [r6, #8]
  401670:	2b00      	cmp	r3, #0
  401672:	d1e9      	bne.n	401648 <__sfvwrite_r+0x30>
  401674:	2000      	movs	r0, #0
  401676:	b003      	add	sp, #12
  401678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40167c:	4648      	mov	r0, r9
  40167e:	4621      	mov	r1, r4
  401680:	f7ff fcce 	bl	401020 <__swsetup_r>
  401684:	2800      	cmp	r0, #0
  401686:	f040 8148 	bne.w	40191a <__sfvwrite_r+0x302>
  40168a:	89a3      	ldrh	r3, [r4, #12]
  40168c:	6835      	ldr	r5, [r6, #0]
  40168e:	f003 0202 	and.w	r2, r3, #2
  401692:	b292      	uxth	r2, r2
  401694:	2a00      	cmp	r2, #0
  401696:	d1d2      	bne.n	40163e <__sfvwrite_r+0x26>
  401698:	f013 0a01 	ands.w	sl, r3, #1
  40169c:	d142      	bne.n	401724 <__sfvwrite_r+0x10c>
  40169e:	46d0      	mov	r8, sl
  4016a0:	f1b8 0f00 	cmp.w	r8, #0
  4016a4:	d023      	beq.n	4016ee <__sfvwrite_r+0xd6>
  4016a6:	059a      	lsls	r2, r3, #22
  4016a8:	68a7      	ldr	r7, [r4, #8]
  4016aa:	d576      	bpl.n	40179a <__sfvwrite_r+0x182>
  4016ac:	45b8      	cmp	r8, r7
  4016ae:	f0c0 80a4 	bcc.w	4017fa <__sfvwrite_r+0x1e2>
  4016b2:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4016b6:	f040 80b2 	bne.w	40181e <__sfvwrite_r+0x206>
  4016ba:	6820      	ldr	r0, [r4, #0]
  4016bc:	46bb      	mov	fp, r7
  4016be:	4651      	mov	r1, sl
  4016c0:	465a      	mov	r2, fp
  4016c2:	f000 fd79 	bl	4021b8 <memmove>
  4016c6:	68a2      	ldr	r2, [r4, #8]
  4016c8:	6821      	ldr	r1, [r4, #0]
  4016ca:	1bd2      	subs	r2, r2, r7
  4016cc:	eb01 030b 	add.w	r3, r1, fp
  4016d0:	60a2      	str	r2, [r4, #8]
  4016d2:	6023      	str	r3, [r4, #0]
  4016d4:	4642      	mov	r2, r8
  4016d6:	68b3      	ldr	r3, [r6, #8]
  4016d8:	1a9b      	subs	r3, r3, r2
  4016da:	4492      	add	sl, r2
  4016dc:	ebc2 0808 	rsb	r8, r2, r8
  4016e0:	60b3      	str	r3, [r6, #8]
  4016e2:	2b00      	cmp	r3, #0
  4016e4:	d0c6      	beq.n	401674 <__sfvwrite_r+0x5c>
  4016e6:	89a3      	ldrh	r3, [r4, #12]
  4016e8:	f1b8 0f00 	cmp.w	r8, #0
  4016ec:	d1db      	bne.n	4016a6 <__sfvwrite_r+0x8e>
  4016ee:	f8d5 a000 	ldr.w	sl, [r5]
  4016f2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4016f6:	3508      	adds	r5, #8
  4016f8:	e7d2      	b.n	4016a0 <__sfvwrite_r+0x88>
  4016fa:	f8d5 a000 	ldr.w	sl, [r5]
  4016fe:	f8d5 8004 	ldr.w	r8, [r5, #4]
  401702:	3508      	adds	r5, #8
  401704:	e7a0      	b.n	401648 <__sfvwrite_r+0x30>
  401706:	4648      	mov	r0, r9
  401708:	4621      	mov	r1, r4
  40170a:	f7ff fda5 	bl	401258 <_fflush_r>
  40170e:	2800      	cmp	r0, #0
  401710:	d059      	beq.n	4017c6 <__sfvwrite_r+0x1ae>
  401712:	89a3      	ldrh	r3, [r4, #12]
  401714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401718:	f04f 30ff 	mov.w	r0, #4294967295
  40171c:	81a3      	strh	r3, [r4, #12]
  40171e:	b003      	add	sp, #12
  401720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401724:	4692      	mov	sl, r2
  401726:	9201      	str	r2, [sp, #4]
  401728:	4693      	mov	fp, r2
  40172a:	4690      	mov	r8, r2
  40172c:	f1b8 0f00 	cmp.w	r8, #0
  401730:	d02b      	beq.n	40178a <__sfvwrite_r+0x172>
  401732:	9f01      	ldr	r7, [sp, #4]
  401734:	2f00      	cmp	r7, #0
  401736:	d064      	beq.n	401802 <__sfvwrite_r+0x1ea>
  401738:	6820      	ldr	r0, [r4, #0]
  40173a:	6921      	ldr	r1, [r4, #16]
  40173c:	f8d4 c008 	ldr.w	ip, [r4, #8]
  401740:	6962      	ldr	r2, [r4, #20]
  401742:	45c2      	cmp	sl, r8
  401744:	bf34      	ite	cc
  401746:	4653      	movcc	r3, sl
  401748:	4643      	movcs	r3, r8
  40174a:	4288      	cmp	r0, r1
  40174c:	461f      	mov	r7, r3
  40174e:	d903      	bls.n	401758 <__sfvwrite_r+0x140>
  401750:	4494      	add	ip, r2
  401752:	4563      	cmp	r3, ip
  401754:	f300 80ae 	bgt.w	4018b4 <__sfvwrite_r+0x29c>
  401758:	4293      	cmp	r3, r2
  40175a:	db36      	blt.n	4017ca <__sfvwrite_r+0x1b2>
  40175c:	4613      	mov	r3, r2
  40175e:	6a67      	ldr	r7, [r4, #36]	; 0x24
  401760:	69e1      	ldr	r1, [r4, #28]
  401762:	4648      	mov	r0, r9
  401764:	465a      	mov	r2, fp
  401766:	47b8      	blx	r7
  401768:	1e07      	subs	r7, r0, #0
  40176a:	ddd2      	ble.n	401712 <__sfvwrite_r+0xfa>
  40176c:	ebba 0a07 	subs.w	sl, sl, r7
  401770:	d03a      	beq.n	4017e8 <__sfvwrite_r+0x1d0>
  401772:	68b3      	ldr	r3, [r6, #8]
  401774:	1bdb      	subs	r3, r3, r7
  401776:	44bb      	add	fp, r7
  401778:	ebc7 0808 	rsb	r8, r7, r8
  40177c:	60b3      	str	r3, [r6, #8]
  40177e:	2b00      	cmp	r3, #0
  401780:	f43f af78 	beq.w	401674 <__sfvwrite_r+0x5c>
  401784:	f1b8 0f00 	cmp.w	r8, #0
  401788:	d1d3      	bne.n	401732 <__sfvwrite_r+0x11a>
  40178a:	2700      	movs	r7, #0
  40178c:	f8d5 b000 	ldr.w	fp, [r5]
  401790:	f8d5 8004 	ldr.w	r8, [r5, #4]
  401794:	9701      	str	r7, [sp, #4]
  401796:	3508      	adds	r5, #8
  401798:	e7c8      	b.n	40172c <__sfvwrite_r+0x114>
  40179a:	6820      	ldr	r0, [r4, #0]
  40179c:	6923      	ldr	r3, [r4, #16]
  40179e:	4298      	cmp	r0, r3
  4017a0:	d802      	bhi.n	4017a8 <__sfvwrite_r+0x190>
  4017a2:	6963      	ldr	r3, [r4, #20]
  4017a4:	4598      	cmp	r8, r3
  4017a6:	d272      	bcs.n	40188e <__sfvwrite_r+0x276>
  4017a8:	45b8      	cmp	r8, r7
  4017aa:	bf38      	it	cc
  4017ac:	4647      	movcc	r7, r8
  4017ae:	463a      	mov	r2, r7
  4017b0:	4651      	mov	r1, sl
  4017b2:	f000 fd01 	bl	4021b8 <memmove>
  4017b6:	68a3      	ldr	r3, [r4, #8]
  4017b8:	6822      	ldr	r2, [r4, #0]
  4017ba:	1bdb      	subs	r3, r3, r7
  4017bc:	443a      	add	r2, r7
  4017be:	60a3      	str	r3, [r4, #8]
  4017c0:	6022      	str	r2, [r4, #0]
  4017c2:	2b00      	cmp	r3, #0
  4017c4:	d09f      	beq.n	401706 <__sfvwrite_r+0xee>
  4017c6:	463a      	mov	r2, r7
  4017c8:	e785      	b.n	4016d6 <__sfvwrite_r+0xbe>
  4017ca:	461a      	mov	r2, r3
  4017cc:	4659      	mov	r1, fp
  4017ce:	9300      	str	r3, [sp, #0]
  4017d0:	f000 fcf2 	bl	4021b8 <memmove>
  4017d4:	9b00      	ldr	r3, [sp, #0]
  4017d6:	68a1      	ldr	r1, [r4, #8]
  4017d8:	6822      	ldr	r2, [r4, #0]
  4017da:	1ac9      	subs	r1, r1, r3
  4017dc:	ebba 0a07 	subs.w	sl, sl, r7
  4017e0:	4413      	add	r3, r2
  4017e2:	60a1      	str	r1, [r4, #8]
  4017e4:	6023      	str	r3, [r4, #0]
  4017e6:	d1c4      	bne.n	401772 <__sfvwrite_r+0x15a>
  4017e8:	4648      	mov	r0, r9
  4017ea:	4621      	mov	r1, r4
  4017ec:	f7ff fd34 	bl	401258 <_fflush_r>
  4017f0:	2800      	cmp	r0, #0
  4017f2:	d18e      	bne.n	401712 <__sfvwrite_r+0xfa>
  4017f4:	f8cd a004 	str.w	sl, [sp, #4]
  4017f8:	e7bb      	b.n	401772 <__sfvwrite_r+0x15a>
  4017fa:	6820      	ldr	r0, [r4, #0]
  4017fc:	4647      	mov	r7, r8
  4017fe:	46c3      	mov	fp, r8
  401800:	e75d      	b.n	4016be <__sfvwrite_r+0xa6>
  401802:	4658      	mov	r0, fp
  401804:	210a      	movs	r1, #10
  401806:	4642      	mov	r2, r8
  401808:	f000 fbf4 	bl	401ff4 <memchr>
  40180c:	2800      	cmp	r0, #0
  40180e:	d07f      	beq.n	401910 <__sfvwrite_r+0x2f8>
  401810:	f100 0a01 	add.w	sl, r0, #1
  401814:	2701      	movs	r7, #1
  401816:	ebcb 0a0a 	rsb	sl, fp, sl
  40181a:	9701      	str	r7, [sp, #4]
  40181c:	e78c      	b.n	401738 <__sfvwrite_r+0x120>
  40181e:	6822      	ldr	r2, [r4, #0]
  401820:	6921      	ldr	r1, [r4, #16]
  401822:	6967      	ldr	r7, [r4, #20]
  401824:	ebc1 0c02 	rsb	ip, r1, r2
  401828:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40182c:	f10c 0201 	add.w	r2, ip, #1
  401830:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  401834:	4442      	add	r2, r8
  401836:	107f      	asrs	r7, r7, #1
  401838:	4297      	cmp	r7, r2
  40183a:	bf34      	ite	cc
  40183c:	4617      	movcc	r7, r2
  40183e:	463a      	movcs	r2, r7
  401840:	055b      	lsls	r3, r3, #21
  401842:	d54f      	bpl.n	4018e4 <__sfvwrite_r+0x2cc>
  401844:	4611      	mov	r1, r2
  401846:	4648      	mov	r0, r9
  401848:	f8cd c000 	str.w	ip, [sp]
  40184c:	f000 f936 	bl	401abc <_malloc_r>
  401850:	f8dd c000 	ldr.w	ip, [sp]
  401854:	4683      	mov	fp, r0
  401856:	2800      	cmp	r0, #0
  401858:	d062      	beq.n	401920 <__sfvwrite_r+0x308>
  40185a:	4662      	mov	r2, ip
  40185c:	6921      	ldr	r1, [r4, #16]
  40185e:	f8cd c000 	str.w	ip, [sp]
  401862:	f000 fc0f 	bl	402084 <memcpy>
  401866:	89a2      	ldrh	r2, [r4, #12]
  401868:	f8dd c000 	ldr.w	ip, [sp]
  40186c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  401870:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  401874:	81a2      	strh	r2, [r4, #12]
  401876:	eb0b 000c 	add.w	r0, fp, ip
  40187a:	ebcc 0207 	rsb	r2, ip, r7
  40187e:	f8c4 b010 	str.w	fp, [r4, #16]
  401882:	6167      	str	r7, [r4, #20]
  401884:	6020      	str	r0, [r4, #0]
  401886:	60a2      	str	r2, [r4, #8]
  401888:	4647      	mov	r7, r8
  40188a:	46c3      	mov	fp, r8
  40188c:	e717      	b.n	4016be <__sfvwrite_r+0xa6>
  40188e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  401892:	4590      	cmp	r8, r2
  401894:	bf38      	it	cc
  401896:	4642      	movcc	r2, r8
  401898:	fb92 f2f3 	sdiv	r2, r2, r3
  40189c:	fb02 f303 	mul.w	r3, r2, r3
  4018a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4018a2:	69e1      	ldr	r1, [r4, #28]
  4018a4:	4648      	mov	r0, r9
  4018a6:	4652      	mov	r2, sl
  4018a8:	47b8      	blx	r7
  4018aa:	2800      	cmp	r0, #0
  4018ac:	f77f af31 	ble.w	401712 <__sfvwrite_r+0xfa>
  4018b0:	4602      	mov	r2, r0
  4018b2:	e710      	b.n	4016d6 <__sfvwrite_r+0xbe>
  4018b4:	4662      	mov	r2, ip
  4018b6:	4659      	mov	r1, fp
  4018b8:	f8cd c000 	str.w	ip, [sp]
  4018bc:	f000 fc7c 	bl	4021b8 <memmove>
  4018c0:	f8dd c000 	ldr.w	ip, [sp]
  4018c4:	6823      	ldr	r3, [r4, #0]
  4018c6:	4463      	add	r3, ip
  4018c8:	6023      	str	r3, [r4, #0]
  4018ca:	4648      	mov	r0, r9
  4018cc:	4621      	mov	r1, r4
  4018ce:	f8cd c000 	str.w	ip, [sp]
  4018d2:	f7ff fcc1 	bl	401258 <_fflush_r>
  4018d6:	f8dd c000 	ldr.w	ip, [sp]
  4018da:	2800      	cmp	r0, #0
  4018dc:	f47f af19 	bne.w	401712 <__sfvwrite_r+0xfa>
  4018e0:	4667      	mov	r7, ip
  4018e2:	e743      	b.n	40176c <__sfvwrite_r+0x154>
  4018e4:	4648      	mov	r0, r9
  4018e6:	f8cd c000 	str.w	ip, [sp]
  4018ea:	f000 fcc9 	bl	402280 <_realloc_r>
  4018ee:	f8dd c000 	ldr.w	ip, [sp]
  4018f2:	4683      	mov	fp, r0
  4018f4:	2800      	cmp	r0, #0
  4018f6:	d1be      	bne.n	401876 <__sfvwrite_r+0x25e>
  4018f8:	4648      	mov	r0, r9
  4018fa:	6921      	ldr	r1, [r4, #16]
  4018fc:	f7ff fdbe 	bl	40147c <_free_r>
  401900:	89a3      	ldrh	r3, [r4, #12]
  401902:	220c      	movs	r2, #12
  401904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401908:	b29b      	uxth	r3, r3
  40190a:	f8c9 2000 	str.w	r2, [r9]
  40190e:	e701      	b.n	401714 <__sfvwrite_r+0xfc>
  401910:	2701      	movs	r7, #1
  401912:	f108 0a01 	add.w	sl, r8, #1
  401916:	9701      	str	r7, [sp, #4]
  401918:	e70e      	b.n	401738 <__sfvwrite_r+0x120>
  40191a:	f04f 30ff 	mov.w	r0, #4294967295
  40191e:	e6aa      	b.n	401676 <__sfvwrite_r+0x5e>
  401920:	230c      	movs	r3, #12
  401922:	f8c9 3000 	str.w	r3, [r9]
  401926:	89a3      	ldrh	r3, [r4, #12]
  401928:	e6f4      	b.n	401714 <__sfvwrite_r+0xfc>
  40192a:	bf00      	nop
  40192c:	7ffffc00 	.word	0x7ffffc00

00401930 <_fwalk>:
  401930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401934:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401938:	4688      	mov	r8, r1
  40193a:	d01a      	beq.n	401972 <_fwalk+0x42>
  40193c:	2600      	movs	r6, #0
  40193e:	687d      	ldr	r5, [r7, #4]
  401940:	68bc      	ldr	r4, [r7, #8]
  401942:	3d01      	subs	r5, #1
  401944:	d40f      	bmi.n	401966 <_fwalk+0x36>
  401946:	89a3      	ldrh	r3, [r4, #12]
  401948:	2b01      	cmp	r3, #1
  40194a:	f105 35ff 	add.w	r5, r5, #4294967295
  40194e:	d906      	bls.n	40195e <_fwalk+0x2e>
  401950:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401954:	3301      	adds	r3, #1
  401956:	4620      	mov	r0, r4
  401958:	d001      	beq.n	40195e <_fwalk+0x2e>
  40195a:	47c0      	blx	r8
  40195c:	4306      	orrs	r6, r0
  40195e:	1c6b      	adds	r3, r5, #1
  401960:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401964:	d1ef      	bne.n	401946 <_fwalk+0x16>
  401966:	683f      	ldr	r7, [r7, #0]
  401968:	2f00      	cmp	r7, #0
  40196a:	d1e8      	bne.n	40193e <_fwalk+0xe>
  40196c:	4630      	mov	r0, r6
  40196e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401972:	463e      	mov	r6, r7
  401974:	4630      	mov	r0, r6
  401976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40197a:	bf00      	nop

0040197c <_fwalk_reent>:
  40197c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401980:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
  401984:	4680      	mov	r8, r0
  401986:	4689      	mov	r9, r1
  401988:	d01b      	beq.n	4019c2 <_fwalk_reent+0x46>
  40198a:	2700      	movs	r7, #0
  40198c:	6875      	ldr	r5, [r6, #4]
  40198e:	68b4      	ldr	r4, [r6, #8]
  401990:	3d01      	subs	r5, #1
  401992:	d410      	bmi.n	4019b6 <_fwalk_reent+0x3a>
  401994:	89a3      	ldrh	r3, [r4, #12]
  401996:	2b01      	cmp	r3, #1
  401998:	f105 35ff 	add.w	r5, r5, #4294967295
  40199c:	d907      	bls.n	4019ae <_fwalk_reent+0x32>
  40199e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4019a2:	3301      	adds	r3, #1
  4019a4:	4621      	mov	r1, r4
  4019a6:	4640      	mov	r0, r8
  4019a8:	d001      	beq.n	4019ae <_fwalk_reent+0x32>
  4019aa:	47c8      	blx	r9
  4019ac:	4307      	orrs	r7, r0
  4019ae:	1c6b      	adds	r3, r5, #1
  4019b0:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4019b4:	d1ee      	bne.n	401994 <_fwalk_reent+0x18>
  4019b6:	6836      	ldr	r6, [r6, #0]
  4019b8:	2e00      	cmp	r6, #0
  4019ba:	d1e7      	bne.n	40198c <_fwalk_reent+0x10>
  4019bc:	4638      	mov	r0, r7
  4019be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4019c2:	4637      	mov	r7, r6
  4019c4:	4638      	mov	r0, r7
  4019c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4019ca:	bf00      	nop

004019cc <__smakebuf_r>:
  4019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4019ce:	898b      	ldrh	r3, [r1, #12]
  4019d0:	b29a      	uxth	r2, r3
  4019d2:	0796      	lsls	r6, r2, #30
  4019d4:	b091      	sub	sp, #68	; 0x44
  4019d6:	460c      	mov	r4, r1
  4019d8:	4605      	mov	r5, r0
  4019da:	d437      	bmi.n	401a4c <__smakebuf_r+0x80>
  4019dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4019e0:	2900      	cmp	r1, #0
  4019e2:	db17      	blt.n	401a14 <__smakebuf_r+0x48>
  4019e4:	aa01      	add	r2, sp, #4
  4019e6:	f000 ffdb 	bl	4029a0 <_fstat_r>
  4019ea:	2800      	cmp	r0, #0
  4019ec:	db10      	blt.n	401a10 <__smakebuf_r+0x44>
  4019ee:	9b02      	ldr	r3, [sp, #8]
  4019f0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  4019f4:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
  4019f8:	424f      	negs	r7, r1
  4019fa:	414f      	adcs	r7, r1
  4019fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  401a00:	d02c      	beq.n	401a5c <__smakebuf_r+0x90>
  401a02:	89a3      	ldrh	r3, [r4, #12]
  401a04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401a08:	81a3      	strh	r3, [r4, #12]
  401a0a:	f44f 6680 	mov.w	r6, #1024	; 0x400
  401a0e:	e00b      	b.n	401a28 <__smakebuf_r+0x5c>
  401a10:	89a3      	ldrh	r3, [r4, #12]
  401a12:	b29a      	uxth	r2, r3
  401a14:	f012 0f80 	tst.w	r2, #128	; 0x80
  401a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401a1c:	81a3      	strh	r3, [r4, #12]
  401a1e:	bf14      	ite	ne
  401a20:	2640      	movne	r6, #64	; 0x40
  401a22:	f44f 6680 	moveq.w	r6, #1024	; 0x400
  401a26:	2700      	movs	r7, #0
  401a28:	4628      	mov	r0, r5
  401a2a:	4631      	mov	r1, r6
  401a2c:	f000 f846 	bl	401abc <_malloc_r>
  401a30:	89a3      	ldrh	r3, [r4, #12]
  401a32:	2800      	cmp	r0, #0
  401a34:	d029      	beq.n	401a8a <__smakebuf_r+0xbe>
  401a36:	4a1b      	ldr	r2, [pc, #108]	; (401aa4 <__smakebuf_r+0xd8>)
  401a38:	63ea      	str	r2, [r5, #60]	; 0x3c
  401a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401a3e:	81a3      	strh	r3, [r4, #12]
  401a40:	6020      	str	r0, [r4, #0]
  401a42:	6120      	str	r0, [r4, #16]
  401a44:	6166      	str	r6, [r4, #20]
  401a46:	b9a7      	cbnz	r7, 401a72 <__smakebuf_r+0xa6>
  401a48:	b011      	add	sp, #68	; 0x44
  401a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401a4c:	f101 0343 	add.w	r3, r1, #67	; 0x43
  401a50:	2201      	movs	r2, #1
  401a52:	600b      	str	r3, [r1, #0]
  401a54:	610b      	str	r3, [r1, #16]
  401a56:	614a      	str	r2, [r1, #20]
  401a58:	b011      	add	sp, #68	; 0x44
  401a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401a5c:	4a12      	ldr	r2, [pc, #72]	; (401aa8 <__smakebuf_r+0xdc>)
  401a5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  401a60:	4293      	cmp	r3, r2
  401a62:	d1ce      	bne.n	401a02 <__smakebuf_r+0x36>
  401a64:	89a3      	ldrh	r3, [r4, #12]
  401a66:	f44f 6680 	mov.w	r6, #1024	; 0x400
  401a6a:	4333      	orrs	r3, r6
  401a6c:	81a3      	strh	r3, [r4, #12]
  401a6e:	64e6      	str	r6, [r4, #76]	; 0x4c
  401a70:	e7da      	b.n	401a28 <__smakebuf_r+0x5c>
  401a72:	4628      	mov	r0, r5
  401a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401a78:	f000 ffa6 	bl	4029c8 <_isatty_r>
  401a7c:	2800      	cmp	r0, #0
  401a7e:	d0e3      	beq.n	401a48 <__smakebuf_r+0x7c>
  401a80:	89a3      	ldrh	r3, [r4, #12]
  401a82:	f043 0301 	orr.w	r3, r3, #1
  401a86:	81a3      	strh	r3, [r4, #12]
  401a88:	e7de      	b.n	401a48 <__smakebuf_r+0x7c>
  401a8a:	059a      	lsls	r2, r3, #22
  401a8c:	d4dc      	bmi.n	401a48 <__smakebuf_r+0x7c>
  401a8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401a92:	f043 0302 	orr.w	r3, r3, #2
  401a96:	2101      	movs	r1, #1
  401a98:	81a3      	strh	r3, [r4, #12]
  401a9a:	6022      	str	r2, [r4, #0]
  401a9c:	6122      	str	r2, [r4, #16]
  401a9e:	6161      	str	r1, [r4, #20]
  401aa0:	e7d2      	b.n	401a48 <__smakebuf_r+0x7c>
  401aa2:	bf00      	nop
  401aa4:	004012a9 	.word	0x004012a9
  401aa8:	004027f5 	.word	0x004027f5

00401aac <malloc>:
  401aac:	4b02      	ldr	r3, [pc, #8]	; (401ab8 <malloc+0xc>)
  401aae:	4601      	mov	r1, r0
  401ab0:	6818      	ldr	r0, [r3, #0]
  401ab2:	f000 b803 	b.w	401abc <_malloc_r>
  401ab6:	bf00      	nop
  401ab8:	20000430 	.word	0x20000430

00401abc <_malloc_r>:
  401abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ac0:	f101 050b 	add.w	r5, r1, #11
  401ac4:	2d16      	cmp	r5, #22
  401ac6:	b083      	sub	sp, #12
  401ac8:	4606      	mov	r6, r0
  401aca:	d927      	bls.n	401b1c <_malloc_r+0x60>
  401acc:	f035 0507 	bics.w	r5, r5, #7
  401ad0:	d427      	bmi.n	401b22 <_malloc_r+0x66>
  401ad2:	42a9      	cmp	r1, r5
  401ad4:	d825      	bhi.n	401b22 <_malloc_r+0x66>
  401ad6:	4630      	mov	r0, r6
  401ad8:	f000 fbce 	bl	402278 <__malloc_lock>
  401adc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  401ae0:	d226      	bcs.n	401b30 <_malloc_r+0x74>
  401ae2:	4fc1      	ldr	r7, [pc, #772]	; (401de8 <_malloc_r+0x32c>)
  401ae4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  401ae8:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  401aec:	68dc      	ldr	r4, [r3, #12]
  401aee:	429c      	cmp	r4, r3
  401af0:	f000 81d2 	beq.w	401e98 <_malloc_r+0x3dc>
  401af4:	6863      	ldr	r3, [r4, #4]
  401af6:	68e2      	ldr	r2, [r4, #12]
  401af8:	68a1      	ldr	r1, [r4, #8]
  401afa:	f023 0303 	bic.w	r3, r3, #3
  401afe:	4423      	add	r3, r4
  401b00:	4630      	mov	r0, r6
  401b02:	685d      	ldr	r5, [r3, #4]
  401b04:	60ca      	str	r2, [r1, #12]
  401b06:	f045 0501 	orr.w	r5, r5, #1
  401b0a:	6091      	str	r1, [r2, #8]
  401b0c:	605d      	str	r5, [r3, #4]
  401b0e:	f000 fbb5 	bl	40227c <__malloc_unlock>
  401b12:	3408      	adds	r4, #8
  401b14:	4620      	mov	r0, r4
  401b16:	b003      	add	sp, #12
  401b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b1c:	2510      	movs	r5, #16
  401b1e:	42a9      	cmp	r1, r5
  401b20:	d9d9      	bls.n	401ad6 <_malloc_r+0x1a>
  401b22:	2400      	movs	r4, #0
  401b24:	230c      	movs	r3, #12
  401b26:	4620      	mov	r0, r4
  401b28:	6033      	str	r3, [r6, #0]
  401b2a:	b003      	add	sp, #12
  401b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b30:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  401b34:	f000 808a 	beq.w	401c4c <_malloc_r+0x190>
  401b38:	f1bc 0f04 	cmp.w	ip, #4
  401b3c:	f200 8160 	bhi.w	401e00 <_malloc_r+0x344>
  401b40:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  401b44:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  401b48:	ea4f 014c 	mov.w	r1, ip, lsl #1
  401b4c:	4fa6      	ldr	r7, [pc, #664]	; (401de8 <_malloc_r+0x32c>)
  401b4e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  401b52:	68cc      	ldr	r4, [r1, #12]
  401b54:	42a1      	cmp	r1, r4
  401b56:	d105      	bne.n	401b64 <_malloc_r+0xa8>
  401b58:	e00c      	b.n	401b74 <_malloc_r+0xb8>
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	da7a      	bge.n	401c54 <_malloc_r+0x198>
  401b5e:	68e4      	ldr	r4, [r4, #12]
  401b60:	42a1      	cmp	r1, r4
  401b62:	d007      	beq.n	401b74 <_malloc_r+0xb8>
  401b64:	6862      	ldr	r2, [r4, #4]
  401b66:	f022 0203 	bic.w	r2, r2, #3
  401b6a:	1b53      	subs	r3, r2, r5
  401b6c:	2b0f      	cmp	r3, #15
  401b6e:	ddf4      	ble.n	401b5a <_malloc_r+0x9e>
  401b70:	f10c 3cff 	add.w	ip, ip, #4294967295
  401b74:	f10c 0c01 	add.w	ip, ip, #1
  401b78:	4b9b      	ldr	r3, [pc, #620]	; (401de8 <_malloc_r+0x32c>)
  401b7a:	693c      	ldr	r4, [r7, #16]
  401b7c:	f103 0e08 	add.w	lr, r3, #8
  401b80:	4574      	cmp	r4, lr
  401b82:	f000 817e 	beq.w	401e82 <_malloc_r+0x3c6>
  401b86:	6861      	ldr	r1, [r4, #4]
  401b88:	f021 0103 	bic.w	r1, r1, #3
  401b8c:	1b4a      	subs	r2, r1, r5
  401b8e:	2a0f      	cmp	r2, #15
  401b90:	f300 8164 	bgt.w	401e5c <_malloc_r+0x3a0>
  401b94:	2a00      	cmp	r2, #0
  401b96:	f8c3 e014 	str.w	lr, [r3, #20]
  401b9a:	f8c3 e010 	str.w	lr, [r3, #16]
  401b9e:	da6a      	bge.n	401c76 <_malloc_r+0x1ba>
  401ba0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  401ba4:	f080 813a 	bcs.w	401e1c <_malloc_r+0x360>
  401ba8:	08c9      	lsrs	r1, r1, #3
  401baa:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
  401bae:	ea4f 08a1 	mov.w	r8, r1, asr #2
  401bb2:	685a      	ldr	r2, [r3, #4]
  401bb4:	6881      	ldr	r1, [r0, #8]
  401bb6:	60a1      	str	r1, [r4, #8]
  401bb8:	f04f 0901 	mov.w	r9, #1
  401bbc:	fa09 f808 	lsl.w	r8, r9, r8
  401bc0:	ea48 0202 	orr.w	r2, r8, r2
  401bc4:	60e0      	str	r0, [r4, #12]
  401bc6:	605a      	str	r2, [r3, #4]
  401bc8:	6084      	str	r4, [r0, #8]
  401bca:	60cc      	str	r4, [r1, #12]
  401bcc:	ea4f 03ac 	mov.w	r3, ip, asr #2
  401bd0:	2001      	movs	r0, #1
  401bd2:	4098      	lsls	r0, r3
  401bd4:	4290      	cmp	r0, r2
  401bd6:	d85b      	bhi.n	401c90 <_malloc_r+0x1d4>
  401bd8:	4202      	tst	r2, r0
  401bda:	d106      	bne.n	401bea <_malloc_r+0x12e>
  401bdc:	f02c 0c03 	bic.w	ip, ip, #3
  401be0:	0040      	lsls	r0, r0, #1
  401be2:	4202      	tst	r2, r0
  401be4:	f10c 0c04 	add.w	ip, ip, #4
  401be8:	d0fa      	beq.n	401be0 <_malloc_r+0x124>
  401bea:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  401bee:	4644      	mov	r4, r8
  401bf0:	46e1      	mov	r9, ip
  401bf2:	68e3      	ldr	r3, [r4, #12]
  401bf4:	429c      	cmp	r4, r3
  401bf6:	d107      	bne.n	401c08 <_malloc_r+0x14c>
  401bf8:	e145      	b.n	401e86 <_malloc_r+0x3ca>
  401bfa:	2a00      	cmp	r2, #0
  401bfc:	f280 8156 	bge.w	401eac <_malloc_r+0x3f0>
  401c00:	68db      	ldr	r3, [r3, #12]
  401c02:	429c      	cmp	r4, r3
  401c04:	f000 813f 	beq.w	401e86 <_malloc_r+0x3ca>
  401c08:	6859      	ldr	r1, [r3, #4]
  401c0a:	f021 0103 	bic.w	r1, r1, #3
  401c0e:	1b4a      	subs	r2, r1, r5
  401c10:	2a0f      	cmp	r2, #15
  401c12:	ddf2      	ble.n	401bfa <_malloc_r+0x13e>
  401c14:	461c      	mov	r4, r3
  401c16:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401c1a:	f854 8f08 	ldr.w	r8, [r4, #8]!
  401c1e:	1959      	adds	r1, r3, r5
  401c20:	f045 0901 	orr.w	r9, r5, #1
  401c24:	f042 0501 	orr.w	r5, r2, #1
  401c28:	f8c3 9004 	str.w	r9, [r3, #4]
  401c2c:	4630      	mov	r0, r6
  401c2e:	f8c8 c00c 	str.w	ip, [r8, #12]
  401c32:	f8cc 8008 	str.w	r8, [ip, #8]
  401c36:	6179      	str	r1, [r7, #20]
  401c38:	6139      	str	r1, [r7, #16]
  401c3a:	f8c1 e00c 	str.w	lr, [r1, #12]
  401c3e:	f8c1 e008 	str.w	lr, [r1, #8]
  401c42:	604d      	str	r5, [r1, #4]
  401c44:	508a      	str	r2, [r1, r2]
  401c46:	f000 fb19 	bl	40227c <__malloc_unlock>
  401c4a:	e763      	b.n	401b14 <_malloc_r+0x58>
  401c4c:	217e      	movs	r1, #126	; 0x7e
  401c4e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  401c52:	e77b      	b.n	401b4c <_malloc_r+0x90>
  401c54:	4422      	add	r2, r4
  401c56:	68e3      	ldr	r3, [r4, #12]
  401c58:	6850      	ldr	r0, [r2, #4]
  401c5a:	68a1      	ldr	r1, [r4, #8]
  401c5c:	f040 0501 	orr.w	r5, r0, #1
  401c60:	60cb      	str	r3, [r1, #12]
  401c62:	4630      	mov	r0, r6
  401c64:	6099      	str	r1, [r3, #8]
  401c66:	6055      	str	r5, [r2, #4]
  401c68:	f000 fb08 	bl	40227c <__malloc_unlock>
  401c6c:	3408      	adds	r4, #8
  401c6e:	4620      	mov	r0, r4
  401c70:	b003      	add	sp, #12
  401c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c76:	4421      	add	r1, r4
  401c78:	4630      	mov	r0, r6
  401c7a:	684b      	ldr	r3, [r1, #4]
  401c7c:	f043 0301 	orr.w	r3, r3, #1
  401c80:	604b      	str	r3, [r1, #4]
  401c82:	f000 fafb 	bl	40227c <__malloc_unlock>
  401c86:	3408      	adds	r4, #8
  401c88:	4620      	mov	r0, r4
  401c8a:	b003      	add	sp, #12
  401c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c90:	68bc      	ldr	r4, [r7, #8]
  401c92:	6863      	ldr	r3, [r4, #4]
  401c94:	f023 0903 	bic.w	r9, r3, #3
  401c98:	45a9      	cmp	r9, r5
  401c9a:	d304      	bcc.n	401ca6 <_malloc_r+0x1ea>
  401c9c:	ebc5 0309 	rsb	r3, r5, r9
  401ca0:	2b0f      	cmp	r3, #15
  401ca2:	f300 8091 	bgt.w	401dc8 <_malloc_r+0x30c>
  401ca6:	4b51      	ldr	r3, [pc, #324]	; (401dec <_malloc_r+0x330>)
  401ca8:	4a51      	ldr	r2, [pc, #324]	; (401df0 <_malloc_r+0x334>)
  401caa:	6819      	ldr	r1, [r3, #0]
  401cac:	6813      	ldr	r3, [r2, #0]
  401cae:	3301      	adds	r3, #1
  401cb0:	eb05 0a01 	add.w	sl, r5, r1
  401cb4:	eb04 0b09 	add.w	fp, r4, r9
  401cb8:	f000 8161 	beq.w	401f7e <_malloc_r+0x4c2>
  401cbc:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  401cc0:	f10a 0a0f 	add.w	sl, sl, #15
  401cc4:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  401cc8:	f02a 0a0f 	bic.w	sl, sl, #15
  401ccc:	4630      	mov	r0, r6
  401cce:	4651      	mov	r1, sl
  401cd0:	9201      	str	r2, [sp, #4]
  401cd2:	f000 fd4f 	bl	402774 <_sbrk_r>
  401cd6:	f1b0 3fff 	cmp.w	r0, #4294967295
  401cda:	4680      	mov	r8, r0
  401cdc:	9a01      	ldr	r2, [sp, #4]
  401cde:	f000 8100 	beq.w	401ee2 <_malloc_r+0x426>
  401ce2:	4583      	cmp	fp, r0
  401ce4:	f200 80fa 	bhi.w	401edc <_malloc_r+0x420>
  401ce8:	f8df c110 	ldr.w	ip, [pc, #272]	; 401dfc <_malloc_r+0x340>
  401cec:	f8dc 3000 	ldr.w	r3, [ip]
  401cf0:	45c3      	cmp	fp, r8
  401cf2:	4453      	add	r3, sl
  401cf4:	f8cc 3000 	str.w	r3, [ip]
  401cf8:	f000 814a 	beq.w	401f90 <_malloc_r+0x4d4>
  401cfc:	6812      	ldr	r2, [r2, #0]
  401cfe:	493c      	ldr	r1, [pc, #240]	; (401df0 <_malloc_r+0x334>)
  401d00:	3201      	adds	r2, #1
  401d02:	bf1b      	ittet	ne
  401d04:	ebcb 0b08 	rsbne	fp, fp, r8
  401d08:	445b      	addne	r3, fp
  401d0a:	f8c1 8000 	streq.w	r8, [r1]
  401d0e:	f8cc 3000 	strne.w	r3, [ip]
  401d12:	f018 0307 	ands.w	r3, r8, #7
  401d16:	f000 8113 	beq.w	401f40 <_malloc_r+0x484>
  401d1a:	f1c3 0208 	rsb	r2, r3, #8
  401d1e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  401d22:	4490      	add	r8, r2
  401d24:	3308      	adds	r3, #8
  401d26:	44c2      	add	sl, r8
  401d28:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  401d2c:	ebca 0a03 	rsb	sl, sl, r3
  401d30:	4651      	mov	r1, sl
  401d32:	4630      	mov	r0, r6
  401d34:	f8cd c004 	str.w	ip, [sp, #4]
  401d38:	f000 fd1c 	bl	402774 <_sbrk_r>
  401d3c:	1c43      	adds	r3, r0, #1
  401d3e:	f8dd c004 	ldr.w	ip, [sp, #4]
  401d42:	f000 8135 	beq.w	401fb0 <_malloc_r+0x4f4>
  401d46:	ebc8 0200 	rsb	r2, r8, r0
  401d4a:	4452      	add	r2, sl
  401d4c:	f042 0201 	orr.w	r2, r2, #1
  401d50:	f8dc 3000 	ldr.w	r3, [ip]
  401d54:	f8c7 8008 	str.w	r8, [r7, #8]
  401d58:	4453      	add	r3, sl
  401d5a:	42bc      	cmp	r4, r7
  401d5c:	f8c8 2004 	str.w	r2, [r8, #4]
  401d60:	f8cc 3000 	str.w	r3, [ip]
  401d64:	f8df a094 	ldr.w	sl, [pc, #148]	; 401dfc <_malloc_r+0x340>
  401d68:	d015      	beq.n	401d96 <_malloc_r+0x2da>
  401d6a:	f1b9 0f0f 	cmp.w	r9, #15
  401d6e:	f240 80ea 	bls.w	401f46 <_malloc_r+0x48a>
  401d72:	6861      	ldr	r1, [r4, #4]
  401d74:	f1a9 020c 	sub.w	r2, r9, #12
  401d78:	f022 0207 	bic.w	r2, r2, #7
  401d7c:	f001 0e01 	and.w	lr, r1, #1
  401d80:	18a1      	adds	r1, r4, r2
  401d82:	2005      	movs	r0, #5
  401d84:	ea42 0e0e 	orr.w	lr, r2, lr
  401d88:	2a0f      	cmp	r2, #15
  401d8a:	f8c4 e004 	str.w	lr, [r4, #4]
  401d8e:	6048      	str	r0, [r1, #4]
  401d90:	6088      	str	r0, [r1, #8]
  401d92:	f200 8111 	bhi.w	401fb8 <_malloc_r+0x4fc>
  401d96:	4a17      	ldr	r2, [pc, #92]	; (401df4 <_malloc_r+0x338>)
  401d98:	68bc      	ldr	r4, [r7, #8]
  401d9a:	6811      	ldr	r1, [r2, #0]
  401d9c:	428b      	cmp	r3, r1
  401d9e:	bf88      	it	hi
  401da0:	6013      	strhi	r3, [r2, #0]
  401da2:	4a15      	ldr	r2, [pc, #84]	; (401df8 <_malloc_r+0x33c>)
  401da4:	6811      	ldr	r1, [r2, #0]
  401da6:	428b      	cmp	r3, r1
  401da8:	bf88      	it	hi
  401daa:	6013      	strhi	r3, [r2, #0]
  401dac:	6862      	ldr	r2, [r4, #4]
  401dae:	f022 0203 	bic.w	r2, r2, #3
  401db2:	4295      	cmp	r5, r2
  401db4:	ebc5 0302 	rsb	r3, r5, r2
  401db8:	d801      	bhi.n	401dbe <_malloc_r+0x302>
  401dba:	2b0f      	cmp	r3, #15
  401dbc:	dc04      	bgt.n	401dc8 <_malloc_r+0x30c>
  401dbe:	4630      	mov	r0, r6
  401dc0:	f000 fa5c 	bl	40227c <__malloc_unlock>
  401dc4:	2400      	movs	r4, #0
  401dc6:	e6a5      	b.n	401b14 <_malloc_r+0x58>
  401dc8:	1962      	adds	r2, r4, r5
  401dca:	f043 0301 	orr.w	r3, r3, #1
  401dce:	f045 0501 	orr.w	r5, r5, #1
  401dd2:	6065      	str	r5, [r4, #4]
  401dd4:	4630      	mov	r0, r6
  401dd6:	60ba      	str	r2, [r7, #8]
  401dd8:	6053      	str	r3, [r2, #4]
  401dda:	f000 fa4f 	bl	40227c <__malloc_unlock>
  401dde:	3408      	adds	r4, #8
  401de0:	4620      	mov	r0, r4
  401de2:	b003      	add	sp, #12
  401de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401de8:	20000434 	.word	0x20000434
  401dec:	200008e0 	.word	0x200008e0
  401df0:	20000840 	.word	0x20000840
  401df4:	200008dc 	.word	0x200008dc
  401df8:	200008d8 	.word	0x200008d8
  401dfc:	200008e4 	.word	0x200008e4
  401e00:	f1bc 0f14 	cmp.w	ip, #20
  401e04:	d961      	bls.n	401eca <_malloc_r+0x40e>
  401e06:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  401e0a:	f200 808f 	bhi.w	401f2c <_malloc_r+0x470>
  401e0e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  401e12:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  401e16:	ea4f 014c 	mov.w	r1, ip, lsl #1
  401e1a:	e697      	b.n	401b4c <_malloc_r+0x90>
  401e1c:	0a4b      	lsrs	r3, r1, #9
  401e1e:	2b04      	cmp	r3, #4
  401e20:	d958      	bls.n	401ed4 <_malloc_r+0x418>
  401e22:	2b14      	cmp	r3, #20
  401e24:	f200 80ae 	bhi.w	401f84 <_malloc_r+0x4c8>
  401e28:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  401e2c:	0050      	lsls	r0, r2, #1
  401e2e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  401e32:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 401ff0 <_malloc_r+0x534>
  401e36:	6883      	ldr	r3, [r0, #8]
  401e38:	4283      	cmp	r3, r0
  401e3a:	f000 808a 	beq.w	401f52 <_malloc_r+0x496>
  401e3e:	685a      	ldr	r2, [r3, #4]
  401e40:	f022 0203 	bic.w	r2, r2, #3
  401e44:	4291      	cmp	r1, r2
  401e46:	d202      	bcs.n	401e4e <_malloc_r+0x392>
  401e48:	689b      	ldr	r3, [r3, #8]
  401e4a:	4298      	cmp	r0, r3
  401e4c:	d1f7      	bne.n	401e3e <_malloc_r+0x382>
  401e4e:	68d9      	ldr	r1, [r3, #12]
  401e50:	687a      	ldr	r2, [r7, #4]
  401e52:	60e1      	str	r1, [r4, #12]
  401e54:	60a3      	str	r3, [r4, #8]
  401e56:	608c      	str	r4, [r1, #8]
  401e58:	60dc      	str	r4, [r3, #12]
  401e5a:	e6b7      	b.n	401bcc <_malloc_r+0x110>
  401e5c:	1961      	adds	r1, r4, r5
  401e5e:	f042 0701 	orr.w	r7, r2, #1
  401e62:	f045 0501 	orr.w	r5, r5, #1
  401e66:	6065      	str	r5, [r4, #4]
  401e68:	4630      	mov	r0, r6
  401e6a:	6159      	str	r1, [r3, #20]
  401e6c:	6119      	str	r1, [r3, #16]
  401e6e:	f8c1 e00c 	str.w	lr, [r1, #12]
  401e72:	f8c1 e008 	str.w	lr, [r1, #8]
  401e76:	604f      	str	r7, [r1, #4]
  401e78:	508a      	str	r2, [r1, r2]
  401e7a:	3408      	adds	r4, #8
  401e7c:	f000 f9fe 	bl	40227c <__malloc_unlock>
  401e80:	e648      	b.n	401b14 <_malloc_r+0x58>
  401e82:	685a      	ldr	r2, [r3, #4]
  401e84:	e6a2      	b.n	401bcc <_malloc_r+0x110>
  401e86:	f109 0901 	add.w	r9, r9, #1
  401e8a:	f019 0f03 	tst.w	r9, #3
  401e8e:	f104 0408 	add.w	r4, r4, #8
  401e92:	f47f aeae 	bne.w	401bf2 <_malloc_r+0x136>
  401e96:	e02d      	b.n	401ef4 <_malloc_r+0x438>
  401e98:	f104 0308 	add.w	r3, r4, #8
  401e9c:	6964      	ldr	r4, [r4, #20]
  401e9e:	42a3      	cmp	r3, r4
  401ea0:	bf08      	it	eq
  401ea2:	f10c 0c02 	addeq.w	ip, ip, #2
  401ea6:	f43f ae67 	beq.w	401b78 <_malloc_r+0xbc>
  401eaa:	e623      	b.n	401af4 <_malloc_r+0x38>
  401eac:	4419      	add	r1, r3
  401eae:	461c      	mov	r4, r3
  401eb0:	6848      	ldr	r0, [r1, #4]
  401eb2:	68db      	ldr	r3, [r3, #12]
  401eb4:	f854 2f08 	ldr.w	r2, [r4, #8]!
  401eb8:	f040 0501 	orr.w	r5, r0, #1
  401ebc:	604d      	str	r5, [r1, #4]
  401ebe:	4630      	mov	r0, r6
  401ec0:	60d3      	str	r3, [r2, #12]
  401ec2:	609a      	str	r2, [r3, #8]
  401ec4:	f000 f9da 	bl	40227c <__malloc_unlock>
  401ec8:	e624      	b.n	401b14 <_malloc_r+0x58>
  401eca:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  401ece:	ea4f 014c 	mov.w	r1, ip, lsl #1
  401ed2:	e63b      	b.n	401b4c <_malloc_r+0x90>
  401ed4:	098a      	lsrs	r2, r1, #6
  401ed6:	3238      	adds	r2, #56	; 0x38
  401ed8:	0050      	lsls	r0, r2, #1
  401eda:	e7a8      	b.n	401e2e <_malloc_r+0x372>
  401edc:	42bc      	cmp	r4, r7
  401ede:	f43f af03 	beq.w	401ce8 <_malloc_r+0x22c>
  401ee2:	68bc      	ldr	r4, [r7, #8]
  401ee4:	6862      	ldr	r2, [r4, #4]
  401ee6:	f022 0203 	bic.w	r2, r2, #3
  401eea:	e762      	b.n	401db2 <_malloc_r+0x2f6>
  401eec:	f8d8 8000 	ldr.w	r8, [r8]
  401ef0:	4598      	cmp	r8, r3
  401ef2:	d17b      	bne.n	401fec <_malloc_r+0x530>
  401ef4:	f01c 0f03 	tst.w	ip, #3
  401ef8:	f1a8 0308 	sub.w	r3, r8, #8
  401efc:	f10c 3cff 	add.w	ip, ip, #4294967295
  401f00:	d1f4      	bne.n	401eec <_malloc_r+0x430>
  401f02:	687b      	ldr	r3, [r7, #4]
  401f04:	ea23 0300 	bic.w	r3, r3, r0
  401f08:	607b      	str	r3, [r7, #4]
  401f0a:	0040      	lsls	r0, r0, #1
  401f0c:	4298      	cmp	r0, r3
  401f0e:	f63f aebf 	bhi.w	401c90 <_malloc_r+0x1d4>
  401f12:	2800      	cmp	r0, #0
  401f14:	f43f aebc 	beq.w	401c90 <_malloc_r+0x1d4>
  401f18:	4203      	tst	r3, r0
  401f1a:	46cc      	mov	ip, r9
  401f1c:	f47f ae65 	bne.w	401bea <_malloc_r+0x12e>
  401f20:	0040      	lsls	r0, r0, #1
  401f22:	4203      	tst	r3, r0
  401f24:	f10c 0c04 	add.w	ip, ip, #4
  401f28:	d0fa      	beq.n	401f20 <_malloc_r+0x464>
  401f2a:	e65e      	b.n	401bea <_malloc_r+0x12e>
  401f2c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  401f30:	d81a      	bhi.n	401f68 <_malloc_r+0x4ac>
  401f32:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  401f36:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  401f3a:	ea4f 014c 	mov.w	r1, ip, lsl #1
  401f3e:	e605      	b.n	401b4c <_malloc_r+0x90>
  401f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401f44:	e6ef      	b.n	401d26 <_malloc_r+0x26a>
  401f46:	2301      	movs	r3, #1
  401f48:	f8c8 3004 	str.w	r3, [r8, #4]
  401f4c:	4644      	mov	r4, r8
  401f4e:	2200      	movs	r2, #0
  401f50:	e72f      	b.n	401db2 <_malloc_r+0x2f6>
  401f52:	1091      	asrs	r1, r2, #2
  401f54:	2001      	movs	r0, #1
  401f56:	f8d8 2004 	ldr.w	r2, [r8, #4]
  401f5a:	fa00 f101 	lsl.w	r1, r0, r1
  401f5e:	430a      	orrs	r2, r1
  401f60:	f8c8 2004 	str.w	r2, [r8, #4]
  401f64:	4619      	mov	r1, r3
  401f66:	e774      	b.n	401e52 <_malloc_r+0x396>
  401f68:	f240 5354 	movw	r3, #1364	; 0x554
  401f6c:	459c      	cmp	ip, r3
  401f6e:	d81b      	bhi.n	401fa8 <_malloc_r+0x4ec>
  401f70:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  401f74:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  401f78:	ea4f 014c 	mov.w	r1, ip, lsl #1
  401f7c:	e5e6      	b.n	401b4c <_malloc_r+0x90>
  401f7e:	f10a 0a10 	add.w	sl, sl, #16
  401f82:	e6a3      	b.n	401ccc <_malloc_r+0x210>
  401f84:	2b54      	cmp	r3, #84	; 0x54
  401f86:	d81f      	bhi.n	401fc8 <_malloc_r+0x50c>
  401f88:	0b0a      	lsrs	r2, r1, #12
  401f8a:	326e      	adds	r2, #110	; 0x6e
  401f8c:	0050      	lsls	r0, r2, #1
  401f8e:	e74e      	b.n	401e2e <_malloc_r+0x372>
  401f90:	f3cb 010b 	ubfx	r1, fp, #0, #12
  401f94:	2900      	cmp	r1, #0
  401f96:	f47f aeb1 	bne.w	401cfc <_malloc_r+0x240>
  401f9a:	eb0a 0109 	add.w	r1, sl, r9
  401f9e:	68ba      	ldr	r2, [r7, #8]
  401fa0:	f041 0101 	orr.w	r1, r1, #1
  401fa4:	6051      	str	r1, [r2, #4]
  401fa6:	e6f6      	b.n	401d96 <_malloc_r+0x2da>
  401fa8:	21fc      	movs	r1, #252	; 0xfc
  401faa:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  401fae:	e5cd      	b.n	401b4c <_malloc_r+0x90>
  401fb0:	2201      	movs	r2, #1
  401fb2:	f04f 0a00 	mov.w	sl, #0
  401fb6:	e6cb      	b.n	401d50 <_malloc_r+0x294>
  401fb8:	f104 0108 	add.w	r1, r4, #8
  401fbc:	4630      	mov	r0, r6
  401fbe:	f7ff fa5d 	bl	40147c <_free_r>
  401fc2:	f8da 3000 	ldr.w	r3, [sl]
  401fc6:	e6e6      	b.n	401d96 <_malloc_r+0x2da>
  401fc8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  401fcc:	d803      	bhi.n	401fd6 <_malloc_r+0x51a>
  401fce:	0bca      	lsrs	r2, r1, #15
  401fd0:	3277      	adds	r2, #119	; 0x77
  401fd2:	0050      	lsls	r0, r2, #1
  401fd4:	e72b      	b.n	401e2e <_malloc_r+0x372>
  401fd6:	f240 5254 	movw	r2, #1364	; 0x554
  401fda:	4293      	cmp	r3, r2
  401fdc:	d803      	bhi.n	401fe6 <_malloc_r+0x52a>
  401fde:	0c8a      	lsrs	r2, r1, #18
  401fe0:	327c      	adds	r2, #124	; 0x7c
  401fe2:	0050      	lsls	r0, r2, #1
  401fe4:	e723      	b.n	401e2e <_malloc_r+0x372>
  401fe6:	20fc      	movs	r0, #252	; 0xfc
  401fe8:	227e      	movs	r2, #126	; 0x7e
  401fea:	e720      	b.n	401e2e <_malloc_r+0x372>
  401fec:	687b      	ldr	r3, [r7, #4]
  401fee:	e78c      	b.n	401f0a <_malloc_r+0x44e>
  401ff0:	20000434 	.word	0x20000434

00401ff4 <memchr>:
  401ff4:	0783      	lsls	r3, r0, #30
  401ff6:	b470      	push	{r4, r5, r6}
  401ff8:	b2c9      	uxtb	r1, r1
  401ffa:	d03f      	beq.n	40207c <memchr+0x88>
  401ffc:	1e54      	subs	r4, r2, #1
  401ffe:	b32a      	cbz	r2, 40204c <memchr+0x58>
  402000:	7803      	ldrb	r3, [r0, #0]
  402002:	428b      	cmp	r3, r1
  402004:	d023      	beq.n	40204e <memchr+0x5a>
  402006:	1c43      	adds	r3, r0, #1
  402008:	e004      	b.n	402014 <memchr+0x20>
  40200a:	b1fc      	cbz	r4, 40204c <memchr+0x58>
  40200c:	7804      	ldrb	r4, [r0, #0]
  40200e:	428c      	cmp	r4, r1
  402010:	d01d      	beq.n	40204e <memchr+0x5a>
  402012:	4614      	mov	r4, r2
  402014:	f013 0f03 	tst.w	r3, #3
  402018:	4618      	mov	r0, r3
  40201a:	f104 32ff 	add.w	r2, r4, #4294967295
  40201e:	f103 0301 	add.w	r3, r3, #1
  402022:	d1f2      	bne.n	40200a <memchr+0x16>
  402024:	2c03      	cmp	r4, #3
  402026:	d814      	bhi.n	402052 <memchr+0x5e>
  402028:	1e65      	subs	r5, r4, #1
  40202a:	b34c      	cbz	r4, 402080 <memchr+0x8c>
  40202c:	7803      	ldrb	r3, [r0, #0]
  40202e:	428b      	cmp	r3, r1
  402030:	d00d      	beq.n	40204e <memchr+0x5a>
  402032:	1c42      	adds	r2, r0, #1
  402034:	2300      	movs	r3, #0
  402036:	e002      	b.n	40203e <memchr+0x4a>
  402038:	7804      	ldrb	r4, [r0, #0]
  40203a:	428c      	cmp	r4, r1
  40203c:	d007      	beq.n	40204e <memchr+0x5a>
  40203e:	42ab      	cmp	r3, r5
  402040:	4610      	mov	r0, r2
  402042:	f103 0301 	add.w	r3, r3, #1
  402046:	f102 0201 	add.w	r2, r2, #1
  40204a:	d1f5      	bne.n	402038 <memchr+0x44>
  40204c:	2000      	movs	r0, #0
  40204e:	bc70      	pop	{r4, r5, r6}
  402050:	4770      	bx	lr
  402052:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  402056:	4603      	mov	r3, r0
  402058:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  40205c:	4618      	mov	r0, r3
  40205e:	3304      	adds	r3, #4
  402060:	6802      	ldr	r2, [r0, #0]
  402062:	4072      	eors	r2, r6
  402064:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  402068:	ea25 0202 	bic.w	r2, r5, r2
  40206c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  402070:	d1da      	bne.n	402028 <memchr+0x34>
  402072:	3c04      	subs	r4, #4
  402074:	2c03      	cmp	r4, #3
  402076:	4618      	mov	r0, r3
  402078:	d8f0      	bhi.n	40205c <memchr+0x68>
  40207a:	e7d5      	b.n	402028 <memchr+0x34>
  40207c:	4614      	mov	r4, r2
  40207e:	e7d1      	b.n	402024 <memchr+0x30>
  402080:	4620      	mov	r0, r4
  402082:	e7e4      	b.n	40204e <memchr+0x5a>

00402084 <memcpy>:
  402084:	4684      	mov	ip, r0
  402086:	ea41 0300 	orr.w	r3, r1, r0
  40208a:	f013 0303 	ands.w	r3, r3, #3
  40208e:	d16d      	bne.n	40216c <memcpy+0xe8>
  402090:	3a40      	subs	r2, #64	; 0x40
  402092:	d341      	bcc.n	402118 <memcpy+0x94>
  402094:	f851 3b04 	ldr.w	r3, [r1], #4
  402098:	f840 3b04 	str.w	r3, [r0], #4
  40209c:	f851 3b04 	ldr.w	r3, [r1], #4
  4020a0:	f840 3b04 	str.w	r3, [r0], #4
  4020a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4020a8:	f840 3b04 	str.w	r3, [r0], #4
  4020ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4020b0:	f840 3b04 	str.w	r3, [r0], #4
  4020b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4020b8:	f840 3b04 	str.w	r3, [r0], #4
  4020bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4020c0:	f840 3b04 	str.w	r3, [r0], #4
  4020c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4020c8:	f840 3b04 	str.w	r3, [r0], #4
  4020cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4020d0:	f840 3b04 	str.w	r3, [r0], #4
  4020d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4020d8:	f840 3b04 	str.w	r3, [r0], #4
  4020dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4020e0:	f840 3b04 	str.w	r3, [r0], #4
  4020e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4020e8:	f840 3b04 	str.w	r3, [r0], #4
  4020ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4020f0:	f840 3b04 	str.w	r3, [r0], #4
  4020f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4020f8:	f840 3b04 	str.w	r3, [r0], #4
  4020fc:	f851 3b04 	ldr.w	r3, [r1], #4
  402100:	f840 3b04 	str.w	r3, [r0], #4
  402104:	f851 3b04 	ldr.w	r3, [r1], #4
  402108:	f840 3b04 	str.w	r3, [r0], #4
  40210c:	f851 3b04 	ldr.w	r3, [r1], #4
  402110:	f840 3b04 	str.w	r3, [r0], #4
  402114:	3a40      	subs	r2, #64	; 0x40
  402116:	d2bd      	bcs.n	402094 <memcpy+0x10>
  402118:	3230      	adds	r2, #48	; 0x30
  40211a:	d311      	bcc.n	402140 <memcpy+0xbc>
  40211c:	f851 3b04 	ldr.w	r3, [r1], #4
  402120:	f840 3b04 	str.w	r3, [r0], #4
  402124:	f851 3b04 	ldr.w	r3, [r1], #4
  402128:	f840 3b04 	str.w	r3, [r0], #4
  40212c:	f851 3b04 	ldr.w	r3, [r1], #4
  402130:	f840 3b04 	str.w	r3, [r0], #4
  402134:	f851 3b04 	ldr.w	r3, [r1], #4
  402138:	f840 3b04 	str.w	r3, [r0], #4
  40213c:	3a10      	subs	r2, #16
  40213e:	d2ed      	bcs.n	40211c <memcpy+0x98>
  402140:	320c      	adds	r2, #12
  402142:	d305      	bcc.n	402150 <memcpy+0xcc>
  402144:	f851 3b04 	ldr.w	r3, [r1], #4
  402148:	f840 3b04 	str.w	r3, [r0], #4
  40214c:	3a04      	subs	r2, #4
  40214e:	d2f9      	bcs.n	402144 <memcpy+0xc0>
  402150:	3204      	adds	r2, #4
  402152:	d008      	beq.n	402166 <memcpy+0xe2>
  402154:	07d2      	lsls	r2, r2, #31
  402156:	bf1c      	itt	ne
  402158:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40215c:	f800 3b01 	strbne.w	r3, [r0], #1
  402160:	d301      	bcc.n	402166 <memcpy+0xe2>
  402162:	880b      	ldrh	r3, [r1, #0]
  402164:	8003      	strh	r3, [r0, #0]
  402166:	4660      	mov	r0, ip
  402168:	4770      	bx	lr
  40216a:	bf00      	nop
  40216c:	2a08      	cmp	r2, #8
  40216e:	d313      	bcc.n	402198 <memcpy+0x114>
  402170:	078b      	lsls	r3, r1, #30
  402172:	d08d      	beq.n	402090 <memcpy+0xc>
  402174:	f010 0303 	ands.w	r3, r0, #3
  402178:	d08a      	beq.n	402090 <memcpy+0xc>
  40217a:	f1c3 0304 	rsb	r3, r3, #4
  40217e:	1ad2      	subs	r2, r2, r3
  402180:	07db      	lsls	r3, r3, #31
  402182:	bf1c      	itt	ne
  402184:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402188:	f800 3b01 	strbne.w	r3, [r0], #1
  40218c:	d380      	bcc.n	402090 <memcpy+0xc>
  40218e:	f831 3b02 	ldrh.w	r3, [r1], #2
  402192:	f820 3b02 	strh.w	r3, [r0], #2
  402196:	e77b      	b.n	402090 <memcpy+0xc>
  402198:	3a04      	subs	r2, #4
  40219a:	d3d9      	bcc.n	402150 <memcpy+0xcc>
  40219c:	3a01      	subs	r2, #1
  40219e:	f811 3b01 	ldrb.w	r3, [r1], #1
  4021a2:	f800 3b01 	strb.w	r3, [r0], #1
  4021a6:	d2f9      	bcs.n	40219c <memcpy+0x118>
  4021a8:	780b      	ldrb	r3, [r1, #0]
  4021aa:	7003      	strb	r3, [r0, #0]
  4021ac:	784b      	ldrb	r3, [r1, #1]
  4021ae:	7043      	strb	r3, [r0, #1]
  4021b0:	788b      	ldrb	r3, [r1, #2]
  4021b2:	7083      	strb	r3, [r0, #2]
  4021b4:	4660      	mov	r0, ip
  4021b6:	4770      	bx	lr

004021b8 <memmove>:
  4021b8:	4288      	cmp	r0, r1
  4021ba:	b4f0      	push	{r4, r5, r6, r7}
  4021bc:	d910      	bls.n	4021e0 <memmove+0x28>
  4021be:	188c      	adds	r4, r1, r2
  4021c0:	42a0      	cmp	r0, r4
  4021c2:	d20d      	bcs.n	4021e0 <memmove+0x28>
  4021c4:	1885      	adds	r5, r0, r2
  4021c6:	1e53      	subs	r3, r2, #1
  4021c8:	b142      	cbz	r2, 4021dc <memmove+0x24>
  4021ca:	4621      	mov	r1, r4
  4021cc:	462a      	mov	r2, r5
  4021ce:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  4021d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4021d6:	3b01      	subs	r3, #1
  4021d8:	1c5c      	adds	r4, r3, #1
  4021da:	d1f8      	bne.n	4021ce <memmove+0x16>
  4021dc:	bcf0      	pop	{r4, r5, r6, r7}
  4021de:	4770      	bx	lr
  4021e0:	2a0f      	cmp	r2, #15
  4021e2:	d93f      	bls.n	402264 <memmove+0xac>
  4021e4:	ea40 0301 	orr.w	r3, r0, r1
  4021e8:	079b      	lsls	r3, r3, #30
  4021ea:	d13f      	bne.n	40226c <memmove+0xb4>
  4021ec:	f1a2 0710 	sub.w	r7, r2, #16
  4021f0:	093f      	lsrs	r7, r7, #4
  4021f2:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  4021f6:	3610      	adds	r6, #16
  4021f8:	460c      	mov	r4, r1
  4021fa:	4603      	mov	r3, r0
  4021fc:	6825      	ldr	r5, [r4, #0]
  4021fe:	601d      	str	r5, [r3, #0]
  402200:	6865      	ldr	r5, [r4, #4]
  402202:	605d      	str	r5, [r3, #4]
  402204:	68a5      	ldr	r5, [r4, #8]
  402206:	609d      	str	r5, [r3, #8]
  402208:	68e5      	ldr	r5, [r4, #12]
  40220a:	60dd      	str	r5, [r3, #12]
  40220c:	3310      	adds	r3, #16
  40220e:	42b3      	cmp	r3, r6
  402210:	f104 0410 	add.w	r4, r4, #16
  402214:	d1f2      	bne.n	4021fc <memmove+0x44>
  402216:	1c7b      	adds	r3, r7, #1
  402218:	f002 0c0f 	and.w	ip, r2, #15
  40221c:	011b      	lsls	r3, r3, #4
  40221e:	f1bc 0f03 	cmp.w	ip, #3
  402222:	4419      	add	r1, r3
  402224:	4403      	add	r3, r0
  402226:	d923      	bls.n	402270 <memmove+0xb8>
  402228:	460e      	mov	r6, r1
  40222a:	461d      	mov	r5, r3
  40222c:	4664      	mov	r4, ip
  40222e:	3c04      	subs	r4, #4
  402230:	f856 7b04 	ldr.w	r7, [r6], #4
  402234:	f845 7b04 	str.w	r7, [r5], #4
  402238:	2c03      	cmp	r4, #3
  40223a:	d8f8      	bhi.n	40222e <memmove+0x76>
  40223c:	f1ac 0404 	sub.w	r4, ip, #4
  402240:	f024 0403 	bic.w	r4, r4, #3
  402244:	3404      	adds	r4, #4
  402246:	f002 0203 	and.w	r2, r2, #3
  40224a:	4423      	add	r3, r4
  40224c:	4421      	add	r1, r4
  40224e:	2a00      	cmp	r2, #0
  402250:	d0c4      	beq.n	4021dc <memmove+0x24>
  402252:	441a      	add	r2, r3
  402254:	f811 4b01 	ldrb.w	r4, [r1], #1
  402258:	f803 4b01 	strb.w	r4, [r3], #1
  40225c:	4293      	cmp	r3, r2
  40225e:	d1f9      	bne.n	402254 <memmove+0x9c>
  402260:	bcf0      	pop	{r4, r5, r6, r7}
  402262:	4770      	bx	lr
  402264:	4603      	mov	r3, r0
  402266:	2a00      	cmp	r2, #0
  402268:	d1f3      	bne.n	402252 <memmove+0x9a>
  40226a:	e7b7      	b.n	4021dc <memmove+0x24>
  40226c:	4603      	mov	r3, r0
  40226e:	e7f0      	b.n	402252 <memmove+0x9a>
  402270:	4662      	mov	r2, ip
  402272:	2a00      	cmp	r2, #0
  402274:	d1ed      	bne.n	402252 <memmove+0x9a>
  402276:	e7b1      	b.n	4021dc <memmove+0x24>

00402278 <__malloc_lock>:
  402278:	4770      	bx	lr
  40227a:	bf00      	nop

0040227c <__malloc_unlock>:
  40227c:	4770      	bx	lr
  40227e:	bf00      	nop

00402280 <_realloc_r>:
  402280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402284:	460c      	mov	r4, r1
  402286:	b083      	sub	sp, #12
  402288:	4690      	mov	r8, r2
  40228a:	4681      	mov	r9, r0
  40228c:	2900      	cmp	r1, #0
  40228e:	f000 80e2 	beq.w	402456 <_realloc_r+0x1d6>
  402292:	f7ff fff1 	bl	402278 <__malloc_lock>
  402296:	f108 060b 	add.w	r6, r8, #11
  40229a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40229e:	2e16      	cmp	r6, #22
  4022a0:	f023 0503 	bic.w	r5, r3, #3
  4022a4:	f1a4 0708 	sub.w	r7, r4, #8
  4022a8:	d84b      	bhi.n	402342 <_realloc_r+0xc2>
  4022aa:	2110      	movs	r1, #16
  4022ac:	460e      	mov	r6, r1
  4022ae:	45b0      	cmp	r8, r6
  4022b0:	d84c      	bhi.n	40234c <_realloc_r+0xcc>
  4022b2:	428d      	cmp	r5, r1
  4022b4:	da78      	bge.n	4023a8 <_realloc_r+0x128>
  4022b6:	f8df b390 	ldr.w	fp, [pc, #912]	; 402648 <_realloc_r+0x3c8>
  4022ba:	f8db e008 	ldr.w	lr, [fp, #8]
  4022be:	1978      	adds	r0, r7, r5
  4022c0:	4586      	cmp	lr, r0
  4022c2:	f000 80ce 	beq.w	402462 <_realloc_r+0x1e2>
  4022c6:	6842      	ldr	r2, [r0, #4]
  4022c8:	f022 0c01 	bic.w	ip, r2, #1
  4022cc:	4484      	add	ip, r0
  4022ce:	f8dc c004 	ldr.w	ip, [ip, #4]
  4022d2:	f01c 0f01 	tst.w	ip, #1
  4022d6:	d07a      	beq.n	4023ce <_realloc_r+0x14e>
  4022d8:	2200      	movs	r2, #0
  4022da:	4610      	mov	r0, r2
  4022dc:	07db      	lsls	r3, r3, #31
  4022de:	f100 8092 	bmi.w	402406 <_realloc_r+0x186>
  4022e2:	f854 3c08 	ldr.w	r3, [r4, #-8]
  4022e6:	ebc3 0a07 	rsb	sl, r3, r7
  4022ea:	f8da 3004 	ldr.w	r3, [sl, #4]
  4022ee:	f023 0303 	bic.w	r3, r3, #3
  4022f2:	442b      	add	r3, r5
  4022f4:	b388      	cbz	r0, 40235a <_realloc_r+0xda>
  4022f6:	4570      	cmp	r0, lr
  4022f8:	f000 80ed 	beq.w	4024d6 <_realloc_r+0x256>
  4022fc:	eb02 0e03 	add.w	lr, r2, r3
  402300:	458e      	cmp	lr, r1
  402302:	db2a      	blt.n	40235a <_realloc_r+0xda>
  402304:	68c3      	ldr	r3, [r0, #12]
  402306:	6882      	ldr	r2, [r0, #8]
  402308:	4657      	mov	r7, sl
  40230a:	60d3      	str	r3, [r2, #12]
  40230c:	609a      	str	r2, [r3, #8]
  40230e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  402312:	f8da 300c 	ldr.w	r3, [sl, #12]
  402316:	60cb      	str	r3, [r1, #12]
  402318:	1f2a      	subs	r2, r5, #4
  40231a:	2a24      	cmp	r2, #36	; 0x24
  40231c:	6099      	str	r1, [r3, #8]
  40231e:	f200 8126 	bhi.w	40256e <_realloc_r+0x2ee>
  402322:	2a13      	cmp	r2, #19
  402324:	f240 80b3 	bls.w	40248e <_realloc_r+0x20e>
  402328:	6823      	ldr	r3, [r4, #0]
  40232a:	f8ca 3008 	str.w	r3, [sl, #8]
  40232e:	6863      	ldr	r3, [r4, #4]
  402330:	f8ca 300c 	str.w	r3, [sl, #12]
  402334:	2a1b      	cmp	r2, #27
  402336:	f200 8130 	bhi.w	40259a <_realloc_r+0x31a>
  40233a:	3408      	adds	r4, #8
  40233c:	f10a 0310 	add.w	r3, sl, #16
  402340:	e0a6      	b.n	402490 <_realloc_r+0x210>
  402342:	f026 0607 	bic.w	r6, r6, #7
  402346:	2e00      	cmp	r6, #0
  402348:	4631      	mov	r1, r6
  40234a:	dab0      	bge.n	4022ae <_realloc_r+0x2e>
  40234c:	230c      	movs	r3, #12
  40234e:	2000      	movs	r0, #0
  402350:	f8c9 3000 	str.w	r3, [r9]
  402354:	b003      	add	sp, #12
  402356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40235a:	428b      	cmp	r3, r1
  40235c:	db53      	blt.n	402406 <_realloc_r+0x186>
  40235e:	4657      	mov	r7, sl
  402360:	f8da 100c 	ldr.w	r1, [sl, #12]
  402364:	f857 0f08 	ldr.w	r0, [r7, #8]!
  402368:	1f2a      	subs	r2, r5, #4
  40236a:	2a24      	cmp	r2, #36	; 0x24
  40236c:	60c1      	str	r1, [r0, #12]
  40236e:	6088      	str	r0, [r1, #8]
  402370:	f200 8109 	bhi.w	402586 <_realloc_r+0x306>
  402374:	2a13      	cmp	r2, #19
  402376:	f240 8104 	bls.w	402582 <_realloc_r+0x302>
  40237a:	6821      	ldr	r1, [r4, #0]
  40237c:	f8ca 1008 	str.w	r1, [sl, #8]
  402380:	6861      	ldr	r1, [r4, #4]
  402382:	f8ca 100c 	str.w	r1, [sl, #12]
  402386:	2a1b      	cmp	r2, #27
  402388:	f200 811c 	bhi.w	4025c4 <_realloc_r+0x344>
  40238c:	3408      	adds	r4, #8
  40238e:	f10a 0210 	add.w	r2, sl, #16
  402392:	6821      	ldr	r1, [r4, #0]
  402394:	6011      	str	r1, [r2, #0]
  402396:	6861      	ldr	r1, [r4, #4]
  402398:	6051      	str	r1, [r2, #4]
  40239a:	68a1      	ldr	r1, [r4, #8]
  40239c:	6091      	str	r1, [r2, #8]
  40239e:	461d      	mov	r5, r3
  4023a0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4023a4:	463c      	mov	r4, r7
  4023a6:	4657      	mov	r7, sl
  4023a8:	1baa      	subs	r2, r5, r6
  4023aa:	2a0f      	cmp	r2, #15
  4023ac:	f003 0301 	and.w	r3, r3, #1
  4023b0:	d819      	bhi.n	4023e6 <_realloc_r+0x166>
  4023b2:	432b      	orrs	r3, r5
  4023b4:	443d      	add	r5, r7
  4023b6:	607b      	str	r3, [r7, #4]
  4023b8:	686b      	ldr	r3, [r5, #4]
  4023ba:	f043 0301 	orr.w	r3, r3, #1
  4023be:	606b      	str	r3, [r5, #4]
  4023c0:	4648      	mov	r0, r9
  4023c2:	f7ff ff5b 	bl	40227c <__malloc_unlock>
  4023c6:	4620      	mov	r0, r4
  4023c8:	b003      	add	sp, #12
  4023ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4023ce:	f022 0203 	bic.w	r2, r2, #3
  4023d2:	eb02 0c05 	add.w	ip, r2, r5
  4023d6:	458c      	cmp	ip, r1
  4023d8:	db80      	blt.n	4022dc <_realloc_r+0x5c>
  4023da:	68c2      	ldr	r2, [r0, #12]
  4023dc:	6881      	ldr	r1, [r0, #8]
  4023de:	4665      	mov	r5, ip
  4023e0:	60ca      	str	r2, [r1, #12]
  4023e2:	6091      	str	r1, [r2, #8]
  4023e4:	e7e0      	b.n	4023a8 <_realloc_r+0x128>
  4023e6:	19b9      	adds	r1, r7, r6
  4023e8:	f042 0001 	orr.w	r0, r2, #1
  4023ec:	431e      	orrs	r6, r3
  4023ee:	440a      	add	r2, r1
  4023f0:	607e      	str	r6, [r7, #4]
  4023f2:	6048      	str	r0, [r1, #4]
  4023f4:	6853      	ldr	r3, [r2, #4]
  4023f6:	f043 0301 	orr.w	r3, r3, #1
  4023fa:	3108      	adds	r1, #8
  4023fc:	6053      	str	r3, [r2, #4]
  4023fe:	4648      	mov	r0, r9
  402400:	f7ff f83c 	bl	40147c <_free_r>
  402404:	e7dc      	b.n	4023c0 <_realloc_r+0x140>
  402406:	4641      	mov	r1, r8
  402408:	4648      	mov	r0, r9
  40240a:	f7ff fb57 	bl	401abc <_malloc_r>
  40240e:	4680      	mov	r8, r0
  402410:	b1d0      	cbz	r0, 402448 <_realloc_r+0x1c8>
  402412:	f854 3c04 	ldr.w	r3, [r4, #-4]
  402416:	f023 0201 	bic.w	r2, r3, #1
  40241a:	443a      	add	r2, r7
  40241c:	f1a0 0108 	sub.w	r1, r0, #8
  402420:	4291      	cmp	r1, r2
  402422:	f000 809e 	beq.w	402562 <_realloc_r+0x2e2>
  402426:	1f2a      	subs	r2, r5, #4
  402428:	2a24      	cmp	r2, #36	; 0x24
  40242a:	d850      	bhi.n	4024ce <_realloc_r+0x24e>
  40242c:	2a13      	cmp	r2, #19
  40242e:	d823      	bhi.n	402478 <_realloc_r+0x1f8>
  402430:	4603      	mov	r3, r0
  402432:	4622      	mov	r2, r4
  402434:	6811      	ldr	r1, [r2, #0]
  402436:	6019      	str	r1, [r3, #0]
  402438:	6851      	ldr	r1, [r2, #4]
  40243a:	6059      	str	r1, [r3, #4]
  40243c:	6892      	ldr	r2, [r2, #8]
  40243e:	609a      	str	r2, [r3, #8]
  402440:	4621      	mov	r1, r4
  402442:	4648      	mov	r0, r9
  402444:	f7ff f81a 	bl	40147c <_free_r>
  402448:	4648      	mov	r0, r9
  40244a:	f7ff ff17 	bl	40227c <__malloc_unlock>
  40244e:	4640      	mov	r0, r8
  402450:	b003      	add	sp, #12
  402452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402456:	4611      	mov	r1, r2
  402458:	b003      	add	sp, #12
  40245a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40245e:	f7ff bb2d 	b.w	401abc <_malloc_r>
  402462:	f8de 2004 	ldr.w	r2, [lr, #4]
  402466:	f022 0203 	bic.w	r2, r2, #3
  40246a:	1950      	adds	r0, r2, r5
  40246c:	f106 0c10 	add.w	ip, r6, #16
  402470:	4560      	cmp	r0, ip
  402472:	da19      	bge.n	4024a8 <_realloc_r+0x228>
  402474:	4670      	mov	r0, lr
  402476:	e731      	b.n	4022dc <_realloc_r+0x5c>
  402478:	6823      	ldr	r3, [r4, #0]
  40247a:	6003      	str	r3, [r0, #0]
  40247c:	6863      	ldr	r3, [r4, #4]
  40247e:	6043      	str	r3, [r0, #4]
  402480:	2a1b      	cmp	r2, #27
  402482:	d863      	bhi.n	40254c <_realloc_r+0x2cc>
  402484:	f100 0308 	add.w	r3, r0, #8
  402488:	f104 0208 	add.w	r2, r4, #8
  40248c:	e7d2      	b.n	402434 <_realloc_r+0x1b4>
  40248e:	463b      	mov	r3, r7
  402490:	6822      	ldr	r2, [r4, #0]
  402492:	601a      	str	r2, [r3, #0]
  402494:	6862      	ldr	r2, [r4, #4]
  402496:	605a      	str	r2, [r3, #4]
  402498:	68a2      	ldr	r2, [r4, #8]
  40249a:	609a      	str	r2, [r3, #8]
  40249c:	463c      	mov	r4, r7
  40249e:	4675      	mov	r5, lr
  4024a0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4024a4:	4657      	mov	r7, sl
  4024a6:	e77f      	b.n	4023a8 <_realloc_r+0x128>
  4024a8:	4437      	add	r7, r6
  4024aa:	1b83      	subs	r3, r0, r6
  4024ac:	f043 0301 	orr.w	r3, r3, #1
  4024b0:	f8cb 7008 	str.w	r7, [fp, #8]
  4024b4:	607b      	str	r3, [r7, #4]
  4024b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4024ba:	f003 0301 	and.w	r3, r3, #1
  4024be:	431e      	orrs	r6, r3
  4024c0:	4648      	mov	r0, r9
  4024c2:	f844 6c04 	str.w	r6, [r4, #-4]
  4024c6:	f7ff fed9 	bl	40227c <__malloc_unlock>
  4024ca:	4620      	mov	r0, r4
  4024cc:	e77c      	b.n	4023c8 <_realloc_r+0x148>
  4024ce:	4621      	mov	r1, r4
  4024d0:	f7ff fe72 	bl	4021b8 <memmove>
  4024d4:	e7b4      	b.n	402440 <_realloc_r+0x1c0>
  4024d6:	eb02 0c03 	add.w	ip, r2, r3
  4024da:	f106 0210 	add.w	r2, r6, #16
  4024de:	4594      	cmp	ip, r2
  4024e0:	f6ff af3b 	blt.w	40235a <_realloc_r+0xda>
  4024e4:	4657      	mov	r7, sl
  4024e6:	f8da 300c 	ldr.w	r3, [sl, #12]
  4024ea:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4024ee:	1f2a      	subs	r2, r5, #4
  4024f0:	2a24      	cmp	r2, #36	; 0x24
  4024f2:	60cb      	str	r3, [r1, #12]
  4024f4:	6099      	str	r1, [r3, #8]
  4024f6:	f200 8087 	bhi.w	402608 <_realloc_r+0x388>
  4024fa:	2a13      	cmp	r2, #19
  4024fc:	d978      	bls.n	4025f0 <_realloc_r+0x370>
  4024fe:	6823      	ldr	r3, [r4, #0]
  402500:	f8ca 3008 	str.w	r3, [sl, #8]
  402504:	6863      	ldr	r3, [r4, #4]
  402506:	f8ca 300c 	str.w	r3, [sl, #12]
  40250a:	2a1b      	cmp	r2, #27
  40250c:	f200 8085 	bhi.w	40261a <_realloc_r+0x39a>
  402510:	3408      	adds	r4, #8
  402512:	f10a 0310 	add.w	r3, sl, #16
  402516:	6822      	ldr	r2, [r4, #0]
  402518:	601a      	str	r2, [r3, #0]
  40251a:	6862      	ldr	r2, [r4, #4]
  40251c:	605a      	str	r2, [r3, #4]
  40251e:	68a2      	ldr	r2, [r4, #8]
  402520:	609a      	str	r2, [r3, #8]
  402522:	eb0a 0306 	add.w	r3, sl, r6
  402526:	ebc6 020c 	rsb	r2, r6, ip
  40252a:	f042 0201 	orr.w	r2, r2, #1
  40252e:	f8cb 3008 	str.w	r3, [fp, #8]
  402532:	605a      	str	r2, [r3, #4]
  402534:	f8da 3004 	ldr.w	r3, [sl, #4]
  402538:	f003 0301 	and.w	r3, r3, #1
  40253c:	431e      	orrs	r6, r3
  40253e:	4648      	mov	r0, r9
  402540:	f8ca 6004 	str.w	r6, [sl, #4]
  402544:	f7ff fe9a 	bl	40227c <__malloc_unlock>
  402548:	4638      	mov	r0, r7
  40254a:	e73d      	b.n	4023c8 <_realloc_r+0x148>
  40254c:	68a3      	ldr	r3, [r4, #8]
  40254e:	6083      	str	r3, [r0, #8]
  402550:	68e3      	ldr	r3, [r4, #12]
  402552:	60c3      	str	r3, [r0, #12]
  402554:	2a24      	cmp	r2, #36	; 0x24
  402556:	d02c      	beq.n	4025b2 <_realloc_r+0x332>
  402558:	f100 0310 	add.w	r3, r0, #16
  40255c:	f104 0210 	add.w	r2, r4, #16
  402560:	e768      	b.n	402434 <_realloc_r+0x1b4>
  402562:	f850 2c04 	ldr.w	r2, [r0, #-4]
  402566:	f022 0203 	bic.w	r2, r2, #3
  40256a:	4415      	add	r5, r2
  40256c:	e71c      	b.n	4023a8 <_realloc_r+0x128>
  40256e:	4621      	mov	r1, r4
  402570:	4638      	mov	r0, r7
  402572:	4675      	mov	r5, lr
  402574:	463c      	mov	r4, r7
  402576:	f7ff fe1f 	bl	4021b8 <memmove>
  40257a:	4657      	mov	r7, sl
  40257c:	f8da 3004 	ldr.w	r3, [sl, #4]
  402580:	e712      	b.n	4023a8 <_realloc_r+0x128>
  402582:	463a      	mov	r2, r7
  402584:	e705      	b.n	402392 <_realloc_r+0x112>
  402586:	4621      	mov	r1, r4
  402588:	4638      	mov	r0, r7
  40258a:	461d      	mov	r5, r3
  40258c:	463c      	mov	r4, r7
  40258e:	f7ff fe13 	bl	4021b8 <memmove>
  402592:	4657      	mov	r7, sl
  402594:	f8da 3004 	ldr.w	r3, [sl, #4]
  402598:	e706      	b.n	4023a8 <_realloc_r+0x128>
  40259a:	68a3      	ldr	r3, [r4, #8]
  40259c:	f8ca 3010 	str.w	r3, [sl, #16]
  4025a0:	68e3      	ldr	r3, [r4, #12]
  4025a2:	f8ca 3014 	str.w	r3, [sl, #20]
  4025a6:	2a24      	cmp	r2, #36	; 0x24
  4025a8:	d018      	beq.n	4025dc <_realloc_r+0x35c>
  4025aa:	3410      	adds	r4, #16
  4025ac:	f10a 0318 	add.w	r3, sl, #24
  4025b0:	e76e      	b.n	402490 <_realloc_r+0x210>
  4025b2:	6923      	ldr	r3, [r4, #16]
  4025b4:	6103      	str	r3, [r0, #16]
  4025b6:	6963      	ldr	r3, [r4, #20]
  4025b8:	6143      	str	r3, [r0, #20]
  4025ba:	f104 0218 	add.w	r2, r4, #24
  4025be:	f100 0318 	add.w	r3, r0, #24
  4025c2:	e737      	b.n	402434 <_realloc_r+0x1b4>
  4025c4:	68a1      	ldr	r1, [r4, #8]
  4025c6:	f8ca 1010 	str.w	r1, [sl, #16]
  4025ca:	68e1      	ldr	r1, [r4, #12]
  4025cc:	f8ca 1014 	str.w	r1, [sl, #20]
  4025d0:	2a24      	cmp	r2, #36	; 0x24
  4025d2:	d00f      	beq.n	4025f4 <_realloc_r+0x374>
  4025d4:	3410      	adds	r4, #16
  4025d6:	f10a 0218 	add.w	r2, sl, #24
  4025da:	e6da      	b.n	402392 <_realloc_r+0x112>
  4025dc:	6923      	ldr	r3, [r4, #16]
  4025de:	f8ca 3018 	str.w	r3, [sl, #24]
  4025e2:	6963      	ldr	r3, [r4, #20]
  4025e4:	f8ca 301c 	str.w	r3, [sl, #28]
  4025e8:	3418      	adds	r4, #24
  4025ea:	f10a 0320 	add.w	r3, sl, #32
  4025ee:	e74f      	b.n	402490 <_realloc_r+0x210>
  4025f0:	463b      	mov	r3, r7
  4025f2:	e790      	b.n	402516 <_realloc_r+0x296>
  4025f4:	6922      	ldr	r2, [r4, #16]
  4025f6:	f8ca 2018 	str.w	r2, [sl, #24]
  4025fa:	6962      	ldr	r2, [r4, #20]
  4025fc:	f8ca 201c 	str.w	r2, [sl, #28]
  402600:	3418      	adds	r4, #24
  402602:	f10a 0220 	add.w	r2, sl, #32
  402606:	e6c4      	b.n	402392 <_realloc_r+0x112>
  402608:	4621      	mov	r1, r4
  40260a:	4638      	mov	r0, r7
  40260c:	f8cd c004 	str.w	ip, [sp, #4]
  402610:	f7ff fdd2 	bl	4021b8 <memmove>
  402614:	f8dd c004 	ldr.w	ip, [sp, #4]
  402618:	e783      	b.n	402522 <_realloc_r+0x2a2>
  40261a:	68a3      	ldr	r3, [r4, #8]
  40261c:	f8ca 3010 	str.w	r3, [sl, #16]
  402620:	68e3      	ldr	r3, [r4, #12]
  402622:	f8ca 3014 	str.w	r3, [sl, #20]
  402626:	2a24      	cmp	r2, #36	; 0x24
  402628:	d003      	beq.n	402632 <_realloc_r+0x3b2>
  40262a:	3410      	adds	r4, #16
  40262c:	f10a 0318 	add.w	r3, sl, #24
  402630:	e771      	b.n	402516 <_realloc_r+0x296>
  402632:	6923      	ldr	r3, [r4, #16]
  402634:	f8ca 3018 	str.w	r3, [sl, #24]
  402638:	6963      	ldr	r3, [r4, #20]
  40263a:	f8ca 301c 	str.w	r3, [sl, #28]
  40263e:	3418      	adds	r4, #24
  402640:	f10a 0320 	add.w	r3, sl, #32
  402644:	e767      	b.n	402516 <_realloc_r+0x296>
  402646:	bf00      	nop
  402648:	20000434 	.word	0x20000434

0040264c <lflush>:
  40264c:	8983      	ldrh	r3, [r0, #12]
  40264e:	f003 0309 	and.w	r3, r3, #9
  402652:	2b09      	cmp	r3, #9
  402654:	d001      	beq.n	40265a <lflush+0xe>
  402656:	2000      	movs	r0, #0
  402658:	4770      	bx	lr
  40265a:	f7fe be13 	b.w	401284 <fflush>
  40265e:	bf00      	nop

00402660 <__srefill_r>:
  402660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402662:	460c      	mov	r4, r1
  402664:	4605      	mov	r5, r0
  402666:	b110      	cbz	r0, 40266e <__srefill_r+0xe>
  402668:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40266a:	2b00      	cmp	r3, #0
  40266c:	d043      	beq.n	4026f6 <__srefill_r+0x96>
  40266e:	89a2      	ldrh	r2, [r4, #12]
  402670:	b293      	uxth	r3, r2
  402672:	0499      	lsls	r1, r3, #18
  402674:	d407      	bmi.n	402686 <__srefill_r+0x26>
  402676:	6e63      	ldr	r3, [r4, #100]	; 0x64
  402678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40267c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402680:	6663      	str	r3, [r4, #100]	; 0x64
  402682:	81a2      	strh	r2, [r4, #12]
  402684:	b293      	uxth	r3, r2
  402686:	2100      	movs	r1, #0
  402688:	069f      	lsls	r7, r3, #26
  40268a:	6061      	str	r1, [r4, #4]
  40268c:	d430      	bmi.n	4026f0 <__srefill_r+0x90>
  40268e:	075e      	lsls	r6, r3, #29
  402690:	d521      	bpl.n	4026d6 <__srefill_r+0x76>
  402692:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402694:	b161      	cbz	r1, 4026b0 <__srefill_r+0x50>
  402696:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40269a:	4299      	cmp	r1, r3
  40269c:	d002      	beq.n	4026a4 <__srefill_r+0x44>
  40269e:	4628      	mov	r0, r5
  4026a0:	f7fe feec 	bl	40147c <_free_r>
  4026a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4026a6:	6063      	str	r3, [r4, #4]
  4026a8:	2000      	movs	r0, #0
  4026aa:	6320      	str	r0, [r4, #48]	; 0x30
  4026ac:	2b00      	cmp	r3, #0
  4026ae:	d13f      	bne.n	402730 <__srefill_r+0xd0>
  4026b0:	6923      	ldr	r3, [r4, #16]
  4026b2:	2b00      	cmp	r3, #0
  4026b4:	d04c      	beq.n	402750 <__srefill_r+0xf0>
  4026b6:	89a6      	ldrh	r6, [r4, #12]
  4026b8:	b2b7      	uxth	r7, r6
  4026ba:	07bb      	lsls	r3, r7, #30
  4026bc:	d11e      	bne.n	4026fc <__srefill_r+0x9c>
  4026be:	6922      	ldr	r2, [r4, #16]
  4026c0:	6022      	str	r2, [r4, #0]
  4026c2:	4628      	mov	r0, r5
  4026c4:	69e1      	ldr	r1, [r4, #28]
  4026c6:	6a25      	ldr	r5, [r4, #32]
  4026c8:	6963      	ldr	r3, [r4, #20]
  4026ca:	47a8      	blx	r5
  4026cc:	2800      	cmp	r0, #0
  4026ce:	6060      	str	r0, [r4, #4]
  4026d0:	dd09      	ble.n	4026e6 <__srefill_r+0x86>
  4026d2:	2000      	movs	r0, #0
  4026d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4026d6:	06d8      	lsls	r0, r3, #27
  4026d8:	d53f      	bpl.n	40275a <__srefill_r+0xfa>
  4026da:	0719      	lsls	r1, r3, #28
  4026dc:	d42b      	bmi.n	402736 <__srefill_r+0xd6>
  4026de:	f042 0204 	orr.w	r2, r2, #4
  4026e2:	81a2      	strh	r2, [r4, #12]
  4026e4:	e7e4      	b.n	4026b0 <__srefill_r+0x50>
  4026e6:	d11a      	bne.n	40271e <__srefill_r+0xbe>
  4026e8:	89a3      	ldrh	r3, [r4, #12]
  4026ea:	f043 0320 	orr.w	r3, r3, #32
  4026ee:	81a3      	strh	r3, [r4, #12]
  4026f0:	f04f 30ff 	mov.w	r0, #4294967295
  4026f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4026f6:	f7fe fddd 	bl	4012b4 <__sinit>
  4026fa:	e7b8      	b.n	40266e <__srefill_r+0xe>
  4026fc:	4b1b      	ldr	r3, [pc, #108]	; (40276c <__srefill_r+0x10c>)
  4026fe:	491c      	ldr	r1, [pc, #112]	; (402770 <__srefill_r+0x110>)
  402700:	6818      	ldr	r0, [r3, #0]
  402702:	2301      	movs	r3, #1
  402704:	81a3      	strh	r3, [r4, #12]
  402706:	f007 0709 	and.w	r7, r7, #9
  40270a:	f7ff f911 	bl	401930 <_fwalk>
  40270e:	2f09      	cmp	r7, #9
  402710:	81a6      	strh	r6, [r4, #12]
  402712:	d1d4      	bne.n	4026be <__srefill_r+0x5e>
  402714:	4628      	mov	r0, r5
  402716:	4621      	mov	r1, r4
  402718:	f7fe fcf4 	bl	401104 <__sflush_r>
  40271c:	e7cf      	b.n	4026be <__srefill_r+0x5e>
  40271e:	89a2      	ldrh	r2, [r4, #12]
  402720:	2300      	movs	r3, #0
  402722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402726:	81a2      	strh	r2, [r4, #12]
  402728:	6063      	str	r3, [r4, #4]
  40272a:	f04f 30ff 	mov.w	r0, #4294967295
  40272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402732:	6023      	str	r3, [r4, #0]
  402734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402736:	4628      	mov	r0, r5
  402738:	4621      	mov	r1, r4
  40273a:	f7fe fd8d 	bl	401258 <_fflush_r>
  40273e:	2800      	cmp	r0, #0
  402740:	d1d6      	bne.n	4026f0 <__srefill_r+0x90>
  402742:	89a2      	ldrh	r2, [r4, #12]
  402744:	60a0      	str	r0, [r4, #8]
  402746:	f022 0208 	bic.w	r2, r2, #8
  40274a:	61a0      	str	r0, [r4, #24]
  40274c:	b292      	uxth	r2, r2
  40274e:	e7c6      	b.n	4026de <__srefill_r+0x7e>
  402750:	4628      	mov	r0, r5
  402752:	4621      	mov	r1, r4
  402754:	f7ff f93a 	bl	4019cc <__smakebuf_r>
  402758:	e7ad      	b.n	4026b6 <__srefill_r+0x56>
  40275a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40275e:	2309      	movs	r3, #9
  402760:	602b      	str	r3, [r5, #0]
  402762:	f04f 30ff 	mov.w	r0, #4294967295
  402766:	81a2      	strh	r2, [r4, #12]
  402768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40276a:	bf00      	nop
  40276c:	00402b68 	.word	0x00402b68
  402770:	0040264d 	.word	0x0040264d

00402774 <_sbrk_r>:
  402774:	b538      	push	{r3, r4, r5, lr}
  402776:	4c07      	ldr	r4, [pc, #28]	; (402794 <_sbrk_r+0x20>)
  402778:	2300      	movs	r3, #0
  40277a:	4605      	mov	r5, r0
  40277c:	4608      	mov	r0, r1
  40277e:	6023      	str	r3, [r4, #0]
  402780:	f7fe faac 	bl	400cdc <_sbrk>
  402784:	1c43      	adds	r3, r0, #1
  402786:	d000      	beq.n	40278a <_sbrk_r+0x16>
  402788:	bd38      	pop	{r3, r4, r5, pc}
  40278a:	6823      	ldr	r3, [r4, #0]
  40278c:	2b00      	cmp	r3, #0
  40278e:	d0fb      	beq.n	402788 <_sbrk_r+0x14>
  402790:	602b      	str	r3, [r5, #0]
  402792:	bd38      	pop	{r3, r4, r5, pc}
  402794:	2000091c 	.word	0x2000091c

00402798 <__sread>:
  402798:	b510      	push	{r4, lr}
  40279a:	460c      	mov	r4, r1
  40279c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4027a0:	f000 f938 	bl	402a14 <_read_r>
  4027a4:	2800      	cmp	r0, #0
  4027a6:	db03      	blt.n	4027b0 <__sread+0x18>
  4027a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4027aa:	4403      	add	r3, r0
  4027ac:	6523      	str	r3, [r4, #80]	; 0x50
  4027ae:	bd10      	pop	{r4, pc}
  4027b0:	89a3      	ldrh	r3, [r4, #12]
  4027b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4027b6:	81a3      	strh	r3, [r4, #12]
  4027b8:	bd10      	pop	{r4, pc}
  4027ba:	bf00      	nop

004027bc <__swrite>:
  4027bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4027c0:	460c      	mov	r4, r1
  4027c2:	8989      	ldrh	r1, [r1, #12]
  4027c4:	461d      	mov	r5, r3
  4027c6:	05cb      	lsls	r3, r1, #23
  4027c8:	4616      	mov	r6, r2
  4027ca:	4607      	mov	r7, r0
  4027cc:	d506      	bpl.n	4027dc <__swrite+0x20>
  4027ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4027d2:	2200      	movs	r2, #0
  4027d4:	2302      	movs	r3, #2
  4027d6:	f000 f909 	bl	4029ec <_lseek_r>
  4027da:	89a1      	ldrh	r1, [r4, #12]
  4027dc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
  4027e0:	81a1      	strh	r1, [r4, #12]
  4027e2:	4638      	mov	r0, r7
  4027e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4027e8:	4632      	mov	r2, r6
  4027ea:	462b      	mov	r3, r5
  4027ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4027f0:	f000 b814 	b.w	40281c <_write_r>

004027f4 <__sseek>:
  4027f4:	b510      	push	{r4, lr}
  4027f6:	460c      	mov	r4, r1
  4027f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4027fc:	f000 f8f6 	bl	4029ec <_lseek_r>
  402800:	89a3      	ldrh	r3, [r4, #12]
  402802:	1c42      	adds	r2, r0, #1
  402804:	bf0e      	itee	eq
  402806:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40280a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40280e:	6520      	strne	r0, [r4, #80]	; 0x50
  402810:	81a3      	strh	r3, [r4, #12]
  402812:	bd10      	pop	{r4, pc}

00402814 <__sclose>:
  402814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402818:	f000 b868 	b.w	4028ec <_close_r>

0040281c <_write_r>:
  40281c:	b570      	push	{r4, r5, r6, lr}
  40281e:	4c08      	ldr	r4, [pc, #32]	; (402840 <_write_r+0x24>)
  402820:	4606      	mov	r6, r0
  402822:	2500      	movs	r5, #0
  402824:	4608      	mov	r0, r1
  402826:	4611      	mov	r1, r2
  402828:	461a      	mov	r2, r3
  40282a:	6025      	str	r5, [r4, #0]
  40282c:	f7fd fe2c 	bl	400488 <_write>
  402830:	1c43      	adds	r3, r0, #1
  402832:	d000      	beq.n	402836 <_write_r+0x1a>
  402834:	bd70      	pop	{r4, r5, r6, pc}
  402836:	6823      	ldr	r3, [r4, #0]
  402838:	2b00      	cmp	r3, #0
  40283a:	d0fb      	beq.n	402834 <_write_r+0x18>
  40283c:	6033      	str	r3, [r6, #0]
  40283e:	bd70      	pop	{r4, r5, r6, pc}
  402840:	2000091c 	.word	0x2000091c

00402844 <__register_exitproc>:
  402844:	b5f0      	push	{r4, r5, r6, r7, lr}
  402846:	4c27      	ldr	r4, [pc, #156]	; (4028e4 <__register_exitproc+0xa0>)
  402848:	6826      	ldr	r6, [r4, #0]
  40284a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  40284e:	b085      	sub	sp, #20
  402850:	4607      	mov	r7, r0
  402852:	2c00      	cmp	r4, #0
  402854:	d041      	beq.n	4028da <__register_exitproc+0x96>
  402856:	6865      	ldr	r5, [r4, #4]
  402858:	2d1f      	cmp	r5, #31
  40285a:	dd1e      	ble.n	40289a <__register_exitproc+0x56>
  40285c:	4822      	ldr	r0, [pc, #136]	; (4028e8 <__register_exitproc+0xa4>)
  40285e:	b918      	cbnz	r0, 402868 <__register_exitproc+0x24>
  402860:	f04f 30ff 	mov.w	r0, #4294967295
  402864:	b005      	add	sp, #20
  402866:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402868:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40286c:	9103      	str	r1, [sp, #12]
  40286e:	9202      	str	r2, [sp, #8]
  402870:	9301      	str	r3, [sp, #4]
  402872:	f7ff f91b 	bl	401aac <malloc>
  402876:	9903      	ldr	r1, [sp, #12]
  402878:	9a02      	ldr	r2, [sp, #8]
  40287a:	9b01      	ldr	r3, [sp, #4]
  40287c:	4604      	mov	r4, r0
  40287e:	2800      	cmp	r0, #0
  402880:	d0ee      	beq.n	402860 <__register_exitproc+0x1c>
  402882:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  402886:	6025      	str	r5, [r4, #0]
  402888:	2000      	movs	r0, #0
  40288a:	6060      	str	r0, [r4, #4]
  40288c:	4605      	mov	r5, r0
  40288e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  402892:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  402896:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  40289a:	b93f      	cbnz	r7, 4028ac <__register_exitproc+0x68>
  40289c:	1cab      	adds	r3, r5, #2
  40289e:	2000      	movs	r0, #0
  4028a0:	3501      	adds	r5, #1
  4028a2:	6065      	str	r5, [r4, #4]
  4028a4:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  4028a8:	b005      	add	sp, #20
  4028aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4028ac:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  4028b0:	f04f 0c01 	mov.w	ip, #1
  4028b4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  4028b8:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  4028bc:	fa0c f205 	lsl.w	r2, ip, r5
  4028c0:	4316      	orrs	r6, r2
  4028c2:	2f02      	cmp	r7, #2
  4028c4:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  4028c8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  4028cc:	d1e6      	bne.n	40289c <__register_exitproc+0x58>
  4028ce:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4028d2:	431a      	orrs	r2, r3
  4028d4:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4028d8:	e7e0      	b.n	40289c <__register_exitproc+0x58>
  4028da:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  4028de:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  4028e2:	e7b8      	b.n	402856 <__register_exitproc+0x12>
  4028e4:	00402b68 	.word	0x00402b68
  4028e8:	00401aad 	.word	0x00401aad

004028ec <_close_r>:
  4028ec:	b538      	push	{r3, r4, r5, lr}
  4028ee:	4c07      	ldr	r4, [pc, #28]	; (40290c <_close_r+0x20>)
  4028f0:	2300      	movs	r3, #0
  4028f2:	4605      	mov	r5, r0
  4028f4:	4608      	mov	r0, r1
  4028f6:	6023      	str	r3, [r4, #0]
  4028f8:	f7fe fa0a 	bl	400d10 <_close>
  4028fc:	1c43      	adds	r3, r0, #1
  4028fe:	d000      	beq.n	402902 <_close_r+0x16>
  402900:	bd38      	pop	{r3, r4, r5, pc}
  402902:	6823      	ldr	r3, [r4, #0]
  402904:	2b00      	cmp	r3, #0
  402906:	d0fb      	beq.n	402900 <_close_r+0x14>
  402908:	602b      	str	r3, [r5, #0]
  40290a:	bd38      	pop	{r3, r4, r5, pc}
  40290c:	2000091c 	.word	0x2000091c

00402910 <_fclose_r>:
  402910:	b570      	push	{r4, r5, r6, lr}
  402912:	460c      	mov	r4, r1
  402914:	4605      	mov	r5, r0
  402916:	b131      	cbz	r1, 402926 <_fclose_r+0x16>
  402918:	b110      	cbz	r0, 402920 <_fclose_r+0x10>
  40291a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40291c:	2b00      	cmp	r3, #0
  40291e:	d02f      	beq.n	402980 <_fclose_r+0x70>
  402920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402924:	b90b      	cbnz	r3, 40292a <_fclose_r+0x1a>
  402926:	2000      	movs	r0, #0
  402928:	bd70      	pop	{r4, r5, r6, pc}
  40292a:	4628      	mov	r0, r5
  40292c:	4621      	mov	r1, r4
  40292e:	f7fe fc93 	bl	401258 <_fflush_r>
  402932:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402934:	4606      	mov	r6, r0
  402936:	b133      	cbz	r3, 402946 <_fclose_r+0x36>
  402938:	4628      	mov	r0, r5
  40293a:	69e1      	ldr	r1, [r4, #28]
  40293c:	4798      	blx	r3
  40293e:	2800      	cmp	r0, #0
  402940:	bfb8      	it	lt
  402942:	f04f 36ff 	movlt.w	r6, #4294967295
  402946:	89a3      	ldrh	r3, [r4, #12]
  402948:	061b      	lsls	r3, r3, #24
  40294a:	d41c      	bmi.n	402986 <_fclose_r+0x76>
  40294c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40294e:	b141      	cbz	r1, 402962 <_fclose_r+0x52>
  402950:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402954:	4299      	cmp	r1, r3
  402956:	d002      	beq.n	40295e <_fclose_r+0x4e>
  402958:	4628      	mov	r0, r5
  40295a:	f7fe fd8f 	bl	40147c <_free_r>
  40295e:	2300      	movs	r3, #0
  402960:	6323      	str	r3, [r4, #48]	; 0x30
  402962:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402964:	b121      	cbz	r1, 402970 <_fclose_r+0x60>
  402966:	4628      	mov	r0, r5
  402968:	f7fe fd88 	bl	40147c <_free_r>
  40296c:	2300      	movs	r3, #0
  40296e:	6463      	str	r3, [r4, #68]	; 0x44
  402970:	f7fe fd1a 	bl	4013a8 <__sfp_lock_acquire>
  402974:	2300      	movs	r3, #0
  402976:	81a3      	strh	r3, [r4, #12]
  402978:	f7fe fd18 	bl	4013ac <__sfp_lock_release>
  40297c:	4630      	mov	r0, r6
  40297e:	bd70      	pop	{r4, r5, r6, pc}
  402980:	f7fe fc98 	bl	4012b4 <__sinit>
  402984:	e7cc      	b.n	402920 <_fclose_r+0x10>
  402986:	4628      	mov	r0, r5
  402988:	6921      	ldr	r1, [r4, #16]
  40298a:	f7fe fd77 	bl	40147c <_free_r>
  40298e:	e7dd      	b.n	40294c <_fclose_r+0x3c>

00402990 <fclose>:
  402990:	4b02      	ldr	r3, [pc, #8]	; (40299c <fclose+0xc>)
  402992:	4601      	mov	r1, r0
  402994:	6818      	ldr	r0, [r3, #0]
  402996:	f7ff bfbb 	b.w	402910 <_fclose_r>
  40299a:	bf00      	nop
  40299c:	20000430 	.word	0x20000430

004029a0 <_fstat_r>:
  4029a0:	b538      	push	{r3, r4, r5, lr}
  4029a2:	4c08      	ldr	r4, [pc, #32]	; (4029c4 <_fstat_r+0x24>)
  4029a4:	2300      	movs	r3, #0
  4029a6:	4605      	mov	r5, r0
  4029a8:	4608      	mov	r0, r1
  4029aa:	4611      	mov	r1, r2
  4029ac:	6023      	str	r3, [r4, #0]
  4029ae:	f7fe f9b3 	bl	400d18 <_fstat>
  4029b2:	1c43      	adds	r3, r0, #1
  4029b4:	d000      	beq.n	4029b8 <_fstat_r+0x18>
  4029b6:	bd38      	pop	{r3, r4, r5, pc}
  4029b8:	6823      	ldr	r3, [r4, #0]
  4029ba:	2b00      	cmp	r3, #0
  4029bc:	d0fb      	beq.n	4029b6 <_fstat_r+0x16>
  4029be:	602b      	str	r3, [r5, #0]
  4029c0:	bd38      	pop	{r3, r4, r5, pc}
  4029c2:	bf00      	nop
  4029c4:	2000091c 	.word	0x2000091c

004029c8 <_isatty_r>:
  4029c8:	b538      	push	{r3, r4, r5, lr}
  4029ca:	4c07      	ldr	r4, [pc, #28]	; (4029e8 <_isatty_r+0x20>)
  4029cc:	2300      	movs	r3, #0
  4029ce:	4605      	mov	r5, r0
  4029d0:	4608      	mov	r0, r1
  4029d2:	6023      	str	r3, [r4, #0]
  4029d4:	f7fe f9a6 	bl	400d24 <_isatty>
  4029d8:	1c43      	adds	r3, r0, #1
  4029da:	d000      	beq.n	4029de <_isatty_r+0x16>
  4029dc:	bd38      	pop	{r3, r4, r5, pc}
  4029de:	6823      	ldr	r3, [r4, #0]
  4029e0:	2b00      	cmp	r3, #0
  4029e2:	d0fb      	beq.n	4029dc <_isatty_r+0x14>
  4029e4:	602b      	str	r3, [r5, #0]
  4029e6:	bd38      	pop	{r3, r4, r5, pc}
  4029e8:	2000091c 	.word	0x2000091c

004029ec <_lseek_r>:
  4029ec:	b570      	push	{r4, r5, r6, lr}
  4029ee:	4c08      	ldr	r4, [pc, #32]	; (402a10 <_lseek_r+0x24>)
  4029f0:	4606      	mov	r6, r0
  4029f2:	2500      	movs	r5, #0
  4029f4:	4608      	mov	r0, r1
  4029f6:	4611      	mov	r1, r2
  4029f8:	461a      	mov	r2, r3
  4029fa:	6025      	str	r5, [r4, #0]
  4029fc:	f7fe f994 	bl	400d28 <_lseek>
  402a00:	1c43      	adds	r3, r0, #1
  402a02:	d000      	beq.n	402a06 <_lseek_r+0x1a>
  402a04:	bd70      	pop	{r4, r5, r6, pc}
  402a06:	6823      	ldr	r3, [r4, #0]
  402a08:	2b00      	cmp	r3, #0
  402a0a:	d0fb      	beq.n	402a04 <_lseek_r+0x18>
  402a0c:	6033      	str	r3, [r6, #0]
  402a0e:	bd70      	pop	{r4, r5, r6, pc}
  402a10:	2000091c 	.word	0x2000091c

00402a14 <_read_r>:
  402a14:	b570      	push	{r4, r5, r6, lr}
  402a16:	4c08      	ldr	r4, [pc, #32]	; (402a38 <_read_r+0x24>)
  402a18:	4606      	mov	r6, r0
  402a1a:	2500      	movs	r5, #0
  402a1c:	4608      	mov	r0, r1
  402a1e:	4611      	mov	r1, r2
  402a20:	461a      	mov	r2, r3
  402a22:	6025      	str	r5, [r4, #0]
  402a24:	f7fd fd10 	bl	400448 <_read>
  402a28:	1c43      	adds	r3, r0, #1
  402a2a:	d000      	beq.n	402a2e <_read_r+0x1a>
  402a2c:	bd70      	pop	{r4, r5, r6, pc}
  402a2e:	6823      	ldr	r3, [r4, #0]
  402a30:	2b00      	cmp	r3, #0
  402a32:	d0fb      	beq.n	402a2c <_read_r+0x18>
  402a34:	6033      	str	r3, [r6, #0]
  402a36:	bd70      	pop	{r4, r5, r6, pc}
  402a38:	2000091c 	.word	0x2000091c
  402a3c:	69726553 	.word	0x69726553
  402a40:	65206c61 	.word	0x65206c61
  402a44:	726f7272 	.word	0x726f7272
  402a48:	00000d21 	.word	0x00000d21
  402a4c:	66667542 	.word	0x66667542
  402a50:	6f207265 	.word	0x6f207265
  402a54:	66726576 	.word	0x66726576
  402a58:	21776f6c 	.word	0x21776f6c
  402a5c:	0000000d 	.word	0x0000000d

00402a60 <_ctype_>:
  402a60:	20202000 20202020 28282020 20282828     .         ((((( 
  402a70:	20202020 20202020 20202020 20202020                     
  402a80:	10108820 10101010 10101010 10101010      ...............
  402a90:	04040410 04040404 10040404 10101010     ................
  402aa0:	41411010 41414141 01010101 01010101     ..AAAAAA........
  402ab0:	01010101 01010101 01010101 10101010     ................
  402ac0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  402ad0:	02020202 02020202 02020202 10101010     ................
  402ae0:	00000020 00000000 00000000 00000000      ...............
	...
  402b64:	00000043                                C...

00402b68 <_global_impure_ptr>:
  402b68:	20000008 0000000a                       ... ....

00402b70 <_init>:
  402b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402b72:	bf00      	nop
  402b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402b76:	bc08      	pop	{r3}
  402b78:	469e      	mov	lr, r3
  402b7a:	4770      	bx	lr

00402b7c <__init_array_start>:
  402b7c:	004010e5 	.word	0x004010e5

00402b80 <__frame_dummy_init_array_entry>:
  402b80:	004000f1                                ..@.

00402b84 <_fini>:
  402b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402b86:	bf00      	nop
  402b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402b8a:	bc08      	pop	{r3}
  402b8c:	469e      	mov	lr, r3
  402b8e:	4770      	bx	lr

00402b90 <__fini_array_start>:
  402b90:	004000cd 	.word	0x004000cd
